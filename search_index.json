[
["index.html", "Estadística Aplicada III Temario y referencias", " Estadística Aplicada III Andreu Boada de Atela 2018-02-22 Temario y referencias Todas las notas y material del curso estarán en este repositorio. Análisis exploratorio de datos Temas selectos de R Análisis de datos categóricos Regresión logística Regularización y selección de modelos Introducción a modelos lineales generalizados Análisis de discriminante lineal Componentes principales y análisis de factores Análisis de la correlación canónica Introducción a análisis de conglomerados Introducción a estadística espacial Evaluación Tareas semanales (20%) Examen parcial (30% práctico, 20% teórico) Un examen final (30% práctico) Software: R y Rstudio R Sitio de R (CRAN) Rstudio Interfaz gráfica para trabajar en R. Recursos para aprender R Referencias principales Agresti, Alan. Categorical data analysis. 3rd ed. Hoboken, N. J.: John Wiley &amp; Sons, 2013. Johnson, R., y Wichern, D. Applied multivariate statistical analysis. Upper Saddle River, N. J.: Pearson Prentice Hall, 2007. Otras referencias Pattern Recognition and Machine Learning The Elements of Statistical Learning, Hastie, Tibshirani y Friedman Greenacre, Michael J., ed. Multiple correspondence analysis and related methods. Boca Raton, Fla.: Chapman &amp; Hall/CRC, 2006 Thompson, Bruce. Canonical correlation analysis : uses and interpretation. Thousand Oaks, Calif.: Sage Publications, 1984 Jackson, J. Edward. A user’s guide to principal components. New York: John Wiley &amp; Sons, 1991. Harrell, Frank E. Regression modeling strategies : with applications to linear models, logistic regression, and survival analysis. New York: Springer, c2001. McLachlan, Geoffrey J. Discriminant analysis and statistical pattern recognition. New York: John Wiley &amp; Sons, 1992. Tareas Enviar tareas por correo electrónico a: andreuboadadeatela@gmail.com con el asunto “EAPLICADA3-Tarea-[XX]-[clave única 1]-[clave única 2]” donde [XX] es el número de la tarea, [clave única 1] y [clave única 2] son tu clave y la de tu compañero con quien vas a trabajar durante el semestre. "],
["intro.html", "Clase 1 Introducción 1.1 ¿Por qué un análisis multivariado? 1.2 La paradoja de Simpson 1.3 Modelos log-lineales 1.4 Interpretación de parámetros 1.5 Otros ejemplos 1.6 Tarea", " Clase 1 Introducción .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } La investigación científica es un proceso de aprendizaje iterativo. Para explicar un fenómeno físico o social primero se deben especificar los objetivos de una investigación y luego probar los objetivos a través de la recopilación y el análisis de datos pertinentes. A su vez, el análisis de los datos recopilados (experimentalmente o mediante observación) generalmente sugerirá una explicación modificada del fenómeno. A lo largo de este proceso iterativo, generalmente se añaden o se excluyen variables del análisis. Por lo tanto, la complejidad de la mayoría de los fenómenos requieren que el investigador recolecte muchas variables de las observaciones. En este curso veremos una introducción a los modelos estadísticos que son multivariados, es decir, modelos en los cuales los datos corresponden a mediciones en muchas variables. 1.1 ¿Por qué un análisis multivariado? Las razones por las cuales se utilizan modelos multivariados son generalmente (Johnson, Wichern, and others 2014): Factores de “confusión”. Un factor de confusión (o confound variable) es una variable que puede correlacionarse con otra variable de interés. Las correlaciones espurias son un posible tipo de confusión, donde el factor de confusión hace que una variable sin importancia real parezca ser importante. Pero las confusiones pueden ocultar variables reales importantes tan fácilmente como pueden producir falsas. Un ejemplo de esto, conocido como la “paradoja” de Simpson, consiste de datos en los cuales la dirección de una aparente asociación entre un predictor y la variable respuesta se puede revertir al considerar un factor de confusión. 1.2 La paradoja de Simpson La paradoja de Simpson, también conocida como el efecto Yule-Simpson, ocurre cuando existe una asociación entre dos variables en varios grupos pero la dirección de esta asociación se invierte cuando los datos se combinan para formar un solo grupo. En un análisis de los scores de SAT (examen de posicionamiento para la universidad) en Estados Unidos en 1997 se encontró que había una relación negativa entre el salario promedio anual de los maestros y el score total promedio de los alumnos que presentaron el SAT: library(tidyverse) sat &lt;- read_csv(&quot;datos/sat.csv&quot;) ggplot(sat, aes(x = teacher_salary, y = total_score)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = F) + xlab(&quot;Salario anual promedio (en miles) de maestros&quot;) + ylab(&quot;Score total promedio de SAT&quot;) Podemos revisar el resultado de la regresión lineal (haciendo uso del paquete stargazer): library(stargazer) out1 &lt;- lm(formula = total_score ~ teacher_salary, data = sat) stargazer(out1, type = &#39;html&#39;, style = &quot;all&quot;, single.row = T, title = &quot;Regresión lineal del promedio de sueldo de maestros vs SAT promedio&quot;) Regresión lineal del promedio de sueldo de maestros vs SAT promedio Dependent variable: total_score teacher_salary -5.540*** (1.630) t = -3.390 p = 0.002 Constant 1,159.000*** (57.700) t = 20.100 p = 0.000 Observations 50 R2 0.193 Adjusted R2 0.177 Residual Std. Error 67.900 (df = 48) F Statistic 11.500*** (df = 1; 48) (p = 0.002) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Podemos observar que el coeficiente de la variable salario es \\(-5.54\\) y es significartivo según la prueba de hipótesis correspondiente. Desafortunadamente, la asociación entre salario y score de SAT parece ser negativa: a medida que aumenta el salario, se predice que el score SAT promedio disminuye. Afortunadamente para los maestros, una vez que se cuenta la variable de la fracción de alumnos que presentan el SAT, vemos una relación positiva estadísticamente significativa: out2 &lt;- lm(formula = total_score ~ teacher_salary + perc_take_sat, data = sat) stargazer(out2, type = &#39;html&#39;, style = &quot;all&quot;, single.row = T, title = &quot;Incluyendo el factor de confusión&quot;) Incluyendo el factor de confusión Dependent variable: total_score teacher_salary 2.180** (1.030) t = 2.120 p = 0.040 perc_take_sat -2.780*** (0.228) t = -12.200 p = 0.000 Constant 988.000*** (31.900) t = 31.000 p = 0.000 Observations 50 R2 0.806 Adjusted R2 0.797 Residual Std. Error 33.700 (df = 47) F Statistic 97.400*** (df = 2; 47) (p = 0.000) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Podemos ver que el coeficiente de la regresión lineal correspondiente al salario de los maestros se invierte. Gráficamente podemos visualizar este efecto: Vemos que dentro de cada grupo, la pendiente es positiva (o al menos no negativa). También podríamos agregar etiquetas: Otro ejemplo de este fenómeno es cuando la Universidad de California, Berkeley fue demandada por discrimanción hacia mujeres que habían solicitado admisión a un posgrado en 1973. De acuerdo con las estadísticas de admisión, los hombres que presentaron la solicitud tenían mayor probabilidad de ser admitidos que las mujeres, y la diferencia era tan sustancial que uno podría concluir que efectivamente había existido dicha discriminación. Sin embargo, al examinar los datos individualmente por departamento, parecía que no había una diferencia significativa en contra de las mujeres. ucb &lt;- UCBAdmissions %&gt;% as.tibble() ucb %&gt;% head(10) %&gt;% knitr::kable() Admit Gender Dept n Admitted Male A 512 Rejected Male A 313 Admitted Female A 89 Rejected Female A 19 Admitted Male B 353 Rejected Male B 207 Admitted Female B 17 Rejected Female B 8 Admitted Male C 120 Rejected Male C 205 Los datos contienen el número de solicitudes y admisiones por género a seis escuelas de postgrado diferentes. Analicemos una tabla de contingencia entre la variable género y la variable admitido: tab &lt;- ucb %&gt;% group_by(Gender, Admit) %&gt;% summarise(p = sum(n)) %&gt;% spread(Admit, p) tab %&gt;% knitr::kable() Gender Admitted Rejected Female 557 1278 Male 1198 1493 Los solicitantes masculinos tenían una tasa de aceptación del 44.52%, en comparación con solo el 30.35% de las mujeres, condicionando en la variable de género: tab %&gt;% gather(Admit, n, -Gender) %&gt;% mutate(prop = round(prop.table(n) * 100,2)) %&gt;% select(-n) %&gt;% spread(Admit, prop) %&gt;% knitr::kable() Gender Admitted Rejected Female 30.4 69.7 Male 44.5 55.5 Incluso podemos proporcionar una prueba estadística para apoyar la afirmación de que hubo sesgo en las admisiones. En R, se puede realizar una prueba de proporciones a través de la función prop.test(): prop.test(tab %&gt;% ungroup() %&gt;% select(-Gender) %&gt;% as.matrix()) #&gt; #&gt; 2-sample test for equality of proportions with continuity #&gt; correction #&gt; #&gt; data: tab %&gt;% ungroup() %&gt;% select(-Gender) %&gt;% as.matrix() #&gt; X-squared = 90, df = 1, p-value &lt;2e-16 #&gt; alternative hypothesis: two.sided #&gt; 95 percent confidence interval: #&gt; -0.170 -0.113 #&gt; sample estimates: #&gt; prop 1 prop 2 #&gt; 0.304 0.445 A partir de la prueba de hipótesis realizada anteriormente, se puede concluir que hay una diferencias significativa entre la proporción de hombres admitidos y la proporción de mujeres admitidas en los programas de posgrado. Sin embargo, si hacemos el mismo análisis por departamento, veremos que las diferencias ya no son tan significativas: ucb %&gt;% spread(Admit, n) %&gt;% mutate(total = Admitted + Rejected, porc = round(Admitted/total*100,2)) %&gt;% select(Gender,Dept,porc) %&gt;% spread(Gender, porc) %&gt;% knitr::kable() Dept Female Male A 82.41 62.1 B 68.00 63.0 C 34.06 36.9 D 34.93 33.1 E 23.92 27.8 F 7.04 5.9 Condicionando por departamento ahora vemos que las mujeres realmente tienen mayores tasas de admisión en cuatro de los seis departamentos (A, B, D, F). ¿Cómo puede ser esto? En realidad las diferencias tienen que ver con el porcentaje de solicitantes (hombres y mujeres) que son admitidos por departamentos, es decir, hay departamentos más competitivos que otros. Consideremos un modelo log-lineal. Sea \\(p_{ijk}\\) la proporción de la población en la celda \\((i,j,k)\\). Por ejemplo, \\(p_{112}\\) es la proporción de solicitantes que son admitidos, son hombres y se postulan para el Departamento B. tab &lt;- xtabs(n ~ ., ucb) llout &lt;- loglin(tab, list(1:2,c(1,3),2:3),param=TRUE) #&gt; 9 iterations: deviation 0.0492 Los efectos globales de la variable de admitidos son: llout$param$Admit %&gt;% knitr::kable() x Admitted -0.321 Rejected 0.321 Los efectos globales de la variable Departamento, por ejemplo, nos dicen qué departamentos tienden a tener más solicitantes (el A, el C y el D), aunque en realidad esto no sea tan relevante: llout$param$Dept %&gt;% knitr::kable() x A 0.154 B -0.765 C 0.540 D 0.430 E -0.029 F -0.330 Los efectos globales de la variable género también nos dicen que el número de solicitantes hombres es mayor que el número de solicitantes que son mujeres: llout$param$Gender %&gt;% knitr::kable() x Female -0.329 Male 0.329 Analicemos ahora los términos de interacciones entre variables. Como la variable que nos interesa es la de admisión, veamos la interacción de Admit-Gender y Admit-Department: llout$param$Admit.Gender %&gt;% knitr::kable() Female Male Admitted 0.025 -0.025 Rejected -0.025 0.025 llout$param$Admit.Dept %&gt;% knitr::kable() A B C D E F Admitted 0.637 0.615 0.006 -0.01 -0.232 -1.02 Rejected -0.637 -0.615 -0.006 0.01 0.232 1.02 En términos de asociación con la variable de admisión, la relación con la variable de departamento es mucho más fuerte que con la de género, lo que significa que la mayoría de los parámetros estimados son mucho más grandes en el primer caso. En otras palabras, el departamento es la variable más importante, no el género. Más aún, los resultados anteriores también muestran que existe una interacción Admit-Female positiva, es decir, que a las mujeres les va un poco mejor que a los hombres en cuanto a la admisión. 1.3 Modelos log-lineales Denotemos los 3 factores por \\(X^{(s)}\\), \\(s=1,2,3\\). En este caso particular, \\(X^{(1)}\\) es la variable de admisión Admit, y toma valores de \\(1\\) y \\(2\\), admitido y no admitido respectivamente. \\(X^{(2)}\\) la variable género tomaría valores \\(1\\) y \\(2\\) para hombre y mujer respectivamente, mientras que \\(X^{(3)}\\), la variable de departamento, toma valores del \\(1\\) al \\(6\\) para representar los departamentos A al F. En esta notación no estamos usando variables indicadoras. Estamos trabajando con variables estrictamente categóricas, cuyos valores son meramente etiquetas. Sea \\(X_r^{(s)}\\) el valor de \\(X^{(s)}\\) para el \\(i\\)-ésimo solicitante en la muestra, para \\(r=1,2,\\ldots,n\\). Aquí el número de observaciones es el número de solicitantes $n=$4526. Nuestros datos son los conteos en todas las categorías: \\[ N_{ijk} = \\mbox{nú}\\;\\mbox{mero de solicitantes }r\\mbox{ tales que }X_r^{(1)}=i, X_r^{(2)}=j,\\mbox{ y } X_r^{(3)}=k. \\] A esto le llamamos una tabla de contigencias en tres variables. Cada valor \\(N_{ijk}\\) es una celda de la tabla. Sea \\(p_{ijk}\\) la proporción poblacional de un solicitante elegido al azar en la celda \\((i,j,k)\\), es decir, \\[ p_{ijk} = P(X^{(1)}=i \\mbox{ y } X^{(2)}=j \\mbox{ y } X^{(3)}=k) = E(N_{ijk})/n. \\] Como se mencionó, nos interesan las relaciones entre las factores, en forma de independencia, tanto plena como parcial. De hecho, es común que un analista ajuste sucesivamente modelos más refinados a los datos, asumiendo cada uno una estructura de dependencia más compleja que la anterior. Esto se desarrollará en detalle a continuación. Considere primero el modelo que asume la independencia total: \\[ \\begin{eqnarray*} p_{ijk} &amp; = &amp; P(X^{(1)}=i \\mbox{ y } X^{(2)}=j \\mbox{ y } X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i) \\cdot P(X^{(2)}=j) \\cdot P(X^{(3)}=k). \\end{eqnarray*} \\] Tomando logaritmo de ambos lados, vemos que la independencia de los tres factores es equivalente a escribir una ecuación de la forma \\[ \\mbox{log}(p_{ijk}) = a_i + b_j + c_k, \\] donde \\(a_i,b_j,c_k\\) son cantidades estimadas. Por ejemplo, \\[ b_j = \\mbox{log}\\left(P(X^{(2)}=j)\\right). \\] El punto es que el modelo es similar a un modelo de regresión lineal sin interacciones. El análogo de que no haya interacción entre las variables aquí está representado por el supuesto de independencia. Por ejemplo, si suponemos que Departamento es independiente de Admisión y Género, pero que Admisión y Género no son independientes entre sí, el modelo incluiría un término de interacción \\(i-j\\): \\[ p_{ijk} = P(X^{(1)}=i, X^{(2)}=j)\\cdot P(X^{(3)} = k), \\] por lo que el modelo sería \\[ \\mbox{log}(p_{ijk}) = a_{ij} + b_k. \\] La mayoría de los modelos formales reescriben esto como \\[ a_{ij} = u + v_i + w_j + r_{ij}, \\] de tal forma que el término de interacción \\(P(X^{(1)}=i \\mbox{ y } X^{(2)}=j)\\) es una suma de un “efecto global” \\(u\\), “efectos principales” \\(v_i\\) y \\(w_j\\) y “efectos de interacción” \\(r_{ij}\\), nuevamente de forma análoga a la regresión lineal. Sin embargo, tenga en cuenta que esto en realidad nos da demasiados parámetros. Para el término de interacción \\(a_{ij}\\) del modelo, tenemos \\(2 \\times 3 = 6\\) probabilidades reales, pero \\(1 + 2 + 2 + 2\\times 2 = 9\\) parámetros (1 para \\(u\\), 2 para \\(v_i\\) y así sucesivamente). Por esta razón, generalmente los modelos tienen restricciones de la forma \\[ \\displaystyle{\\sum_i{v_i}}=0. \\] Es posible enumerar todas las restricciones, aunque en la mayoría de los modelos aún con restricciones el número de parámetros puede ser muy grande. ¿Qué modelo es más apropiado en el ejemplo anterior? \\(p_{ijk} = P(X^{(1)}=i) \\cdot P(X^{(2)}=j, X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i, X^{(2)}=j, X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i)\\cdot P(X^{(2)}=j)\\cdot P(X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i, X^{(3)}=k) \\cdot P(X^{(2)}=j)\\) Otro posible modelo tendría Admitido y Género condicionalmente independientes, dado Departamento, lo que significa que en cualquier género, la proporción de admitidos y su género, no están relacionados. Escribimos el modelo de esta manera \\[ \\begin{eqnarray*} p_{ijk} &amp;=&amp; P(X^{(1)}=i, X^{(2)}=j, X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i, X^{(2)}=j|X^{(3)}=k) \\cdot P(X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i|X^{(3)}=k) \\cdot P(X^{(2)}=j|X^{(3)}=k) \\cdot P(X^{(3)}=k), \\end{eqnarray*} \\] y el modelo sería de la forma \\[ \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + c_k. \\] ¿Cuántos parámetros tendría este modelo? 30 35 40 45 1.4 Interpretación de parámetros Consideremos los modelos: \\[ \\begin{eqnarray*} \\mbox{(1)} &amp; \\qquad &amp; \\mbox{log}(p_{ijk}) = a_{ij} + b_k, \\\\ \\mbox{(2)} &amp; \\qquad &amp; \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + c_k. \\end{eqnarray*} \\] La independencia que representa el modelo (1) tiene una interpretación muy diferente a las independencias representadas por el modelo (2). 1.4.1 Ejemplo: dos monedas Supongamos que tenemos una gran caja con monedas de dos tipos. Las monedas de tipo 1 tienen probabilidad \\(p\\) de salir águila, y las monedas tipo 2 tienen probabilidad \\(q\\) de salir águila. Una proporción \\(r\\) de las monedas es del tipo 1. Seleccionamos una moneda al azar de la caja, lanzamos esa moneda \\(M\\) veces, y observamos \\(N\\) águilas. ¿Cuál es la distribución de \\(N\\)? \\[ p_N(k) = r \\dbinom{M}{k}p^k (1-p)^{M-k} + (1-r) \\dbinom{M}{k}q^k (1-q)^{M-k}, \\] donde \\(k=0,1,\\ldots,M\\). Es fácil ver por qué a esta distribución se le conoce como modelo de mezcla. Esta función de distribución de probabilidad es una mezcla de dos funciones de distribución de probabilidad binomiales, con proporciones de mezcla \\(r\\) y \\(1-r\\). Si \\(M\\) es una variable aleatoria con soporte (o rango) \\(R\\) y \\(\\left\\{g_t\\right\\}_{t\\in R}\\) es una colección de funciones de densidad, entonces se dice que \\(h\\) es una función de densidad de mezcla si \\[ h = \\displaystyle{\\sum_{k\\in R}p_M(k)g_k}, \\] cuando \\(M\\) es una variable aleatoria discreta, o si \\[ h = \\displaystyle{\\int_{t\\in R}f_M(t)g_t(u)\\;\\;dt}, \\] cuando \\(M\\) es una variable aleatoria continua. En el ejemplo de la moneda: \\(Y = N\\) \\(S = \\{1,2\\}\\) \\(p_M(1) = r, \\quad p_M(2) = 1-r\\) \\(g_1\\) es la fn de densidad de una va \\(\\mbox{Binomial}(M,p)\\) \\(g_2\\) es la fn de densidad de una va \\(\\mbox{Binomial}(M,q)\\) Dada la elección de moneda, el resultado de la moneda 1 es independiente del resultado de la oneda 2. Sin embargo, los resultados de las monedas no son independientes si no se sabe qué moneda fue seleccionada. Este ejemplo es como el del modelo (2) mencionado arriba. Por otro lado, se sabe que la estatura y el peso están asociadas linealmente, pero ambas son independientes de la preferenvia por algún sabor de helado, una situación similar a la del modelo (1). Es importante considerar las interacciones que están consideradas en el modelo, por ejemplo: en el modelo (1) hay una interacción entre los factores \\(i,j\\) pero no hay interacción con el factor \\(k\\), por lo que \\(i\\) y \\(j\\) se modelan como completamente independientes de \\(k\\) y no entre sí, mientras que en el modelo (2) \\(i\\) y \\(j\\) tienen una interacción con \\(k\\) y no entre sí, por lo que \\(i\\) y \\(j\\) no son independientes entre sí, pero sí los son dado \\(k\\). Consideremos ahora el modelo \\[ \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + l_{ij} + c_k, \\] ¿cuál de las siguientes afirmaciones es cierta? \\(i\\) y \\(j\\) son dependientes dado \\(k\\). \\(i\\) y \\(j\\) son independientes dado \\(k\\). \\(i\\) y \\(k\\) son dependientes dado \\(j\\). \\(i\\) y \\(k\\) son independientes dado \\(j\\). Si hubiéramos incluido un término \\(m_{ijk}\\), que ahora haría que el modelo estuviera lleno (o saturado), entonces sería posible que los factores \\(i\\) y \\(j\\) estuvieran altamente relacionados para algunos valores de \\(k\\), y menos relacionados para otros. Claramente, cuantas más variables tengamos, y cuanto mayor sea el orden de las interacciones que incluimos, más difícil será interpretar el modelo. 1.5 Otros ejemplos 1.5.1 Discriminación de residentes hispanos con discapacidades La mayoría de los estados en los Estados Unidos proporcionan servicios y apoyo a personas con discapacidades (por ejemplo, discapacidad intelectual, parálisis cerebral, autismo, etc.) y sus familias. La agencia a través de la cual el estado de California sirve al desarrollo de la población discapacitada es el Departamento de Servicios de Desarrollo de California (DDS). Una de las responsabilidades de DDS es asignar fondos que respalden a más de 250,000 residentes con discapacidades de desarrollo (denominados “consumidores”). Hace algunos años, se hizo una alegación de discriminación presentando un análisis univariado que examinaba los gastos anuales promedio de los consumidores por etnia. El análisis reveló que el gasto anual promedio en consumidores hispanos (Hispanic) era aproximadamente un tercera parte (1/3) del gasto promedio en consumidores blancos no hispanos (White non-Hispanic). Este hallazgo fue el catalizador para una mayor investigación; posteriormente, los legisladores estatales y los gerentes de departamento buscaron servicios de consultoría de un estadístico. El conjunto de datos utilizado en el análisis contiene seis variables: ID: identificador único por consumidor, Categoría de edad: es una variable importante porque, aunque la edad suele ser causa de discriminación legal, en este caso, para la población específica de Hispanos no americanos la edad no se consideraría relacionada con los casos de discriminación. El propósito de estas ayudas es que los que viven con alguna discapacidad puedan vivir igual que los que no tienen ninguna discapacidad. Es lógico, por lo tanto, que mientras las personas tienen mayor edad requieran de mayor ayuda económica. Los seis grupos de edad utilizados en este ámbito son: 0 a 5 años de edad, 6 a 12, 13 a 17, 18 a 21, 22 a 50, y más de 51. Edad: edad del consumidor, Género: se incluye en los datos como una variable a considerar porque el género es otro factor sujeto a discriminación, Gastos: el gasto anual que el gobierno le dedica a un consumidor para apoyar a estos individuos y sus familias. El gasto se dedica a: ayuda a la familia, servicios psicológicos, gastos médicos, transporte y costos relacionados a la vivienda como la renta. Origen étnico: es la variable más importante ya que con respecto a esta variable se presentaron las supuestas alegaciones por discriminación. Los primeros 10 renglones de la tabla se muestran a continuación: dds &lt;- read_csv(&quot;datos/californiaDDSData.csv&quot;) dds %&gt;% head(10) %&gt;% knitr::kable() Id Age Cohort Age Gender Expenditures Ethnicity 10210 13-17 17 Female 2113 White not Hispanic 10409 22-50 37 Male 41924 White not Hispanic 10486 0-5 3 Male 1454 Hispanic 10538 18-21 19 Female 6400 Hispanic 10568 13-17 13 Male 4412 White not Hispanic 10690 13-17 15 Female 4566 Hispanic 10711 13-17 13 Female 3915 White not Hispanic 10778 13-17 17 Male 3873 Black 10820 13-17 14 Female 5021 White not Hispanic 10823 13-17 13 Male 2887 Hispanic Se puede ver que la columna “Age Cohort” tiene la categoría de edad a la cual correponde la observación. También podemos utilizar la función glimpse() del paquete tibble: glimpse(dds) #&gt; Observations: 1,000 #&gt; Variables: 6 #&gt; $ Id &lt;int&gt; 10210, 10409, 10486, 10538, 10568, 10690, 10711, ... #&gt; $ `Age Cohort` &lt;chr&gt; &quot;13-17&quot;, &quot;22-50&quot;, &quot;0-5&quot;, &quot;18-21&quot;, &quot;13-17&quot;, &quot;13-17... #&gt; $ Age &lt;int&gt; 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15... #&gt; $ Gender &lt;chr&gt; &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Fema... #&gt; $ Expenditures &lt;int&gt; 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, ... #&gt; $ Ethnicity &lt;chr&gt; &quot;White not Hispanic&quot;, &quot;White not Hispanic&quot;, &quot;Hisp... Podemos ver que el conjunto de datos contiene una muestra de exactamente 1000 observaciones que fueron seleccionadas aleatoriamente. Veamos una tabla del gasto promedio por etnicidad: dds %&gt;% group_by(Ethnicity) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Ethnicity Gasto_promedio American Indian 36438 Asian 18392 Black 20885 Hispanic 11066 Multi Race 4457 Native Hawaiian 42782 Other 3316 White not Hispanic 24698 Podemos comparar también con el promedio de todos los consumidores: mean(dds$Expenditures) #&gt; [1] 18066 Es común hacer gráficas de barras para representar medias, aunque en realidad, esto no es lo más recomendable: media_por_etnia &lt;- dds %&gt;% group_by(Ethnicity) %&gt;% summarise(Media_etnia = mean(Expenditures)) media_por_etnia$Etnia &lt;- reorder(media_por_etnia$Ethnicity, -media_por_etnia$Media_etnia, FUN = median) ggplot(media_por_etnia, aes(x = Etnia, y = Media_etnia)) + geom_bar(stat = &#39;identity&#39;) + theme(axis.text.x = element_text(angle=25)) ¿Se puede concluir que existe evidencia de discriminación contra los Hispanos en comparación con los blancos no hispanos? Sí No Con respecto a discriminación de género, usualmente concluiríamos que no hay evidencia de discriminación: dds %&gt;% group_by(Gender) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Gender Gasto_promedio Female 18130 Male 18001 Las necesidades de los consumidores aumentan conforme envejecen, lo que resulta en mayores gastos para personas de mayor edad: dds$Age_Cohort &lt;- ordered(dds$`Age Cohort`, levels=c(&quot;0-5&quot;,&quot;6-12&quot;,&quot;13-17&quot;,&quot;18-21&quot;,&quot;22-50&quot;,&quot;51+&quot;)) dds %&gt;% group_by(Age_Cohort) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Age_Cohort Gasto_promedio 0-5 1415 6-12 2227 13-17 3923 18-21 9889 22-50 40209 51+ 53522 El problema de que haya discrimnación o no se puede analizar más a fondo viendo, por ejemplo, qué porcentaje de consumidores pertenecen a cada etnia, tal como sucedió en el ejemplo de la controversia de Berkeley: dds %&gt;% group_by(Ethnicity) %&gt;% summarise(num_cons = n(), porc_cons = paste0(num_cons/10,&#39;%&#39;)) %&gt;% knitr::kable() Ethnicity num_cons porc_cons American Indian 4 0.4% Asian 129 12.9% Black 59 5.9% Hispanic 376 37.6% Multi Race 26 2.6% Native Hawaiian 3 0.3% Other 2 0.2% White not Hispanic 401 40.1% Podemos observar que los dos grandes grupos pertenecen a las 2 etnias del problema de discriminación que estamos analizando de blancos no hispanos vs hispanos. Examinemos de nuevo las medias y el porcentaje de consumidores de estos dos grupos: dds_blancos_hispanos &lt;- dds %&gt;% filter(Ethnicity %in% c(&quot;Hispanic&quot;,&quot;White not Hispanic&quot;)) dds_blancos_hispanos %&gt;% group_by(Ethnicity) %&gt;% summarise(media_gasto = mean(Expenditures), porc_consum = n()/10) %&gt;% knitr::kable() Ethnicity media_gasto porc_consum Hispanic 11066 37.6 White not Hispanic 24698 40.1 Tiende a haber un consenso general de que hay una diferencia significativa en la cantidad promedio de gastos entre el grupo de blancos no hispanos y el de hispanos. ¿Por qué podría haber diferencias en los promedios? ¿Se puede determinar si realmente existe discriminación? Algunas razones que sugieren normalmente son: Los hispanos tienen más apoyo familiar, y por lo tanto, es menos probable que busquen asistencia financiada por el gobierno, Los hispanos están menos informados sobre cómo buscar ayuda. Ambas razones son difíciles de modelar y podrían apoyar alegaciones de discriminación, en vez de negarlas. Analicemos ahora diferencias para cada grupo de edad entre hispanos y blancos: dds_blancos_hispanos %&gt;% group_by(Ethnicity, Age_Cohort) %&gt;% summarise(media_gasto = mean(Expenditures)) %&gt;% spread(Ethnicity, media_gasto) #&gt; # A tibble: 6 x 3 #&gt; Age_Cohort Hispanic `White not Hispanic` #&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0-5 1393 1367 #&gt; 2 6-12 2312 2052 #&gt; 3 13-17 3955 3904 #&gt; 4 18-21 9960 10133 #&gt; 5 22-50 40924 40188 #&gt; 6 51+ 55585 52670 ¿Se puede concluir que el típico hispano recibe menos fondos (es decir, gastos) que el típico blanco? Dado que la cantidad típica de gastos para los hispanos (en todos excepto un grupo de edad) es más alta que la cantidad típica de gastos para los blancos que no son hispanos en cada grupo de edad (excepto en uno), la hipótesis de discriminación sería refutada. Si un consumidor hispano fuera a reclamar discriminación porque es hispano (frente a blancos no hispanos), podría hacerlo con base en el promedio general de gastos para todos los consumidores de su grupo. Podemos entender mejor por qué esta aparente asociación desaparece cuando consideramos la variable de grupo de edad si analizamos el porcentaje de consumidores en cada categoría de edad para los grupos de hispanos y blancos: dds_blancos_hispanos %&gt;% group_by(Ethnicity) %&gt;% mutate(num_etnia = n()) %&gt;% ungroup() %&gt;% group_by(Ethnicity, Age_Cohort) %&gt;% summarise(porc_grupo_edad = round(n()/first(num_etnia)*100,2)) %&gt;% spread(Ethnicity, porc_grupo_edad) #&gt; # A tibble: 6 x 3 #&gt; Age_Cohort Hispanic `White not Hispanic` #&gt; &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; #&gt; 1 0-5 11.7 4.99 #&gt; 2 6-12 24.2 11.5 #&gt; 3 13-17 27.4 16.7 #&gt; 4 18-21 20.7 17.2 #&gt; 5 22-50 11.4 33.2 #&gt; 6 51+ 4.52 16.5 Veamos estas medias como un promedio ponderado por grupo de edad: \\[ \\bar{X}_k = \\displaystyle{\\sum_{i=1}^{m}w_{ki}\\bar{X}_{ki}}, \\] donde \\(\\bar{X}_k\\) es la media del \\(k\\)-ésimo grupo étnico, \\(w_{ki}\\) es el porcentaje del \\(k\\)-ésimo grupo étnico en el \\(i\\)-ésimo grupo de edad, y \\(\\bar{X}_{ki}\\) es la media de gasto del \\(k\\)-ésimo grupo étnico en el \\(i\\)-ésimo grupo de edad. Los pesos \\(w_{ki}\\) para la población hispana son más altos para los 4 grupos de edad más jóvenes y más bajas para los 2 grupos de edad más viejos, en comparación con la población blanca no hispana. En otras palabras, la población total de consumidores hispanos es relativamente más joven en comparación con la población de consumidores blancos no hispanos. Dado que los gastos para los consumidores más jóvenes son más bajos, el promedio general de los gastos para los hispanos (frente a los blancos no hispanos) es menor. Factores de causa común. Incluso cuando no hay factores de confusión, un fenómeno puede realmente surgir de múltiples causas. Puede ocurrir que exista una correlación entre dos variables, sin embargo, es posible que esto no te diga nada cuando estos dos factores tienen como causa común a un tercer factor. Además, cuando la causalidad es múltiple, una causa puede ocultar a otra. 1.5.2 Consumo de chocolate y premios Nobel En un artículo reciente se publicó un resultado que demuestra una correlación estadísticamente significativa entre el consumo de chocolate per capita y el número de premios Nobel del país por 10 millones de habitantes. El artículo se puede consultar aquí: Messerli, 2012. En el artículo está publicada esta gráfica: Los datos de consumo de chocolate per cápita provienen de fuentes de datos distintas: confectionerynews.com, theobroma-cacao.de, y caobisco. Por otro lado, los datos del número de premios Nobel por cada 10 millones de habitantes están publicados en Wikipedia. Mientras que Messerli advierte en su artículo que la existencia de una correlación no implica causalidad, esto no impidió que los medios populares publicaran historias con estos titulares: “Eating Chocolate May Help You Win Nobel Prize” - CBS News There’s A Shocking Connection Between Eating More Chocolate And Winning The Nobel Prize - Business Insider “Why Chocolate Makes You Smart (or Peaceful)” - Psychology Today “Study links eating chocolate to winning Nobels” - USA Today Como describimos anteriormente, se tienen datos para varios años del consumo per capita de chocolate (en kg). chocolate_nobel &lt;- read_csv(&quot;datos/chocolate_nobel.csv&quot;) chocolate_nobel %&gt;% sample_n(10) %&gt;% knitr::kable() Country Year Cons_per_capita Nobel_Laureates Population_2017 Laureates_per_10_million US 2004 5.30 335 3.24e+08 10.325 Ireland 2006 7.64 2 4.67e+06 4.281 Switzerland 2011 10.55 21 8.48e+06 24.776 Hungary 2009 3.58 8 9.72e+06 8.229 Austria 2007 8.22 18 8.74e+06 20.606 Germany 2011 11.60 91 8.21e+07 11.082 Netherlands 2012 5.40 19 1.70e+07 11.153 Spain 2007 3.27 2 4.64e+07 0.431 Finland 2009 6.87 3 5.52e+06 5.432 US 2012 5.50 335 3.24e+08 10.325 Podemos ver una gráfica del consumo de chocolate vs el número de premios nobel: ggplot(chocolate_nobel, aes(x=Cons_per_capita, y = Laureates_per_10_million)) + geom_point() + geom_smooth(method = &#39;lm&#39;, se = F) El artículo original era más una nota sarcástica, que un artículo de investigación. Muchos artículos, blogs y medios mostraron que esta aparente correlación no tiene sentido. Estas críticas muestran que el número de Nobel para 10 millones de habitantes también está “correlacionado” con el PIB per cápita, el índice de desarrollo humano, el consumo de todo tipo de bienes de lujo, etc. Factores de interacción. Incluso cuando las variables no están correlacionadas por completo, la importancia de cada una puede depender de la otra. Por ejemplo, las plantas se benefician tanto de la luz como del agua. Pero en ausencia de cualquiera, el otro no es en absoluto beneficioso. Tales interacciones ocurren en una gran cantidad de sistemas. Por lo tanto, la inferencia efectiva sobre una variable generalmente dependerá de la consideración de otras variables. Inferencia causal. A pesar de su importancia central, todavía no existe un enfoque unificado para hacer inferencia causal en las ciencias o en estadística. Incluso hay personas que argumentan que la causa realmente no existe, que es una ilusión psíquica. Por ejemplo, en sistemas dinámicos complejos todo parece causar todo lo demás, por lo que el término “causa” pierde valor intuitivo. Sin embargo, existe un acuerdo general: la inferencia causal siempre depende de supuestos no verificables. Otra forma de decir esto es que siempre nos será posible imaginar alguna forma en la que la inferencia sobre la causa sea incorrecta, sin importar qué tan cuidadosamente se haya realizado el diseño o el análisis. En este curso nuestros análisis jamás van a pretender hacer alguna inferencia sobre la causa de los fenómenos observados; únicamente se harán afirmaciones sobre las asociaciones, interacciones y relaciones entre las variables en los datos observados. La mayoría de nuestros análisis se van a enfocar en datos que fueron obtenidos sin que activamente se controlara o manipulara cualquiera de las variables en las cuales se hicieron las mediciones. Los diseños estadísticos en los cuales se controla alguna de las variables observadas en los datos se estudian en el curso de Diseño de experimentos. Generalmente vamos a suponer que los factores (o variables) observados son aleatorios. Esto quiere decir que nuestro análisis va a estar basado en el supuesto de que los datos provienen de una muestra aleatoria de la población de interés en un momento determinado del tiempo. En muchas ramas de la estadística, contar con datos temporales es muy importante. Por ejemplo, en el curso de Análisis de supervivencia se estudia el uso de modelos estadísticos en aplicaciones en las cuáles se desea estimar la distribución de un período entre dos eventos, como la duración del empleo (tiempo transcurrido entre el contrato y el abandono de la empresa), del tiempo de vida de un paciente, la diferencia en algún beneficio terapéutico sobre la prolongación de la vida para un nuevo tratamiento con respecto al tratamiento tradicional, o el tiempo de falla en un sistema mecánico. Hoy en día, el uso de herramientas computacionales ha adquirido importancia en la ciencia estadística. Esto resultó en el desarrollo de nuevas técnicas computacionales para fines estadísticos, tales como el uso de muestreo para estimar cantidades estadísticas o parámetros (bootstrap), la simulación de variables aleatorias, la simulación de modelos probabilísticos, la simulación de modelos multivariados, y la inferencia de gráficas estadísticas. Estos temas se ven en el curso de Estadística computacional. La técnica de simulación ha sido esencial en los últimos años. Se ha desarrollado una clase de métodos de simulación para poder calcular la distribución posterior, estos se conocen como cadenas de Markov via Monte Carlo (MCMC por sus siglas en inglés). El desarrollo de los métodos MCMC es lo que ha propiciado el desarrollo de la estadística bayesiana en años recientes. En el curso de Estadística bayesiana se estudia la teoría básica que sirve de fundamento para la estadística bayesiana: la teoría de decisión, la probabilidad subjetiva, la utilidad, la inferencia como problema de decisión, y la inferencia paramétrica bayesiana. El curso de Regresión avanzada está diseñado para estudiar inferencia bayesiana y el uso de modelos estadísticos bayesianos en el análisis de aplicaciones reales actuales. El enfoque es en modelos lineales generalizados, modelos dinámicos y modelos jerárquicos o multinivel. El uso de la estadística computacional con el fin de hacer predicciones, aprovecha la optimización numérica para estudiar métodos que son útiles para reconocer patrones. En el curso de Aprendizaje estadístico se estudian modelos lineales para reconocimiento de patrones, clasificación, y predicción, la regresión múltiple y descenso en gradiente, las redes neuronales (y deep learning), máquinas de soporte vectorial, los árboles y bosques aleatorios. En el curso de Métodos analíticos se ven otras técnicas de minería de datos, tales como el análisis de market basket, local sensitivity hashing (LHS), la minería de flujos de datos, los algoritmos de recomendación y la minería de texto. Finalmente, debido a la importancia antes mencionada del uso de varias variables en los modelos estadísticos actuales, hay nuevas técnicas estadísticas para estudiar fenómenos multivariados desde una perspectiva bayesiana, como las redes bayesianas, los modelos gráficos no dirigidos, las redes markovianas, los modelos para datos faltantes, modelos de variables latentes, como los modelos de rasgos latentes (LTM), los modelos de perfiles latentes (LPM), los modelos de clases latentes (LCM), y los modelos markovianos de estados ocultos (HMM). Todas estas técnicas se ven en el curso de Estadística multivariada. En este curso nuestro enfoque tendrá una persepctiva frecuentista. 1.6 Tarea Recordemos que la devianza la definimos como \\(-2\\) multiplicado por la log-verosimilitud: \\[ D = -2\\, \\mbox{log}{\\left(p(X|\\hat{\\theta})\\right)} \\] donde \\(X\\) son los datos observados y \\(\\hat{\\theta}\\) es el parámetro a estimar. Generalmente nos interesa disminuir la devianza. Con los datos del ejemplo de discriminación a hispanos modela la probabilidad \\(p_{ijk}\\) de cada categoría \\((i,j,k)\\) correspondiente al gasto, raza y categoría de edad, respectivamente. Puedes utilizar la función loglin vista en clase o la función loglm del paquete MASS. Esta última te permite especificar el modelo en forma de función. Puedes ver la ayuda así: library(MASS) ?loglm Filtra los datos para aquellas observaciones que sólo sean de hispanos o blancos no hispanos y llena la siguiente tabla utilizando factores de interacción como lo vimos anteriormente con las variables G (categoría del gasto del gobierno en discapacitados), H (Hispano o Blanco no hispano), y E (Categoría de edad). Para esto deberás crear una variable de categoría de gasto del gobierno. Puede hacerlo utilizando cuantiles con la función cut2 del paquete Hmisc. Puedes usar el número de grupos que creas que es más adecuado. Por ejemplo, el modelo “G + H + E” representa el modelo de independencias. Para el modelo “GH + GE + HE” hay interacciones entre: GH: gasto en discapacitados y si es hispano, GE: gasto y edad, y HE: hispano y edad. El último modelo tendría parámetros \\(u\\), \\(a_i\\), \\(b_{ij}\\), \\(c_j\\), \\(d_{ik}\\), \\(e_{jk}\\), y \\(f_k\\) tales que \\[ \\mbox{log}(p_{ijk}) = u + a_i + b_{ij} + c_j + d_{ik} + e_{jk} + f_k. \\] Modelo Devianza Grados de libertad Número de parámetros G + H + E GH + E GE + H G + HE GH + GE GH + HE GH + GE + HE Di qué modelo es mejor, tanto en términos del ajuste de la devianza y su interpretabilidad y explica por qué. ¿Hay algún modelo que no esté en la lista que sea el más apropiado para ajustar los datos? Manda tu tarea por correo electrónico a: andreuboadadeatela@gmail.com con el asunto “EAPLICADA3-Tarea-[XX]-[clave única 1]-[clave única 2]” donde [XX] es el número de la tarea (en este caso es la tarea 01), y [clave única 1] y [clave única 2] son tu clave y la de tu compañero con quien vas a trabajar durante el semestre. Referencias "],
["Rintro.html", "Clase 2 Temas selectos de R 2.1 ¿Qué ventajas tiene R? 2.2 Flujo básico de trabajo para el análisis de datos en R. 2.3 Introducción a R como lenguaje de programación, y la plataforma interactiva de RStudio. 2.4 Estructuras de datos 2.5 R Markdown 2.6 Proyectos de RStudio 2.7 Otros aspectos importantes de R 2.8 Tarea", " Clase 2 Temas selectos de R .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } El lenguaje de programación R ha surgido como un avance en el desarrollo de software para análisis estadítico. Hace unos años era común el uso de productos de software proprietario, tales como GAUSS, RATS, EVIEWS, SPSS, SAS, Matlab, Minitab, Stata y software que en principio ni siquiera es apropiado para el análisis de datos, como Microsoft Excel. Estos programas generalmente son demasiado costosos y tienen un rendimiento bajo. Si es necesario hacer un análisis más complejo, entonces los archivos se vuelven demasiado grandes y el todo el proceso se vuelve infactible. 2.1 ¿Qué ventajas tiene R? R es la herramienta más sobresaliente para la estadística, el análisis de datos y el aprendizaje estadístico. Es más que un paquete estadístico; es un lenguaje de programación, por lo que puede crear sus propios objetos, funciones y paquetes. Hablando de paquetes, hay más de 12,000 innovadores paquetes aportados por los usuarios, y que están disponibles en CRAN (The Comprehensive R Archive Network), eso sin mencionar Bioconductor. Para tener una idea de qué paquetes hay disponibles, puedes leer posts en R-bloggers y ver el . Muchos paquetes son enviados por miembros prominentes de sus respectivos campos. Al igual que todos los programas, los programas de R documentan explícitamente los pasos de su análisis y esto facilita la reproducibilidad del análisis estadístico. Además, provee de herramientas para probar rápidamente muchas ideas y corregir fácilmente los problemas que puedan surgir. R puedes usarlo fácilmente en cualquier lugar. Es independiente de la plataforma, por lo que puede usarlo en cualquier sistema operativo. Y es gratis, por lo que puede usarlo en cualquier empleador sin tener que persuadir a su jefe para comprar una licencia. 2.1.1 R es gratuito y de código abierto R está disponible bajo una licencia de código abierto, lo que significa que cualquiera puede descargar y modificar el código. Esta libertad a menudo se conoce como la de software libre (“free as in speech”). R también está disponible de manera gratuita (“free as in beer”). En términos prácticos, esto significa que podemos descargar y usar R gratis. Otro beneficio, aunque un poco más indirecto, es que cualquiera puede acceder al código fuente, modificarlo y mejorarlo. Como resultado, muchos programadores excelentes han contribuido con mejoras y correcciones al código de R. Por esta razón, R es muy estable y confiable. Cualquier libertad también tiene asociadas ciertas obligaciones. En el caso de R, estas obligaciones se describen en las condiciones de la licencia bajo la cual se publica: Licencia Pública General de GNU (GPL), Versión 2. Estas obligaciones te pertienen si solamente haces uso de R. Sin embargo, si haces cambios en su código fuente R y lo redistribuyes, entonces estos cambios se deben poner a disposición de todos los usuarios. 2.1.2 R tiene una comunidad comprometida Muchas personas que usan R eventualmente comienzan a ayudar a los nuevos usuarios y proponen el uso de R en sus lugares de trabajo y círculos profesionales. Por ejemplo, si tienes dudas sobre algún aspecto de R, podrás encontrar ayuda en Stack Overflow. R-Ladies CDMX es parte de R-Ladies Global, una organización mundial que busca generar una comunidad fuerte para compartir dudas, habilidades y apoyo sobre #RStats en una comunidad con perspectiva de género. 2.2 Flujo básico de trabajo para el análisis de datos en R. En el análisis de datos nos interesan técnicas cuantitativas cómo: recolectar, organizar, entender, interpretar y extraer información de colecciones de datos predominantemente numéricos. Estas tareas se resumen en el proceso de análisis del siguiente diagrama: Primero debe importar los datos en R. Esto generalmente significa llevar los datos almacenados en un archivo, una base de datos, o uan Web API, a un data frame de R. Limpiar y transformar los datos es necesario, para que la forma en que se almacenan los datos coincida con la semántica de los datos. En términos generales, cada columna debe ser una variable y cada rengón una observación. La visualización es una actividad fundamentalmente humana. Una buena visualización te puede mostrar cosas que no esperabas y puede ayudarte a plantear nuevas preguntas acerca de los datos. Una buena visualización también puede ayudar a determinar si se está haciendo una pregunta equivocada sobre los datos, o si es encesario recolectar más datos, o bien, obtener datos de fuentes distintas. Las visualizaciones pueden sorprenderte, pero requieren de un ser humano para interpretarlas. Por otro lado, los modelos son una herramienta para complementar las visualizaciones. Los modelos los utilizamos como un instrumento matemático y computacional para responder preguntas precisas acerca de los datos. Por último, la comunicación de los resultados es una parte absolutamente crítica para cualquier proyecto de análisis de datos. 2.3 Introducción a R como lenguaje de programación, y la plataforma interactiva de RStudio. Notas basadas en el material de Teresa Ortiz y Sonia Mendizábal y en el libro “R for Data Science” escrito por Hadley Wickham y Garret Grolemund (Wickham and Grolemund 2016). Hay cuatro cosas que necesitan para ejecutar el código en este taller: R, RStudio, una colección de paquetes de R, llamada tidyverse, y otros paquetes que vamos a ir instalando progresivamente. Los paquetes son la unidad fundamental del código reproducible en R. Incluyen funciones que se pueden utilizar en un ámbito general, su documentación que describe cómo usarlas y datos de ejemplo con código de ejemplo como ayuda para los usuarios. 2.3.1 ¿Cómo entender R? Hay una sesión de R corriendo. La consola de R es la interfaz entre R y nosotros. En la sesión hay objetos. Todo en R es un objeto: vectores, tablas, funciones, etc. Operamos aplicando funciones a los objetos y creando nuevos objetos. 2.3.2 ¿Por qué R? R funciona en casi todas las plataformas (Mac, Windows, Linux e incluso en Playstation 3). R promueve la investigación reproducible. R está actualizado gracias a que tiene una activa comunidad. R se puede combinar con otras herramientas. R permite integrar otros lenguajes (C/C++, Java, Julia, Python) y puede interactuar con muchas fuentes de datos: bases de datos compatibles con ODBC y paquetes estadísticos. 2.3.2.1 Descargar R: versión 3.4.3 Sigue las instrucciones del instalador: OSX: http://cran.stat.ucla.edu/bin/macosx/R-3.4.3.pkg Windows: http://cran.stat.ucla.edu/bin/windows/base/R-3.4.3-win.exe 2.3.2.2 Descargar RStudio: versión 1.1.414 OSX: https://download1.rstudio.org/RStudio-1.1.414.dmg Windows: https://download1.rstudio.org/RStudio-1.1.414.exe RStudio es libre y gratis. Es un ambiente de desarrollo integrado para R: incluye una consola, un editor de texto y un conjunto de herramientas para administrar el espacio de trabajo cuando se utiliza R. Algunos shortcuts útiles en RStudio son: En el editor command/ctrl + enter: enviar código a la consola ctrl + 2: mover el cursor a la consola En la consola flecha hacia arriba: recuperar comandos pasados ctrl + flecha hacia arriba: búsqueda en los comandos ctrl + 1: mover el cursor al editor Más alt + shift + k: muestra los shortcuts disponibles. Para que el código sea reproducible es importante que RStudio únicamente guarde lo relevante para hacer los cálculos, es decir, los scripts y no los cálculos en sí. Con tus scripts de R (y los datos), siempre podemos volver a crear las variables de ambiente. Sin embargo, es casi imposible recuperar un script únicamente a partir de tus variables de ambiente. Por lo tanto, se recomienda ampliamente configurar RStudio para que jamás guarde el ambiente en memoria. 2.3.2.3 Paquetes de R Una de las ventajas de R es la gran comunidad que aporta al desarrollo por medio de paquetes que dan funcionalidad adicional. Esta es la mejor manera de usar R para análisis de datos. Existen dos formas de instalar paquetes: Desde RStudio: Desde la consola: install.packages(&#39;tidyverse&#39;) Una vez instalados los paquetes, se cargan a la sesión de R mediante library. Por ejemplo, para cargar el paquete readr que instalamos anteriormente, hacemos: library(&#39;tidyverse&#39;) print(read_csv) #&gt; function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), #&gt; na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, #&gt; trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, #&gt; n_max), progress = show_progress()) #&gt; { #&gt; tokenizer &lt;- tokenizer_csv(na = na, quoted_na = TRUE, quote = quote, #&gt; comment = comment, trim_ws = trim_ws) #&gt; read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, #&gt; locale = locale, skip = skip, comment = comment, n_max = n_max, #&gt; guess_max = guess_max, progress = progress) #&gt; } #&gt; &lt;environment: namespace:readr&gt; Como el paquete readr está cargado en la sesión podemos llamar a la función read_csv que se usará más adelante. Importante: Los paquetes se instalan una vez únicamente después de descargar una nueva versión de R. Las librerías se cargan en cada sesión de R nueva. 2.3.2.4 Ayuda en R Existen diferentes formas de pedir ayuda en R. help.start(): ayuda en general help(fun) o ?fun: ayuda sobre la función fun apropos(&quot;fun&quot;): lista de funciones que contiene la palabra fun example(fun): muestra un ejemplo de la función fun help(read_csv) ?read_csv2 2.4 Estructuras de datos Todo lo que existe en R es un objeto. En R se puede trabajar con distintas estructuras de datos, algunas son de una sola dimensión y otras permiten más, como indica el siguiente diagrama: 2.4.1 Vectores Los vectores son estructuras de datos de una dimensión. Un vector se define con la función c(), que concatena diferentes elementos del mismo tipo, esto determina el tipo del vector. Nota: En R, la asignación de un nombre al vector, o en general a cualquier objeto, se realiza con el símbolo &lt;-. Se recomienda usar el shortcut alt - genera &lt;-. Los vectores en R pueden ser de diferentes tipos o clases, a continuación se presentan algunos casos. En R, la clase de cada vector se extrae con la función class(). Vectores numéricos: a &lt;- c(1,2.5,3,4.5,5,6.9) a #&gt; [1] 1.0 2.5 3.0 4.5 5.0 6.9 # clase del vector class(a) #&gt; [1] &quot;numeric&quot; Vectores lógicos: bool &lt;- c(T, F, TRUE, FALSE) bool #&gt; [1] TRUE FALSE TRUE FALSE # clase del vector class(bool) #&gt; [1] &quot;logical&quot; Vectores de caracteres: fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;) fruits #&gt; [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; class(fruits) #&gt; [1] &quot;character&quot; Para la manipulación de caracteres es recomendable el paquete stringr que permite realizar operaciones sobre este tipo de elementos. Más adelante se presenta un ejemplo. La selección de elementos de un vector se realiza con [ ] para indicar la posición. A diferencia de otros lenguajes de programación las posiciones en R incian en 1. # elemento en la posición 1 fruits[1] #&gt; [1] &quot;apple&quot; # elemento en la posición 1 y 5 fruits[c(1,5)] #&gt; [1] &quot;apple&quot; &quot;lemon&quot; En R es posible extraer un valor del vector indexándolo con posiciones negativas: # omitir el elemento en la primera posición fruits[-1] #&gt; [1] &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Una característica particular de vectores en R, es que cada elemento puede ser nombrado. Para hacer esto se usa la función names(). Por ejemplo, al vector fruits agregemos el nombre en español de la fruta para como el nombre de cada elemento. names(fruits) &lt;- c(&#39;manzana&#39;, &#39;platano&#39;, &#39;naranja&#39;, &#39;piña&#39;, &#39;limón&#39;, &#39;kiwi&#39;) fruits #&gt; manzana platano naranja piña limón kiwi #&gt; &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; # cada elemento tiene un nombre asignado fruits[5] #&gt; limón #&gt; &quot;lemon&quot; Para eliminar los nombres asignados a cada elemento, se asigna NULL a los nombres del vector: #&gt; NULL #&gt; [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Los tipos que pueden tener los vectores se muestran en la siguiente figura. Veamos que regresan los siguientes comandos: typeof(TRUE) typeof(1L) typeof(1.5) typeof(&quot;a&quot;) Cada vector tiene 3 propiedades: x &lt;- 1:5 Tipo typeof(x) #&gt; [1] &quot;integer&quot; Longitud length(x) #&gt; [1] 5 Atributos attributes(x) #&gt; NULL Existe la función is.vector(x) para determinar si un objeto es un vector: is.vector(1:3) #&gt; [1] TRUE ¿Qué regresa ìs.vector(factor(1:3))? TRUE FALSE NA Ninguna de las anteriores Ejemplo Del vector de seis frutas diferentes llamado fruits, localiza únicamente las frutas que tengan la letra w. # Cargamos la librería library(stringr) fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;) fruits #&gt; [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Esto es posible con la función str_detect(), que regresa un vector booleano para cada elemento del vector donde encontró el patron w. str_detect(fruits, pattern = &#39;w&#39;) #&gt; [1] FALSE FALSE FALSE FALSE FALSE TRUE Ahora, seleccionamos únicamente los elementos del vector que tienen la letra w: # Selecciona el elemento con valor TRUE: kiwi fruits[str_detect(fruits, pattern = &#39;w&#39;)] #&gt; [1] &quot;kiwi&quot; 2.4.1.1 Operaciones de vectores En R las operaciones de vectores son componente a componente. Sumas, multiplicaciones y potencias: # Suma del vector longitud 6 y un vector longitud 1 a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) b &lt;- 1 a + b #&gt; [1] 2.0 3.5 4.0 5.5 6.0 7.9 # Multiplicaciones componente a componente misma longitud a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) a*a #&gt; [1] 1.00 6.25 9.00 20.25 25.00 47.61 # Multiplicaciones y potencias a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) c &lt;- (a^2 + 5)*3 c #&gt; [1] 18.0 33.8 42.0 75.8 90.0 157.8 Comparaciones: En este tipo de operación se obtiene un vector lógico dependiendo si la condición se cumple o no. # Comparar el vector dado un valor específico a &gt; 3 #&gt; [1] FALSE FALSE FALSE TRUE TRUE TRUE a[a &gt; 3] # únicamente elementos que cumple la condicion de ser mayores a 3 #&gt; [1] 4.5 5.0 6.9 fruits != &#39;apple&#39; #&gt; [1] FALSE TRUE TRUE TRUE TRUE TRUE fruits[fruits != &#39;apple&#39;] # únicamente elementos que no son apple #&gt; [1] &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; # Comparar el vector dado otro vector de la misma dimensión x &lt;- c(1, 2, 3, 4, 5, 6) a == x #&gt; [1] TRUE FALSE TRUE FALSE TRUE FALSE a[a == x] # unicamente los elementos iguales y en la misma posición entre a y x #&gt; [1] 1 3 5 Funciones predeterminadas: Algunas funciones predeterminadas del paquete básico de R son muy útiles para la manipulación de vectores y el análisis de datos. A continuación se enlistan algunasde las más comúnes: length: número de elementos en el vector class: clase del vector summary: resumen de información del vector unique: valores unicos del vector table: tabla de frecuencias para cada elemento del vector sum: suma de los elementos del vector mean: promedio de elementos del vector sd: desviación estándar de los elementos del vector cumsum: suma acumulada de elemento anterior del vector Aplica las funciones comúnes enlistadas antes en el vector x &lt;- c(1, 2, 3, 4, 5, 6) 2.4.1.2 Otros tipos de vectores: Existen tipos de vectores con características importantes: Secuencias: los vectores de secuencias se pueden crear con la función seq() o con :, de la siguiente forma: # secuecia de 1 al 10 1:10 #&gt; [1] 1 2 3 4 5 6 7 8 9 10 # secuecia de pares de 0 al 10 seq(0, 10, by = 2) #&gt; [1] 0 2 4 6 8 10 Vectores de fechas: se pueden hacer operaciones y algunas funciones definidas de fechas. El paquete lubridate permite manejar fechas con mayor facilidad. Se incia la secuencia el 08 de agosto de 2016 y se asigna la clase de fecha con la función as.Date(). Se generan en total 10 fechas length.out = 10 y con una distancua semanal by=&quot;1 week&quot;, es decir, se tiene la fecha de 10 semanas consecutivas: library(lubridate) tenweeks &lt;- seq( as.Date(&quot;2016-08-08&quot;), length.out = 10, by=&quot;1 week&quot;) tenweeks #&gt; [1] &quot;2016-08-08&quot; &quot;2016-08-15&quot; &quot;2016-08-22&quot; &quot;2016-08-29&quot; &quot;2016-09-05&quot; #&gt; [6] &quot;2016-09-12&quot; &quot;2016-09-19&quot; &quot;2016-09-26&quot; &quot;2016-10-03&quot; &quot;2016-10-10&quot; class(tenweeks) #&gt; [1] &quot;Date&quot; Se pueden hacer algunas operaciones como se ejemplifica en el siguiente código. # Aumenta un día a cada fecha tenweeks + 1 #&gt; [1] &quot;2016-08-09&quot; &quot;2016-08-16&quot; &quot;2016-08-23&quot; &quot;2016-08-30&quot; &quot;2016-09-06&quot; #&gt; [6] &quot;2016-09-13&quot; &quot;2016-09-20&quot; &quot;2016-09-27&quot; &quot;2016-10-04&quot; &quot;2016-10-11&quot; # Aumenta un día a cada fecha tenweeks #&gt; [1] &quot;2016-08-08&quot; &quot;2016-08-15&quot; &quot;2016-08-22&quot; &quot;2016-08-29&quot; &quot;2016-09-05&quot; #&gt; [6] &quot;2016-09-12&quot; &quot;2016-09-19&quot; &quot;2016-09-26&quot; &quot;2016-10-03&quot; &quot;2016-10-10&quot; weekdays(tenweeks) # Día de la semana de cada fecha #&gt; [1] &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; #&gt; [8] &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; Vectores de factores: este tipo de vector es usado comúnmente para variables categóricas. En R existe la clase factor que se asigna con la función homónima factor() o as.factor(). Un vector de factores tiene dos elementos importantes, levels o niveles y labels o etiquetas. Los niveles determinan las categorías únicas del vector y pueden ser etiquetadas, como se muestra en le siguiente código para un vector de frutas. En este ejemplo se tienen valores de frutas repetidos, se asigna un orden de niveles específicos y etiquetas específicas para cada nivel. fruits &lt;- c(&quot;banana&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;, &quot;apple&quot;) # Vector de caracteres a vector de factores fruits.fac &lt;- factor(fruits, levels = c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;), labels = c(&#39;manzana&#39;, &#39;platano&#39;, &#39;naranja&#39;, &#39;piña&#39;, &#39;limón&#39;, &#39;kiwi&#39;) ) fruits.fac #&gt; [1] platano manzana platano naranja piña limón kiwi manzana #&gt; Levels: manzana platano naranja piña limón kiwi # Clase class(fruits.fac) #&gt; [1] &quot;factor&quot; # Niveles etiquetados levels(fruits.fac) #&gt; [1] &quot;manzana&quot; &quot;platano&quot; &quot;naranja&quot; &quot;piña&quot; &quot;limón&quot; &quot;kiwi&quot; # Niveles únicos as.numeric(fruits.fac) #&gt; [1] 2 1 2 3 4 5 6 1 # Agregar un nuevo valor fruits.fac[7] &lt;- &#39;melon&#39; #&gt; Warning in `[&lt;-.factor`(`*tmp*`, 7, value = &quot;melon&quot;): invalid factor level, #&gt; NA generated fruits.fac #&gt; [1] platano manzana platano naranja piña limón &lt;NA&gt; manzana #&gt; Levels: manzana platano naranja piña limón kiwi Importante: En R los vectores no pueden combinar diferentes tipos de elementos. El tipo de elementos es lo que define la clase del vector. Es por esto que en el ejemplo, al sustituir la posición 7 por melon se obtiene un NA, melón no está incluído en los niveles definidos del vector. Existen también los factores ordenados. Por ejemplo, consideremos los datos de flores de iris de Fisher: library(forcats) iris %&gt;% sample_n(10) %&gt;% knitr::kable() Sepal.Length Sepal.Width Petal.Length Petal.Width Species 13 4.8 3.0 1.4 0.1 setosa 125 6.7 3.3 5.7 2.1 virginica 89 5.6 3.0 4.1 1.3 versicolor 24 5.1 3.3 1.7 0.5 setosa 2 4.9 3.0 1.4 0.2 setosa 68 5.8 2.7 4.1 1.0 versicolor 72 6.1 2.8 4.0 1.3 versicolor 42 4.5 2.3 1.3 0.3 setosa 105 6.5 3.0 5.8 2.2 virginica 109 6.7 2.5 5.8 1.8 virginica Este conjunto de datos multivariados fue presentado por el estadístico y biólogo británico Ronald Fisher en su artículo de 1936 “El uso de mediciones múltiples en problemas taxonómicos como un ejemplo de análisis discriminante lineal”. Edgar Anderson recopiló los datos para cuantificar la variación morfológica de las flores de iris de tres especies relacionadas. Los datos fueron recolectadas en la Península de Gaspé. (Fisher 1936) El conjunto de datos consiste de 50 observaciones de cada una de las tres especies de Iris (Iris setosa, Iris virginica e Iris versicolor). Se midieron cuatro características de cada muestra: la longitud y el ancho de los sépalos y pétalos, en centímetros. Con base en la combinación de estas cuatro características, Fisher desarrolló un modelo discriminante lineal para distinguir las especies entre sí. Supongamos que queremos analizar la distribución del ancho del sépalo por especie de flor de iris: Esto ocurre porque los factores están ordenados alfabéticamente: levels(iris$Species) #&gt; [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; Sería mejor que las especies estuvieran ordenadas por la mediana de la distribución para poder hacer mejores comparaciones. Notemos el uso de la función fct_reorder del paquete forcats. library(forcats) iris$Species_ord &lt;- fct_reorder(iris$Species, iris$Sepal.Width, fun = median) levels(iris$Species_ord) #&gt; [1] &quot;versicolor&quot; &quot;virginica&quot; &quot;setosa&quot; 2.4.2 Data Frames Un data.frame es un conjunto de vectores del mismo tamaño agrupado en una tabla. Son estructuras rectangulares donde cada columna tiene elementos de la misma clase, pero columnas distintas pueden tener diferentes clases. Por ejemplo: tabla &lt;- data.frame( n = 1:6, frutas = fruits[1:6], valor = c(1, 2.5, 3, 4.5, 5, 6.9) ) tabla #&gt; n frutas valor #&gt; 1 1 banana 1.0 #&gt; 2 2 apple 2.5 #&gt; 3 3 banana 3.0 #&gt; 4 4 orange 4.5 #&gt; 5 5 pineapple 5.0 #&gt; 6 6 lemon 6.9 Similar a las funciones de vectores, en data.frames existen funciones predeterminadas que ayudan a su manipulación. head permite ver los primeros 6 elemento del data.frame: head(mtcars) #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 #&gt; Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 #&gt; Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 str describe el tipo de variables en el data.frame: str(mtcars) #&gt; &#39;data.frame&#39;: 32 obs. of 11 variables: #&gt; $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... #&gt; $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... #&gt; $ disp: num 160 160 108 258 360 ... #&gt; $ hp : num 110 110 93 110 175 105 245 62 95 123 ... #&gt; $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... #&gt; $ wt : num 2.62 2.88 2.32 3.21 3.44 ... #&gt; $ qsec: num 16.5 17 18.6 19.4 17 ... #&gt; $ vs : num 0 0 1 1 0 1 0 1 1 1 ... #&gt; $ am : num 1 1 1 0 0 0 0 0 0 0 ... #&gt; $ gear: num 4 4 4 3 3 3 3 4 4 4 ... #&gt; $ carb: num 4 4 1 1 2 1 4 2 2 4 ... dim muestra la dimensión (renglones, columnas) del data.frame: dim(mtcars) #&gt; [1] 32 11 colnames y names muestran los nombres de las columnas del data.frame: names(mtcars) #&gt; [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; #&gt; [11] &quot;carb&quot; rownames muestra el nombre de los renglones del data.frame: rownames(mtcars) #&gt; [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; #&gt; [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; #&gt; [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; #&gt; [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; #&gt; [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; #&gt; [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; #&gt; [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; #&gt; [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; #&gt; [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; #&gt; [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; #&gt; [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; La forma de indexar data.frames es similar a la de un vector [ ], pero en este caso es posible indexar renglones y columnas: # por posiciones de renglones mtcars[1:4, ] #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; Datsun 710 22.8 4 108 93 3.85 2.32 18.6 1 1 4 1 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 # por posiciones de columnas mtcars[1:4, c(1, 4, 6)] #&gt; mpg hp wt #&gt; Mazda RX4 21.0 110 2.62 #&gt; Mazda RX4 Wag 21.0 110 2.88 #&gt; Datsun 710 22.8 93 2.32 #&gt; Hornet 4 Drive 21.4 110 3.21 # por nombre de renglones específico mtcars[c(&#39;Mazda RX4&#39;, &#39;Mazda RX4 Wag&#39;), ] #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 mtcars[str_detect(rownames(mtcars), &quot;Mazda&quot; ), ] #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21 6 160 110 3.9 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21 6 160 110 3.9 2.88 17.0 0 1 4 4 También se puede seleccionar o filtrar el data.frame dado una condición: mtcars[mtcars$cyl == 6, ] # Selecciona los carros con número de cilindros mayor a 6 #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 #&gt; Valiant 18.1 6 225 105 2.76 3.46 20.2 1 0 3 1 #&gt; Merc 280 19.2 6 168 123 3.92 3.44 18.3 1 0 4 4 #&gt; Merc 280C 17.8 6 168 123 3.92 3.44 18.9 1 0 4 4 #&gt; Ferrari Dino 19.7 6 145 175 3.62 2.77 15.5 0 1 5 6 rbind permite unir dos data.frames por renglones, si y solo si, tiene el mismo número de columnas: rbind(mtcars[str_detect(rownames(mtcars), &quot;Mazda&quot; ), ], mtcars[str_detect(rownames(mtcars), &quot;Hornet&quot;), ]) #&gt; mpg cyl disp hp drat wt qsec vs am gear carb #&gt; Mazda RX4 21.0 6 160 110 3.90 2.62 16.5 0 1 4 4 #&gt; Mazda RX4 Wag 21.0 6 160 110 3.90 2.88 17.0 0 1 4 4 #&gt; Hornet 4 Drive 21.4 6 258 110 3.08 3.21 19.4 1 0 3 1 #&gt; Hornet Sportabout 18.7 8 360 175 3.15 3.44 17.0 0 0 3 2 cbind permite unir dos data.frames por columna, si y solo si, tiene el mismo número de renglones: tabla &lt;- data.frame( n = 1:6, frutas = c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;apple&quot;), valor = runif(6) ) tabla #&gt; n frutas valor #&gt; 1 1 apple 0.8746 #&gt; 2 2 banana 0.1749 #&gt; 3 3 orange 0.0342 #&gt; 4 4 pineapple 0.3204 #&gt; 5 5 lemon 0.4023 #&gt; 6 6 apple 0.1957 tabla.color &lt;- data.frame( peso = rnorm(6), color = c(&#39;rojo&#39;, &#39;amarillo&#39;, &#39;naranje&#39;, &#39;amarillo&#39;, &#39;amarillo&#39;, &#39;rojo&#39;) ) tabla.color #&gt; peso color #&gt; 1 -0.244 rojo #&gt; 2 -0.283 amarillo #&gt; 3 -0.554 naranje #&gt; 4 0.629 amarillo #&gt; 5 2.065 amarillo #&gt; 6 -1.631 rojo cbind(tabla, tabla.color) #&gt; n frutas valor peso color #&gt; 1 1 apple 0.8746 -0.244 rojo #&gt; 2 2 banana 0.1749 -0.283 amarillo #&gt; 3 3 orange 0.0342 -0.554 naranje #&gt; 4 4 pineapple 0.3204 0.629 amarillo #&gt; 5 5 lemon 0.4023 2.065 amarillo #&gt; 6 6 apple 0.1957 -1.631 rojo Nota: Una forma de seleccionar una columna es con el símbolo $ (pesitos) y el nombre de la columna. Ejercicio: Del data.frame mtcars realiza lo siguiente: Calcula el promedio de cilindros cyl en los datos. Calcula el número de autos con peso wt mayor a 2. Extrae la información de los coches Merc. Calcula el promedio de millas por galón mpg de los autos Merc. 2.4.3 Listas La lista es una estructura de datos de una dimensión que permite distintas clases de elementos en el objeto. La función list() permite crear objetos de esta clase. Por ejemplo: lista &lt;- list( n = 100, x = &#39;hello&#39;, frutas = fruits, tabla = tabla, ejemlista = list(a = 15:20, b = 1:5) ) lista #&gt; $n #&gt; [1] 100 #&gt; #&gt; $x #&gt; [1] &quot;hello&quot; #&gt; #&gt; $frutas #&gt; [1] &quot;banana&quot; &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; #&gt; [7] &quot;kiwi&quot; &quot;apple&quot; #&gt; #&gt; $tabla #&gt; n frutas valor #&gt; 1 1 apple 0.8746 #&gt; 2 2 banana 0.1749 #&gt; 3 3 orange 0.0342 #&gt; 4 4 pineapple 0.3204 #&gt; 5 5 lemon 0.4023 #&gt; 6 6 apple 0.1957 #&gt; #&gt; $ejemlista #&gt; $ejemlista$a #&gt; [1] 15 16 17 18 19 20 #&gt; #&gt; $ejemlista$b #&gt; [1] 1 2 3 4 5 La lista anterior contiene numeros, caracteres, vectores, data.frames e incluso otra lista con distintas secuencias. Se puede indexar una lista de varias formas: Usando [ ]: extrae el objeto como una lista, incluyendo el nombre asignado: lista[1] #&gt; $n #&gt; [1] 100 Usando [[ ]]: extrae únicamente el objeto respetando la clase de éste y sin incluir nombres: lista[[1]] #&gt; [1] 100 Usando $ mas el nombre: extrae únicamente el objeto: lista$ejemlista$a #&gt; [1] 15 16 17 18 19 20 2.5 R Markdown R Markdown es un sistema para crear documentos, en los cuales se combina tu código de R, los resultados y el texto que escribes como comentario en forma de prosa. Algunas ventajas y características de R Markdown son: cualquier R markdown Rmd es totalmente reproducible admite docenas de formatos de salida, como archivos PDF, Word, presentaciones de diapositivas y más. es muy útil para los tomadores de decisiones, quienes quieren enfocarse en las conclusiones, no en el código detrás del análisis. permite colaborar con otras personas de estadística que estén interesadas en tus conclusiones y cómo llegaste a ellas 2.5.1 ¿Qué es R Markdown? R Markdown integra código de R, comandos de TeX y muchas herramientas externas. Cuando construyes el documento, R Markdown envía un archivo con formato .Rmd a otro paquete llamado knitr, http://yihui.name/knitr/, que ejecuta el código de todos los chunks y crea un nuevo archivo de markdown con formato md que ya incluye el código y los resultados. Este archivo de markdown generado por knitr después es procesado por pandoc, http://pandoc.org/, que es el que crea el archivo final. La ventaja de este flujo de trabajo de dos pasos es que te permite crear una amplia gama de formatos de salida. 2.5.2 Estructura básica de R Markdown Éste es un R Markdown, un archivo de texto sin formato que tiene la extensión .Rmd: cat(htmltools::includeText(&quot;rmarkdown/ejemplo.Rmd&quot;)) #&gt; --- #&gt; title: &quot;Ejemplo de R Markdown&quot; #&gt; date: 2018-01-22 #&gt; output: html_document #&gt; --- #&gt; #&gt; Veamos unos datos de diamantes para analizar la distribución #&gt; del quilataje de aquellos diamantes que tiene quilataje #&gt; menor a 2.5: #&gt; #&gt; ```{r setup, include = FALSE} #&gt; library(ggplot2) #&gt; library(dplyr) #&gt; #&gt; smaller &lt;- diamonds %&gt;% #&gt; filter(carat &lt;= 2.5) #&gt; ``` #&gt; #&gt; En el __chunk__ de arriba se hizo el filtro adecuado, ahora #&gt; veamos una muestra de tamaño 10 de los datos: #&gt; #&gt; ```{r, echo = FALSE} #&gt; smaller %&gt;% #&gt; sample_n(10) %&gt;% #&gt; knitr::kable() #&gt; ``` #&gt; #&gt; Los datos corresponde a `r nrow(diamonds)` diamantes. Solamente #&gt; `r nrow(diamonds) - nrow(smaller)` son de más de 2.5 quilates. #&gt; La distribución de los diamantes de menor quilataje se muestra abajo: #&gt; #&gt; ```{r, echo = FALSE} #&gt; smaller %&gt;% #&gt; ggplot(aes(carat)) + #&gt; geom_freqpoly(binwidth = 0.01) #&gt; ``` Contiene tres tipos importantes de contenido: 1 Un encabezado en formato YAML rodeado por ---s.. Chunks de código de R rodeados por ```. Texto mezclado con formato de texto simple como # heading y _italics_. Cuando abres un .Rmd, RStudio muestra una interfaz de tipo notebook en la cual tanto el código como la salida están intercalados. Puedes ejecutars cada chunk de código presionando el botón de “Run” (en la parte superior derecha de la ventana de script), o bien, Cmd/Ctrl + Shift + Enter. RStudio ejecuta el código y muestra los resultados junto con el código. Para generar un informe completo que contenga todo el texto, el código y los resultados, presiona el botón “Knit”, o bien, Cmd/Ctrl + Shift + K. Esto generará un reporte en una nueva ventana y creará un archivo HTML independiente que podrás compartir con los demás. Para comenzar con tu propio archivo .Rmd, selecciona File &gt; New File &gt; R Markdown… en la barra superior. RStudio te mostrará un asistente que puedes usar para crear un archivo de R Markdown con ejemplos básicos. Como R Markdown integara varias herramientas, entonces no es posible que la ayuda esté autocontenida en RStudio. Esto significa que gran parte de la ayuda no la podrás encontrar a través de ?. Hay mucha documentación en línea y un recurso es particularmente útil son los cheatsheets de RStudio, que están disponibles en http://rstudio.com/cheatsheets. 2.6 Proyectos de RStudio Los proyectos de RStudio son útiles para mantener juntos todos los archivos asociados a un análisis (o proyecto) específico: datos de entrada, scripts de R, resultados, gráficas, datos de salida. Ésta es una práctica limpia y ordenada de trabajar y RStudio tiene soporte integrado para esto a través de los proyectos. Hagamos un proyecto. Para esto debes presionar File &gt; New Project, luego: Puedes cerrar el proyecto y después hacer doble click en el archivo .Rproj para volver a abrir el proyecto. Observa que regresas a donde estabas, en el mismo directorio de trabajo, con el mismo historial de comandos, y todos los archivos en los que estaba trabajando siguen abiertos. En resumen, los proyectos de RStudio te brindan un flujo de trabajo sólido que te servirá en el futuro: Creas un proyecto de RStudio para cada proyecto de análisis de datos. Mantienes los archivos de datos ahí mismo para después cargarlos en un script. Mantienes tus scripts organizados en el mismo directorio, y los puedes encontrar fácilmente para editarlos y ejecutarlos. Puedes guardar ahí mismo las salidas del código, como gráficas y datos limpios. Solamente utilizas rutas relativas, no absolutas. Todo lo que necesitas está en un solo lugar y separado de los demás proyectos en los que estés trabajando. 2.7 Otros aspectos importantes de R 2.7.1 Valores faltantes En R los datos faltantes se expresan como NA. La función is.na() regresa un vector lógico sobre los valores que son o no NA. is.na(c(4, 2, NA)) #&gt; [1] FALSE FALSE TRUE El default de R es propagar los valores faltantes, esto es, si se desconoce el valor de una de las componentes de un vector, también se desconoce la suma del mismo, en general, cualquier operación. sum(c(4, 2, NA)) #&gt; [1] NA mean(c(4, 2, NA)) #&gt; [1] NA 3 &gt; NA #&gt; [1] NA (NA == NA) #&gt; [1] NA Sin embargo, muchas funciones tienen un argumento na.rm para removerlos. sum(c(4, 2, NA), na.rm = T) #&gt; [1] 6 mean(c(4, 2, NA), na.rm = T) #&gt; [1] 3 2.7.2 Funciones Todo lo que sucede en R es una función. R es un lenguaje de programación funcional. Es decir, proporciona muchas herramientas para la creación y manipulación de funciones. En R las funciones, al igual que los vectores, se pueden asignar a variables, guardarlas en listas, usarlas como argumentos en otras funciones, crearlas dentro de otras funciones, e incluso regresar como resultado de una función más funciones. Una caja negra Una función puede verse como una caja negra que realiza un proceso o serie de instrucciones condicionadas a un valor de entrada, y cuyo resultado es un valor de salida. En R existen algunas funciones pre cargadas que ya hemos usado, por ejemplo, .la función mean(). input &lt;- c(1:5) output &lt;- mean( input ) output #&gt; [1] 3 Sin embargo, también es posible escribir nuestras propias funciones. Escibir una función En R es posible escribir funciones y es muy recomendable para dar soluciones a problemas simples. Existen ocasiones en las que al programar copias y pegas cierto código varias veces para una meta en especial. En ese momento, es necesario pasar el código a una función. Una función soluciona un problema en particular. La función function() nos permite crear funciones con la siguiente estructura: my_fun &lt;- function( arg1 ){ body return() } En general, esta estructura se respeta en las funciones predeterminadas de R. Creamos una función que sume uno a cualquier número. suma_uno_fun &lt;- function( x ){ y = x + 1 return(y) } Aplicamos la función: suma_uno_fun(5) #&gt; [1] 6 Podemos ver que en nuestra sesión ya existe la función con la función ls(). ls() #&gt; [1] &quot;a&quot; &quot;b&quot; &quot;bool&quot; &quot;c&quot; #&gt; [5] &quot;fruits&quot; &quot;fruits.fac&quot; &quot;input&quot; &quot;iris&quot; #&gt; [9] &quot;lista&quot; &quot;output&quot; &quot;suma_uno_fun&quot; &quot;tabla&quot; #&gt; [13] &quot;tabla.color&quot; &quot;tenweeks&quot; &quot;x&quot; Esta función en lista los objetos existente en la sesión actual. Argumentos de funciones En R los argumentos de las funciones pueden llamarse por posición o nombre. Consideremos la siguiente función en la que se eleva un numero a un exponente determinado. potencia_fun &lt;- function(base, exponente){ base^exponente } Los argumentos pueden indicarse por posición: potencia_fun(2, 3) #&gt; [1] 8 O bien por nombre: potencia_fun(exponente = 2, base = 3) #&gt; [1] 9 Argumentos predeterminados En una función es posible asignar valores predeterminados a los argumentos. Por ejemplo, modificamos la función para asignar un valor predeterminado del exponente. potencia_default_fun &lt;- function(base, exponente = 2){ base^exponente } Al llamar la función, no es necesario definir un valor para el exponente y en automático tomará el valor exponente = 2. potencia_default_fun(2) #&gt; [1] 4 Argumentos nulos Una función puede no tener argumentos y simplemente correr un proceso. En este caso, usaremos la función sample() que elige una muestra aleatoria de tamaño 1 de un vector de 1 a 6 imitando un dado dentro la la función lanza_dado(). lanza_dado &lt;- function() { numero &lt;- sample(1:6, size = 1) numero } Ahora tiraremos dos veces los dados. Primer lanzamiento: lanza_dado() #&gt; [1] 5 Segundo lanzamiento: lanza_dado() #&gt; [1] 5 Alcance de la función Es importante mencionar que las variables que son definidas dentro de la función no son accesibles fuera de la función. Es decir, las funciones en R tienen un ambiente local. Por ejemplo, al correr la siguiente función e intentar imprimir el objeto x regresa un error. xs_fun &lt;- function(a){ x &lt;- 2 a*x } xs_fun(2) #&gt; [1] 4 # print(x) La función crea un ambiente nuevo dentro de la misma, en caso de no encontrar el valor de la variable en el ambiente local, sube un nivel. Este nuevo nivel puede ser el ambiente global. Por ejemplo: y &lt;- 10 ys_fun &lt;- function(a){ a*y } ys_fun(2) #&gt; [1] 20 Si la función está contenida en otra función, primero buscará en el ambiente local, después en el ambiente local de la función superior y luego en el ambiente global. Por ejemplo: y &lt;- 10 mas_uno_fun &lt;- function(a){ c &lt;- 1 y &lt;- 1 ys_add_fun &lt;- function(a){ a*y + c } ys_add_fun(a) } Si llamamos la función con un valor a = 2 al igual que en el ejemplo anterior, ¿por qué da el siguiente resultado y no 21 o 20? mas_uno_fun(a = 2) #&gt; [1] 3 Funciones para funciones O bien funciones para entender las partes de la función. body() body(suma_uno_fun) #&gt; { #&gt; y = x + 1 #&gt; return(y) #&gt; } args() args(mean.default) #&gt; function (x, trim = 0, na.rm = FALSE, ...) #&gt; NULL if() Una función que se usa al programar funciones es if() que permite agregar una condición. divide_fun &lt;- function(num, den){ if(den == 0){ return(&quot;Denominador es cero&quot;) }else{ return(num/den) } } Al ejecutar la función y tener cero en el denominador imprime el string. divide_fun(10, 0) #&gt; [1] &quot;Denominador es cero&quot; Al no tener cero en el denominador la operación se ejecuta. divide_fun(10, 2) #&gt; [1] 5 Todas las operaciones en R son producto de la llamada a una función, esto incluye operaciones como +, operadores que controlan flujo como for, if y while, e incluso operadores para obtener subconjuntos como [ ] y $. x &lt;- 3 y &lt;- 4 `+`(x, y) #&gt; [1] 7 for (i in 1:2) print(i) #&gt; [1] 1 #&gt; [1] 2 `for`(i, 1:2, print(i)) #&gt; [1] 1 #&gt; [1] 2 Cuando llamamos a una función podemos especificar los argumentos con base en la posición, el nombre completo o el nombre parcial: f &lt;- function(abcdef, bcde1, bcde2) { list(a = abcdef, b1 = bcde1, b2 = bcde2) } str(f(1, 2, 3)) #&gt; List of 3 #&gt; $ a : num 1 #&gt; $ b1: num 2 #&gt; $ b2: num 3 str(f(2, 3, abcdef = 1)) #&gt; List of 3 #&gt; $ a : num 1 #&gt; $ b1: num 2 #&gt; $ b2: num 3 Podemos abreviar el nombre de los argumentos: str(f(2, 3, a = 1)) #&gt; List of 3 #&gt; $ a : num 1 #&gt; $ b1: num 2 #&gt; $ b2: num 3 Siempre y cuando la abreviación no sea ambigua: #f(1, 3, b = 1) Los argumentos de las funciones en R se evaluan conforme se necesitan: f &lt;- function(a, b){ a ^ 2 } f(2) #&gt; [1] 4 La función anterior nunca utiliza el argumento b, de tal manera que f(2) no produce ningún error. 2.7.3 Funcionales La familia de funciones apply pertenece a la librería base en R y facilitan la manipulación de datos de forma repetitiva. Las funciones de esta familia son: apply(), lapply(), sapply(), vapply(), mapply(), rapply(), y tapply(). La estructura de los datos de entrada y el formato del resultado o salida determinarán cual función usar. En este taller solo se verán las primeras tres funciones. apply() Esta es la función que manipula arreglos homogéneos, en particular, se revisa el caso de matrices que son arreglos de dos dimensiones. La función tiene los siguientes argumentos: apply(X, MARGIN, FUN, ...) X representa el arreglo de dos dimensiones. MARGIN representa la dimensión sobre la que se va a resumir la información. Donde 1 = renglon o primera dimensión y 2 = columna o segunda dimensión. FUN representa la función que resume la información. Tomemos la siguiente matriz de simulaciones: set.seed(1) mat_norm &lt;- matrix(rnorm(24, mean = 0, sd = 1), nrow = 4, ncol = 6) mat_norm #&gt; [,1] [,2] [,3] [,4] [,5] [,6] #&gt; [1,] -0.626 0.330 0.576 -0.6212 -0.0162 0.9190 #&gt; [2,] 0.184 -0.820 -0.305 -2.2147 0.9438 0.7821 #&gt; [3,] -0.836 0.487 1.512 1.1249 0.8212 0.0746 #&gt; [4,] 1.595 0.738 0.390 -0.0449 0.5939 -1.9894 Deseamos obtener la suma de cada columna de la matriz. El primer método, quizá el mas intuitivo en este momento, es obtener cada elemento o columna, aplicar la función a cada elemento y concatenar: prom_col_m1 &lt;- c(sum(mat_norm[, 1]), sum(mat_norm[, 2]), sum(mat_norm[, 3]), sum(mat_norm[, 4]), sum(mat_norm[, 5]), sum(mat_norm[, 6])) prom_col_m1 #&gt; [1] 0.317 0.735 2.172 -1.756 2.343 -0.214 Segundo método: prom_col_m2 &lt;- vector( length = ncol(mat_norm)) for(j in 1:ncol(mat_norm)){ prom_col_m2[j] &lt;- sum(mat_norm[, j]) } prom_col_m2 #&gt; [1] 0.317 0.735 2.172 -1.756 2.343 -0.214 Tercer método: prom_col_m3 &lt;- apply(X = mat_norm, MARGIN = 2, FUN = sum) prom_col_m3 #&gt; [1] 0.317 0.735 2.172 -1.756 2.343 -0.214 Cuarto método: prom_col_m4 &lt;- colSums(mat_norm) prom_col_m4 #&gt; [1] 0.317 0.735 2.172 -1.756 2.343 -0.214 Ahora, para obtener la suma por renglón usando el tercer método de la función apply(), únicamente es necesario cambiar la dimensión sobre la que voy a resumir con el argumento MARGIN = 1. prom_row_m3 &lt;- apply(mat_norm, 1, sum) prom_row_m3 #&gt; [1] 0.56 -1.43 3.18 1.28 Esto es equivalente al primer método que usamos: prom_row_m1 &lt;- c(sum(mat_norm[1, ]), sum(mat_norm[2, ]), sum(mat_norm[3, ]), sum(mat_norm[4, ])) prom_row_m1 #&gt; [1] 0.56 -1.43 3.18 1.28 La ventaja de usar la función apply() es que se puede usar cualquier función. Por ejemplo, obtener la desviación estándar. apply(mat_norm, 1, sd) #&gt; [1] 0.634 1.172 0.834 1.207 O bien, una crear una función propia (definida por el usuario) con la función function(): cv_vec_m3 &lt;- apply(mat_norm, 1, function(reng){ cv &lt;- mean(reng)/sd(reng) return(cv) }) cv_vec_m3 #&gt; [1] 0.147 -0.204 0.636 0.177 Funciones Anónimas: A este tipo de funciones se les llama funciones anónimas porque no se nombran ni guardan en el ambiente de R y únicamente funcionan dentro del comando que las llama. lapply() La función lapply() aplica una función sobre una lista o un vector y regresa el resultado en otra lista. Vector de ciudades: ciudades_vec &lt;- c(&quot;Aguascalientes&quot;, &quot;Monterrey&quot;, &quot;Guadalajara&quot;, &quot;México&quot;) ciudades_vec #&gt; [1] &quot;Aguascalientes&quot; &quot;Monterrey&quot; &quot;Guadalajara&quot; &quot;México&quot; res_nchar_l &lt;- lapply(ciudades_vec, nchar) res_nchar_l #&gt; [[1]] #&gt; [1] 14 #&gt; #&gt; [[2]] #&gt; [1] 9 #&gt; #&gt; [[3]] #&gt; [1] 11 #&gt; #&gt; [[4]] #&gt; [1] 6 Esta función permite implementar funciones que regresen objetos de diferentes tipos, porque la listas permiten almacenar contenido heterogéneo. La función lapply() permite incluir argumentos de las funciones que implementa. Estos argumentos se incluyen dentro de lapply() después de la función a implementar. Por ejemplo, usamos la función potencia que se creó antes. potencia_fun &lt;- function(base, exponente){ base^exponente } El objetivo es aplicar a cada elemento de la siguiente lista la función potencia y elevarlo al cubo. nums_lista &lt;- list(1, 3, 4) nums_lista #&gt; [[1]] #&gt; [1] 1 #&gt; #&gt; [[2]] #&gt; [1] 3 #&gt; #&gt; [[3]] #&gt; [1] 4 En la función lapply() se agrega el argumento exponente = 3 como último argumento. potencia_lista &lt;- lapply(nums_lista, potencia_fun, exponente = 3) potencia_lista #&gt; [[1]] #&gt; [1] 1 #&gt; #&gt; [[2]] #&gt; [1] 27 #&gt; #&gt; [[3]] #&gt; [1] 64 Una forma de reducir la lista obtenida a un vector es con la función unlist() que vimos antes. unlist(potencia_lista) #&gt; [1] 1 27 64 sapply() La función sapply() es muy similar a lapply(). La única diferencia es la s que surge de simplified apply. Al igual que lapply() aplica una función sobre una lista o un vector pero simplifica el resultado en un arreglo. res_nchar_s &lt;- sapply(ciudades_vec, nchar) res_nchar_s #&gt; Aguascalientes Monterrey Guadalajara México #&gt; 14 9 11 6 Esta función es peligrosa ya que únicamente simplifica la estructura del resultado cuando es posible, de lo contrario, regresará una lista igual que lapply(). 2.7.3.1 Funciones map Un problema con sapply() y lapply() es que puedes no tener control sobre el tipo que obtienes y esto es importante si el código está dentro de una función: x1 &lt;- list( c(0.27, 0.37, 0.57, 0.91, 0.20), c(0.90, 0.94, 0.66, 0.63, 0.06), c(0.21, 0.18, 0.69, 0.38, 0.77) ) x2 &lt;- list( c(0.50, 0.72, 0.99, 0.38, 0.78), c(0.93, 0.21, 0.65, 0.13, 0.27), c(0.39, 0.01, 0.38, 0.87, 0.34) ) threshold &lt;- function(x, cutoff = 0.8) x[x &gt; cutoff] x1 %&gt;% sapply(threshold) %&gt;% str() #&gt; List of 3 #&gt; $ : num 0.91 #&gt; $ : num [1:2] 0.9 0.94 #&gt; $ : num(0) x2 %&gt;% sapply(threshold) %&gt;% str() #&gt; num [1:3] 0.99 0.93 0.87 Las funciones del paquete purrr son útiles porque hacen que los loops sobre vectores sean sencillos: tienen nombres similares, y tienen argumentos consistentes. Hay una función para cada tipo de salida: map() crea una lista. map_lgl() crea un vector lógico. map_int() crea un vector de enteros. map_dbl() crea un vector numérico. map_chr() crea un vector de tipo caracter. Cada función toma un vector como entrada, aplica una función a cada elemento y luego devuelve un nuevo vector que tiene la misma longitud (y tiene los mismos nombres) que la entrada, y el tipo de vector está determinado por el sufijo de la función. Por ejemplo, supongamos que deseamos calcular el número de valores únicos en cada columna de iris. Utilizamos, entonces, la función map_int porque deseamos obtener como resultado un vector de enteros donde cada entero represente el número de valores únicos en cada columna: map_int(.x = iris, .f = function(x){length(unique(x)) }) #&gt; Sepal.Length Sepal.Width Petal.Length Petal.Width Species #&gt; 35 23 43 22 3 #&gt; Species_ord #&gt; 3 Para generar cuatro vectores cada uno de tamaño 5 de valores que provienen de una distribución normal con medias \\(\\mu=-10, 0, 10, 100\\) podemos utilizar la función map: mu &lt;- list(-10, 0, 10, 100) mu %&gt;% map(rnorm, n = 5) %&gt;% str() #&gt; List of 4 #&gt; $ : num [1:5] -9.38 -10.06 -10.16 -11.47 -10.48 #&gt; $ : num [1:5] 0.4179 1.3587 -0.1028 0.3877 -0.0538 #&gt; $ : num [1:5] 8.62 9.59 9.61 9.94 11.1 #&gt; $ : num [1:5] 100.8 99.8 99.7 100.7 100.6 Podemos usar map2() para iterar sobre dos vectores en paralelo: sigma &lt;- list(1, 5, 10, 100) map2(mu, sigma, rnorm, n = 5) %&gt;% str() #&gt; List of 4 #&gt; $ : num [1:5] -10.69 -10.71 -9.64 -9.23 -10.11 #&gt; $ : num [1:5] 4.41 1.99 -3.06 1.71 -5.65 #&gt; $ : num [1:5] 24.33 29.804 6.328 -0.441 15.697 #&gt; $ : num [1:5] 86.5 340.2 96.1 169 102.8 Las funciones de map también preservan nombres: z &lt;- list(x = 1:3, y = 4:5) map_int(z, length) #&gt; x y #&gt; 3 2 Hay algunos shortcuts que podemos usar con .f para guardar un poco de tipeo. Supongamos que queremos ajustar un modelo lineal a cada subconjunto en un conjunto de datos. Pensemos en los datos de mtcars divididos en tres subconjuntos (uno para cada valor de cilindro) y se ajusta el mismo modelo lineal en cada subconjunto (millas por galón mpg vs peso wt): models &lt;- mtcars %&gt;% split(.$cyl) %&gt;% map(~lm(mpg ~ wt, data = .)) Con el símbolo ~ se puede declarar una función anónima con un argumento al cual se hace referencia después utilizando el .. Cuando vemos muchos modelos, generalmente deseamos extraer un resumen estadístico como la \\(R^2\\). Para hacer eso necesitamos ejecutar primero summary() y luego extraer el componente llamado r.squared. Podríamos hacer eso usando la abreviatura de funciones anónimas: models %&gt;% map(summary) %&gt;% map_dbl(~.$r.squared) #&gt; 4 6 8 #&gt; 0.509 0.465 0.423 Pero purrr tiene un shortcut para extraer estos componentes en una cadena: models %&gt;% map(summary) %&gt;% map_dbl(&quot;r.squared&quot;) #&gt; 4 6 8 #&gt; 0.509 0.465 0.423 También se puede usar un número entero para seleccionar elementos por posición: x &lt;- list(list(1, 2, 3), list(4, 5, 6), list(7, 8, 9)) x %&gt;% map_dbl(2) #&gt; [1] 2 5 8 La función pmap() recibe una lista de argumentos para aplicarlos a una función: params &lt;- tribble( ~mean, ~sd, ~n, 5, 1, 1, 10, 5, 3, -3, 10, 5 ) params %&gt;% pmap(rnorm) #&gt; [[1]] #&gt; [1] 4.26 #&gt; #&gt; [[2]] #&gt; [1] 10.944 0.975 17.328 #&gt; #&gt; [[3]] #&gt; [1] -1.47 18.73 1.76 -10.10 3.11 Hay un paso más en la complejidad: además de variar los argumentos para una función, también puedes variar la función misma y para esto se usa la función invoke_map(): sim &lt;- tribble( ~f, ~params, &quot;runif&quot;, list(min = -1, max = 1), &quot;rnorm&quot;, list(sd = 5), &quot;rpois&quot;, list(lambda = 10) ) sim %&gt;% mutate(sim = invoke_map(f, params, n = 10)) %&gt;% str() #&gt; Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 3 obs. of 3 variables: #&gt; $ f : chr &quot;runif&quot; &quot;rnorm&quot; &quot;rpois&quot; #&gt; $ params:List of 3 #&gt; ..$ :List of 2 #&gt; .. ..$ min: num -1 #&gt; .. ..$ max: num 1 #&gt; ..$ :List of 1 #&gt; .. ..$ sd: num 5 #&gt; ..$ :List of 1 #&gt; .. ..$ lambda: num 10 #&gt; $ sim :List of 3 #&gt; ..$ : num -0.65 0.493 -0.79 0.729 0.229 ... #&gt; ..$ : num 0.372 -2.948 -2.843 -0.676 5.89 ... #&gt; ..$ : int 11 10 8 13 13 12 15 11 5 10 2.7.4 Rendimiento en R “We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.” -Donald Knuth Diseña primero, luego optimiza. La optimización del código es un proceso iterativo: Encuentra el cuello de botella (más importante). Intenta eliminarlo (no siempre se puede). Repite hasta que tu código sea lo suficientemente rápido. Diagnosticar Una vez que tienes código que se puede leer y funciona, el perfilamiento (profiling) del código es un método sistemático que nos permite conocer cuanto tiempo se esta usando en diferentes partes del programa. Comenzaremos con la función system.time (no es perfilamiento aún), esta calcula el timepo en segundos que toma ejecutar una expresión (si hay un error, regresa el tiempo hasta que ocurre el error): library(Lahman) Batting %&gt;% sample_n(10) %&gt;% knitr::kable() playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB SO IBB HBP SH SF GIDP 86418 gilesma01 2005 1 ATL NL 152 577 104 168 45 4 15 63 16 3 64 108 1 5 4 4 13 32692 weathro01 1946 1 NYA AL 2 2 0 1 0 0 0 0 0 0 0 0 NA 0 0 NA 0 80489 tynerja01 2000 2 TBA AL 37 83 6 20 2 0 0 8 6 1 4 12 0 1 5 1 1 27504 stephwa01 1937 1 PHI NL 10 23 1 6 0 0 0 2 0 NA 2 3 NA 0 0 NA 1 22480 cohenan01 1928 1 NY1 NL 129 504 64 138 24 7 9 59 3 NA 31 17 NA 2 11 NA NA 53133 lemonch01 1975 1 CHA AL 9 35 2 9 2 0 0 1 1 0 2 6 0 0 1 0 0 27651 chapmsa01 1938 1 PHA AL 114 406 60 105 17 7 17 63 3 4 55 94 NA 4 1 NA NA 18626 weavebu01 1920 1 CHA AL 151 629 102 208 34 8 2 75 19 17 28 23 NA 6 27 NA NA 53314 perezto01 1975 1 CIN NL 137 511 74 144 28 3 20 109 1 2 54 101 6 3 0 6 12 57859 littljo01 1980 1 SLN NL 52 11 1 0 0 0 0 0 0 0 0 3 0 0 1 0 0 system.time(lm(R ~ AB + teamID, Batting)) #&gt; user system elapsed #&gt; 2.922 0.104 3.026 user time: Tiempo usado por el CPU(s) para evaluar esta expresión, tiempo que experimenta la computadora. elapsed time: tiempo en el reloj, tiempo que experimenta la persona. El tiempo de usuario (user) usualmente es menor que el tiempo transcurrido: system.time(readLines(&quot;http://www.jhsph.edu&quot;)) #&gt; user system elapsed #&gt; 0.009 0.016 1.075 library(parallel) system.time(mclapply(2000:2006, function(x){ sub &lt;- subset(Batting, yearID == x) lm(R ~ AB, sub) }, mc.cores = 5)) #&gt; user system elapsed #&gt; 0.064 0.059 0.078 Comparemos la velocidad de dplyr con funciones que se encuentran en R estándar y plyr. # dplyr dplyr_st &lt;- system.time({ Batting %&gt;% group_by(playerID) %&gt;% summarise(total = sum(R, na.rm = TRUE), n = n()) %&gt;% dplyr::arrange(desc(total)) }) # plyr plyr_st &lt;- system.time({ Batting %&gt;% plyr::ddply(&quot;playerID&quot;, plyr::summarise, total = sum(R, na.rm = TRUE), n = length(R)) %&gt;% dplyr::arrange(-total) }) # estándar lento est_l_st &lt;- system.time({ players &lt;- unique(Batting$playerID) n_players &lt;- length(players) total &lt;- rep(NA, n_players) n &lt;- rep(NA, n_players) for(i in 1:n_players){ sub_batting &lt;- Batting[Batting$playerID == players[i], ] total[i] &lt;- sum(sub_batting$R, na.rm = TRUE) n[i] &lt;- nrow(sub_batting) } batting_2 &lt;- data.frame(playerID = players, total = total, n = n) batting_2[order(batting_2$total, decreasing = TRUE), ] }) # estándar rápido est_r_st &lt;- system.time({ batting_2 &lt;- aggregate(. ~ playerID, data = Batting[, c(&quot;playerID&quot;, &quot;R&quot;)], sum) batting_ord &lt;- batting_2[order(batting_2$R, decreasing = TRUE), ] }) dplyr_st #&gt; user system elapsed #&gt; 0.143 0.000 0.143 plyr_st #&gt; user system elapsed #&gt; 7.235 0.012 7.248 est_l_st #&gt; user system elapsed #&gt; 73.98 1.72 75.73 est_r_st #&gt; user system elapsed #&gt; 0.876 0.008 0.885 La función system.time supone que sabes donde buscar, es decir, que expresiones debes evaluar, una función que puede ser más útil cuando uno desconoce cuál es la función que alenta un programa es Rprof(). Rprof es un perfilador de muestreo que registra cambios en la pila de funciones, funciona tomando muestras a intervalos regulares y tabula cuánto tiempo se lleva en cada función. Rprof(&quot;out/lm_rprof.out&quot;, interval = 0.015, line.profiling = TRUE) mod &lt;- lm(R ~ AB + teamID, Batting) Rprof(NULL) Usamos la función `summaryRprof para tabular las salidas de Rprof y calcular cuánto tiempo se toma en cada función. summaryRprof(&quot;out/lm_rprof.out&quot;) #&gt; $by.self #&gt; self.time self.pct total.time total.pct #&gt; &quot;lm.fit&quot; 5.04 95.18 5.05 95.47 #&gt; &quot;.External2&quot; 0.16 3.12 0.20 3.68 #&gt; &quot;as.character&quot; 0.04 0.85 0.04 0.85 #&gt; &quot;anyDuplicated.default&quot; 0.03 0.57 0.03 0.57 #&gt; &quot;c&quot; 0.02 0.28 0.02 0.28 #&gt; #&gt; $by.total #&gt; total.time total.pct self.time self.pct #&gt; &quot;&lt;Anonymous&gt;&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;block_exec&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;call_block&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;do.call&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;eval.parent&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;eval&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;evaluate_call&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;evaluate&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;handle&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;in_dir&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;knitr::knit&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;lm&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;local&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;process_file&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;process_group.block&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;process_group&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;timing_fn&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;withCallingHandlers&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;withVisible&quot; 5.29 100.00 0.00 0.00 #&gt; &quot;lm.fit&quot; 5.05 95.47 5.04 95.18 #&gt; &quot;.External2&quot; 0.20 3.68 0.16 3.12 #&gt; &quot;model.matrix.default&quot; 0.16 3.12 0.00 0.00 #&gt; &quot;model.matrix&quot; 0.16 3.12 0.00 0.00 #&gt; &quot;as.character&quot; 0.04 0.85 0.04 0.85 #&gt; &quot;model.response&quot; 0.04 0.85 0.00 0.00 #&gt; &quot;anyDuplicated.default&quot; 0.03 0.57 0.03 0.57 #&gt; &quot;[.data.frame&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;[&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;anyDuplicated&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;model.frame.default&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;na.omit.data.frame&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;na.omit&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;stats::model.frame&quot; 0.03 0.57 0.00 0.00 #&gt; &quot;c&quot; 0.02 0.28 0.02 0.28 #&gt; #&gt; $sample.interval #&gt; [1] 0.015 #&gt; #&gt; $sampling.time #&gt; [1] 5.29 Hay dos métodos para normalizar los datos de Rprof: by.total divide el tiempo que se toma en cada función entre el tiempo total en correr. by.self similar a by.total pero primero resta el tiempo que se toman las funciones en la cima de la pila. Rprof(&quot;out/plyr_rprof.out&quot;) Batting %&gt;% plyr::ddply(&quot;playerID&quot;, plyr::summarise, total = sum(R, na.rm = TRUE), n = length(R)) %&gt;% plyr::arrange(-total) %&gt;% head() Rprof(NULL) summaryRprof(&quot;out/plyr_rprof.out&quot;)$by.self[1:10, ] # Rprof(&quot;out/slow_rprof.out&quot;) # players &lt;- unique(batting$playerID) # n_players &lt;- length(players) # total &lt;- rep(NA, n_players) # n &lt;- rep(NA, n_players) # for(i in 1:n_players){ # sub_batting &lt;- batting[batting$playerID == players[i], ] # total[i] &lt;- sum(sub_batting$R) # n[i] &lt;- nrow(sub_batting) # } # batting_2 &lt;- data.frame(playerID = players, total = total, n = n) # batting_2[order(batting_2$total, decreasing = TRUE), ] # Rprof(NULL) summaryRprof(&quot;out/slow_rprof.out&quot;)$by.self[1:10, ] #&gt; self.time self.pct total.time total.pct #&gt; &quot;[.data.frame&quot; 45.50 54.74 82.74 99.54 #&gt; &quot;==&quot; 24.78 29.81 24.78 29.81 #&gt; &quot;attr&quot; 6.70 8.06 6.70 8.06 #&gt; &quot;NextMethod&quot; 3.42 4.11 3.44 4.14 #&gt; &quot;[[&quot; 1.32 1.59 2.12 2.55 #&gt; &quot;[[.data.frame&quot; 0.22 0.26 0.80 0.96 #&gt; &quot;&lt;Anonymous&gt;&quot; 0.20 0.24 0.46 0.55 #&gt; &quot;all&quot; 0.10 0.12 0.10 0.12 #&gt; &quot;sys.call&quot; 0.10 0.12 0.10 0.12 #&gt; &quot;%in%&quot; 0.08 0.10 0.22 0.26 Estrategias para mejorar desempeño Utilizar apropiadamente funciones de R, o funciones de paquetes que muchas veces están mejor escritas de lo que nosotros podríamos hacer. Hacer lo menos posible. Usar funciones vectorizadas en R (casi siempre). No hacer crecer objetos (es preferible definir su tamaño antes de operar en ellos). Paralelizar. La más simple y muchas veces la más barata: conseguie una máquina más grande (por ejemplo Amazon Web Services). 1 Utilizar apropiadamente funciones de R Si el cuello de botella es la función de un paquete vale la pena buscar alternativas, CRAN task views es un buen lugar para buscar. 2 Hacer lo menos posible Utiliza funciones más específicas, por ejemplo: rowSums(), colSums(), rowMeans() y colMeans() son más rápidas que las invocaciones equivalentes de apply(). Si quieres checar si un vector contiene un valor any(x == 10) es más veloz que 10 %in% x, esto es porque examinar igualdad es más sencillo que examinar inclusión en un conjunto. Este conocimiento requiere que conozcas alternativas, para ello debes construir tu vocabulario, puedes comenzar por lo básico e ir incrementando conforme lees código. Otro caso es cuando las funciones son más rápidas cunado les das más información del problema, por ejemplo: read.csv(), especificar las clases de las columnas con colClasses. factor() especifica los niveles con el argumento levels. 3.1 Usar funciones vectorizadas en R Es común escuchar que en R vectorizar es conveniente, el enfoque vectorizado va más allá que evitar ciclos for: Pensar en objetos, en lugar de enfocarse en las compoentes de un vector, se piensa únicamente en el vector completo. Los ciclos en las funciones vectorizadas de R están escritos en C, lo que los hace más veloces. Las funciones vectorizadas programadas en R pueden mejorar la interfaz de una función pero no necesariamente mejorar el desempeño. Usar vectorización para desempeño implica encontrar funciones de R implementadas en C. Al igual que en el punto anterior, vectorizar requiere encontrar las funciones apropiadas, algunos ejemplos incluyen: _rowSums(), colSums(), rowMeans() y colMeans(). 3.2 Evitar copias Otro aspecto importante es que generalmente conviene asignar objetos en lugar de hacerlos crecer (es más eficiente asignar toda la memoria necesaria antes del cálculo que asignarla sucesivamente). Esto es porque cuando se usan instrucciones para crear un objeto más grande (e.g. append(), cbind(), c(), rbind()) R debe primero asignar espacio a un nuevo objeto y luego copiar al nuevo lugar. Para leer más sobre esto The R Inferno es una buena referencia. Veamos unos ejemplos de vectorización y de asignar objetos. aciertos &lt;- FALSE system.time( for (i in 1:1e+05) { if (runif(1) &lt; 0.3) aciertos[i] &lt;- TRUE }) #&gt; user system elapsed #&gt; 0.579 0.000 0.580 aciertos &lt;- rep(FALSE, 1e+06) system.time( for (i in 1:1e+05) { if (runif(1) &lt; 0.3) aciertos[i] &lt;- TRUE }) #&gt; user system elapsed #&gt; 0.377 0.000 0.378 Usando rbind: crecer_rbind &lt;- function(){ mi.df &lt;- data.frame(a = character(0), b = numeric(0)) for(i in 1:1e3) { mi.df &lt;- rbind(mi.df, data.frame(a = sample(letters, 1), b = runif(1))) } mi.df } system.time(mi.df.1 &lt;- crecer_rbind()) #&gt; user system elapsed #&gt; 1.14 0.00 1.14 Si definimos el tamaño del data.frame obtenemos mejoras: crecer_rbind_2 &lt;- function() { mi.df &lt;- data.frame(a = rep(NA, 1000), b = rep(NA, 1000)) for (i in 1:1000) { mi.df$a[i] &lt;- sample(letters, 1) mi.df$b[i] &lt;- runif(1) } mi.df } system.time(mi.df.1 &lt;- crecer_rbind_2()) #&gt; user system elapsed #&gt; 0.147 0.000 0.147 Finalmente, veamos un enfoque totalmente vectorizado porcolumna_df &lt;- function(){ a &lt;- sample(letters, 1000, replace = TRUE) b &lt;- runif(1000) mi.df &lt;- data.frame(a = a, b = b) mi.df } system.time(mi.df.2 &lt;- porcolumna_df()) #&gt; user system elapsed #&gt; 0.002 0.000 0.001 A pesar de que aumentamos la velocidad conforme aumentamos el nivel de vectorización, este incremento conlleva un costo en memoria. Si comparamos la versión mas lenta con la más rápida, en la última debemos asignar a, b y mi.df. Entonces, no siempre es mejor vectorizar, pues si consumimos la memoria, entonces la versión vectorizada puede enfrentarse al problema de uso de memoria en disco, que tiene aun más grandes penalizaciones en el desempeño que los ciclos que hemos visto. 4 Paralelizar Paralelizar usa varios cores para trabajar de manera simultánea en varias secciones de un problema, no reduce el tiempo computacional pero incrementa el tiempo del usuario pues aprovecha los recursos. Como referencia está Parallel Computing for Data Science de Norm Matloff. 2.8 Tarea Considerando la lista siguiente, cdmx_list &lt;- list( pop = 8918653, delegaciones = c(&quot;Alvaro Obregón&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juárez&quot; , &quot;Coyoacán&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtémoc&quot; , &quot;Gustavo A. Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tláhuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;), capital = TRUE ) obtén la clase de cada elemento con la función lapply(). lapply( , class) La siguiente función extrae la letra de menor posición y mayor posición en orden alfabético. min_max_fun &lt;- function(nombre){ nombre_sinespacios &lt;- gsub(&quot; &quot;, &quot;&quot;, nombre) letras &lt;- strsplit(nombre_sinespacios, split = &quot;&quot;)[[1]] c(minimo = min(letras), maximo = max(letras)) } Es decir, si incluimos las letras abcz la letra mínima es a y la máxima es z. min_max_fun(&quot;abcz&quot;) #&gt; minimo maximo #&gt; &quot;a&quot; &quot;z&quot; El siguiente vector incluye el nombre de las 16 delegaciones de la Ciudad de México. delegaciones &lt;- c(&quot;Alvaro Obregon&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juarez&quot; , &quot;Coyoacan&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtemoc&quot; , &quot;Gustavo Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tlahuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;) Aplica la función sapply() para obtener un arreglo con la letra máxima y mínima de cada nombre. sapply(, ) El siguiente vector incluye el precio de la gasolina en diferentes estados del país en julio de 2017. gas_cdmx &lt;- c(15.82, 15.77, 15.83, 15.23, 14.95, 15.42, 15.55) gas_cdmx #&gt; [1] 15.8 15.8 15.8 15.2 14.9 15.4 15.6 Crea una función que convierta el precio a dolares suponiendo que un dolar equivale a 17.76 pesos. conv_fun &lt;- function(precio){ /17.76 return() } Usando la función lapply() convierte el precio de la gasolina a dolares. gas_cdmx_usd_lista &lt;- lapply(, conv_fun) Usa la función unlist() para convertir la lista a un vector. gas_cdmx_usd &lt;- unlist() print(gas_cdmx_usd) Estadísticos importantes estadisticos &lt;- c(&quot;GAUSS:1777&quot;, &quot;BAYES:1702&quot;, &quot;FISHER:1890&quot;, &quot;PEARSON:1857&quot;) split_estadisticos &lt;- strsplit(estadisticos, split = &quot;:&quot;) split_estadisticos #&gt; [[1]] #&gt; [1] &quot;GAUSS&quot; &quot;1777&quot; #&gt; #&gt; [[2]] #&gt; [1] &quot;BAYES&quot; &quot;1702&quot; #&gt; #&gt; [[3]] #&gt; [1] &quot;FISHER&quot; &quot;1890&quot; #&gt; #&gt; [[4]] #&gt; [1] &quot;PEARSON&quot; &quot;1857&quot; Utiliza la función predefinida tolower() y lapply() para convertir a minúsculas cada letra de la lista split_estadisticos. split_lower &lt;- lapply( , ) print(split_lower) Usando el vector split_estadísticos del ejercicio anterior. str(split_estadisticos) #&gt; List of 4 #&gt; $ : chr [1:2] &quot;GAUSS&quot; &quot;1777&quot; #&gt; $ : chr [1:2] &quot;BAYES&quot; &quot;1702&quot; #&gt; $ : chr [1:2] &quot;FISHER&quot; &quot;1890&quot; #&gt; $ : chr [1:2] &quot;PEARSON&quot; &quot;1857&quot; Crea una función que regrese la primera posición. primera_pos_fun &lt;- function(lista){ } Crea una función que regrese la segunda posición. segunda_pos_fun &lt;- function(lista){ } Usando lapply() crea una lista con los nombres de los estadísticos y otra con la fecha de nacimiento. nombres &lt;- lapply() fechas &lt;- lapply() Usando una función anónima y el vector split_estadísticos en un solo lapply() o sapply() obtén un vector compuesto de la primera posición, es decir el nombre, en minúsculas. Tip: si usas lapply() recuerda usar la función unlist(). nombre_estadisticos &lt;- (split_estadisticos, function(elemento){ tolower() }) nombre_estadisticos En la siguiente lista se presenta el registro de temperatura de tres ciudades a las 07:00 am, 10:00 am, 01:00 pm, 04:00 pm y 07:00 pm. temp_lista &lt;- list( cdmx = c(13, 15, 19, 22, 20), guadalajara = c(18, 18, 22, 26, 27), tuxtla_gtz = c(22, 24, 29, 32, 28) ) str(temp_lista) #&gt; List of 3 #&gt; $ cdmx : num [1:5] 13 15 19 22 20 #&gt; $ guadalajara: num [1:5] 18 18 22 26 27 #&gt; $ tuxtla_gtz : num [1:5] 22 24 29 32 28 Completa la siguiente función que obtiene el promedio entre el valor mínimo y máximo registrados. promedio_extremos_fun &lt;- function(x) { ( min() + max() ) / 2 } Aplica la función a la lista y obtén la temperatura promedio de extremos para cada ciudad usando lapply() y sapply(). lapply(,) sapply(,) Crea una función en la que mientras la velocidad sea mayor a 50 km/hr se reduzca de la siguiente forma: Si es mayor a 80 km/hr se reducen 20 km/hr e imprime ¡Demasido rápido!. Si es menor o igual a 80km/hr se reducen únicamente 5 km/hr. velocidad_act &lt;- 140 while(velocidad_act &gt; ){ if(velocidad_act &gt; ){ print() velocidad_act &lt;- } if(velocidad_act &lt; ){ velocidad_act &lt;- } velocidad_act } Referencias "],
["manipulacion-y-visualizacion-de-datos.html", "Clase 3 Manipulación y visualización de datos 3.1 El principio de datos limpios 3.2 Limpieza de datos 3.3 Separa-aplica-combina 3.4 Muertes por armas de fuego en EUA 3.5 El Cuarteto de Anscombe 3.6 The Grammar of Graphics de Leland Wilkinson 3.7 ggplot 3.8 Un histograma de las muertes en Iraq 3.9 Inglehart–Welzel: un mapa cultural del mundo 3.10 Poniendo todo junto 3.11 Tarea", " Clase 3 Manipulación y visualización de datos .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } “Happy families are all alike; every unhappy family is unhappy in its own way.” — Leo Tolstoy “Tidy datasets are all alike; but every messy dataset is messy in its own way.” — Hadley Wickham Comencemos nuevamente cargando el paquete tidyverse: library(tidyverse) La visualización es una herramienta importante para generar información. Sin embargo, es muy raro obtener los datos exactamente en la forma en que se necesitan. Es común tener que crear nuevas variables o hacer resúmenes a partir de algunas variables, o tal vez sólo sea necesario cambiar el nombre de las variables o reordenar las observaciones con el fin de facilitar el análisis de datos. Pipeline La idea de pipeline intenta hacer el desarrollo de código más fácil, en menor tiempo, fácil de leerlo, y por lo tanto, más fácil mantenerlo. En el análisis de datos es común hacer varias operaciones y se vuelve difícil leer y entender el código. La dificultad radica en que usualmente los parámetros se asignan después del nombre de la función usando (). La forma en que esta idea logra hacer las cosas más faciles es con el operador forwad pipe %&gt;%que envía un valor a una expresión o función. Este cambio en el orden funciona como el parámetro que precede a la función es enviado (“piped”) a la función. Es decir, supongamos x es una valor y sea f una función, entonces, x %&gt;% f es igual a f(x). Por ejemplo, sea \\(f(x)\\) la función de probabilidad de la distribución normal con media \\(\\mu = 0\\) y desviación estándar \\(\\sigma = 1\\): \\[ f(x) = \\dfrac{ 1 }{\\sqrt{2\\pi}} e^{- \\frac{1}{2} x^2 } \\] f &lt;- function(x){ exp(-(x^2)/2)/sqrt(2*pi) } # Con el operador de pipe 0 %&gt;% f #&gt; [1] 0.399 que de forma tradicional se realiza: # Forma tradicional f(0) #&gt; [1] 0.399 En resumen %&gt;% funciona como se muestra en la siguiente figura: Nota: Se puede insertar el pipe %&gt;% utilizando: Cmd/Ctrl + Shift + M. ¿Qué hace el siguiente código? ¿Qué hace .? df &lt;- data_frame( x = runif(5), y = rnorm(5) ) df %&gt;% .$x df %&gt;% ggplot(data = ., aes(x = x, y = y)) + geom_point() Tibbles Tibbles son dataframes con algunas modificaciones que permitirán trabajar mejor con los paquetes de limpieza y manipulación de datos tidyr y dplyr. Una diferencia son los tipos de columnas que maneja: lgl: vectores de valores lógicos, vectores que contienen TRUE o FALSE. int: vectores de números enteros. dbl: vectores de números reales. chr: vectores de caracteres, strings. Imprime ds y as.data.frame(ds). ¿Cuál es la diferencia entre ambas? ds &lt;- tbl_df(mtcars) ds as.data.frame(ds) Nota: Para mayor información de este tipo de dataframes consulta la documentación de la libreria tibble. 3.1 El principio de datos limpios Los principios de datos limpios (Tidy Data de Hadley Wickham) proveen una manera estándar de organizar la información: Cada variable forma una columna. Cada observación forma un renglón. Cada tipo de unidad observacional forma una tabla. Nota: La mayor parte de las bases de datos en estadística tienen forma rectangular por lo que únicamente se trataran este tipo de estructura de datos. Una base de datos es una colección de valores numéricos o categóricos. Cada valor pertenece a una variable y a una observación. Una variable contiene los valores del atributo (genero, fabricante, ingreso) de la variable por unidad. Una observación contiene todos los valores medidos por la misma unidad (personas, día, autos, municipios) para diferentes atributos. Ejemplo: Supongamos un experimento con 3 pacientes cada uno tiene resultados de dos tratamientos (A y B): tratamientoA tratamientoB Juan Aguirre - 2 Ana Bernal 16 11 José López 3 1 La tabla anterior también se puede estructurar de la siguiente manera: Juan Aguirre Ana Bernal José López tratamientoA - 16 3 tratamientoB 2 11 1 Si vemos los principios, entonces ¿las tablas anteriores los cumplen? Para responder la pregunta veamos: ¿Cuáles son los valores? En total se tienen 18 valores en el conjunto de datos. ¿Cuáles son las variables? Se tienen tres variables: Persona/nombre: Juan Aguirre, Ana Bernal, y José López Tratamiento: A y B Resultado: -, 2, 16, 11, 3, 1 ¿Cuáles son las observaciones? Existen 6 observaciones. Entonces, siguiendo los principios de datos limpios obtenemos la siguiente estructura: nombre tratamiento resultado Juan Aguirre a - Ana Bernal a 16 José López a 3 Juan Aguirre b 2 Ana Bernal b 11 José López b 1 Una vez que identificamos los problemas de una base de datos podemos proceder a la limpieza. 3.2 Limpieza de datos Algunos de los problemas más comunes en las bases de datos que no están limpias son: Los encabezados de las columnas son valores y no nombres de variables. Más de una variable por columna. Las variables están organizadas tanto en filas como en columnas. Más de un tipo de observación en una tabla. Una misma unidad observacional está almacenada en múltiples tablas. La mayor parte de estos problemas se pueden arreglar con pocas herramientas, a continuación veremos como limpiar datos usando dos funciones del paquete tidyr de Hadley Wickham: gather: recibe múltiples columnas y las junta en pares de nombres y valores, convierte los datos anchos en largos. spread: recibe 2 columnas y las separa, haciendo los datos más anchos. Repasaremos los problemas más comunes que se encuentran en conjuntos de datos sucios y mostraremos cómo se puede manipular la tabla de datos (usando las funciones gather y spread) con el fin de estructurarla para que cumpla los principios de datos limpios. 1. Los encabezados de las columnas son valores Analicemos los datos que provienen de una encuesta de Pew Research que investiga la relación entre ingreso y afiliación religiosa. ¿Cuáles son las variables en estos datos? pew &lt;- read_csv(&quot;datos/pew.csv&quot;) knitr::kable(pew) religion &lt;$10k $10-20k $20-30k $30-40k $40-50k $50-75k $75-100k $100-150k &gt;150k Don’t know/refused Agnostic 27 34 60 81 76 137 122 109 84 96 Atheist 12 27 37 52 35 70 73 59 74 76 Buddhist 27 21 30 34 33 58 62 39 53 54 Catholic 418 617 732 670 638 1116 949 792 633 1489 Don’t know/refused 15 14 15 11 10 35 21 17 18 116 Evangelical Prot 575 869 1064 982 881 1486 949 723 414 1529 Hindu 1 9 7 9 11 34 47 48 54 37 Historically Black Prot 228 244 236 238 197 223 131 81 78 339 Jehovah’s Witness 20 27 24 24 21 30 15 11 6 37 Jewish 19 19 25 25 30 95 69 87 151 162 Mainline Prot 289 495 619 655 651 1107 939 753 634 1328 Mormon 29 40 48 51 56 112 85 49 42 69 Muslim 6 7 9 10 9 23 16 8 6 22 Orthodox 13 17 23 32 32 47 38 42 46 73 Other Christian 9 7 11 13 13 14 18 14 12 18 Other Faiths 20 33 40 46 49 63 46 40 41 71 Other World Religions 5 2 3 4 2 7 3 4 4 8 Unaffiliated 217 299 374 365 341 528 407 321 258 597 Para limpiarla es necesario apilar las columnas, es decir, pasar los datos a forma larga. Esto lo realizaremos con la función gather(): pew_tidy &lt;- pew %&gt;% gather(income, frequency, -religion) # vemos las primeras líneas de nuestros datos alargados pew_tidy %&gt;% head() %&gt;% knitr::kable() religion income frequency Agnostic &lt;$10k 27 Atheist &lt;$10k 12 Buddhist &lt;$10k 27 Catholic &lt;$10k 418 Don’t know/refused &lt;$10k 15 Evangelical Prot &lt;$10k 575 La nueva estructura de la base de datos nos permite, por ejemplo, hacer fácilmente una gráfica donde podemos comparar las diferencias en las frecuencias. library(dplyr) by_religion &lt;- group_by(pew_tidy, religion) pew_tidy_2 &lt;- pew_tidy %&gt;% filter(income != &quot;Don&#39;t know/refused&quot;) %&gt;% group_by(religion) %&gt;% mutate(percent = frequency / sum(frequency)) %&gt;% filter(sum(frequency) &gt; 1000) ggplot(pew_tidy_2, aes(x = income, y = percent, group = religion)) + facet_wrap(~ religion) + geom_bar(stat = &quot;identity&quot;, fill = &quot;darkgray&quot;) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) En el código de arriba utilizamos las funciones group_by, filter y mutate que estudiaremos más adelante. Otro ejemplo, billboard &lt;- tbl_df(read.csv(&quot;datos/billboard.csv&quot;, stringsAsFactors = FALSE)) billboard %&gt;% sample_n(5) %&gt;% knitr::kable() year artist track time date.entered wk1 wk2 wk3 wk4 wk5 wk6 wk7 wk8 wk9 wk10 wk11 wk12 wk13 wk14 wk15 wk16 wk17 wk18 wk19 wk20 wk21 wk22 wk23 wk24 wk25 wk26 wk27 wk28 wk29 wk30 wk31 wk32 wk33 wk34 wk35 wk36 wk37 wk38 wk39 wk40 wk41 wk42 wk43 wk44 wk45 wk46 wk47 wk48 wk49 wk50 wk51 wk52 wk53 wk54 wk55 wk56 wk57 wk58 wk59 wk60 wk61 wk62 wk63 wk64 wk65 wk66 wk67 wk68 wk69 wk70 wk71 wk72 wk73 wk74 wk75 wk76 2000 Backstreet Boys, The The One 3:46 2000-05-27 58 50 43 37 31 30 39 47 55 61 76 90 93 93 100 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 2000 Sisqo Incomplete 3:52 2000-06-24 77 66 61 61 61 55 2 1 1 2 2 4 5 5 7 8 10 10 9 14 17 20 25 31 32 46 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 2000 Madison Avenue Don’t Call Me Baby 3:44 2000-07-08 98 96 93 93 93 92 92 92 90 92 88 88 88 95 93 98 93 92 90 97 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 2000 Cagle, Chris My Love Goes On And … 3:02 2000-10-21 99 94 94 87 84 83 76 76 79 83 91 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 2000 3 Doors Down Kryptonite 3:53 2000-04-08 81 70 68 67 66 57 54 53 51 51 51 51 47 44 38 28 22 18 18 14 12 7 6 6 6 5 5 4 4 4 4 3 3 3 4 5 5 9 9 15 14 13 14 16 17 21 22 24 28 33 42 42 49 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Queremos apilar las semanas de manera que sea una sola columna (nuevamente alargamos los datos): library(tidyr) billboard_long &lt;- gather(billboard, week, rank, wk1:wk76, na.rm=TRUE) billboard_long %&gt;% sample_n(10) %&gt;% knitr::kable() year artist track time date.entered week rank 2000 Lil’ Zane Callin’ Me 3:43 2000-07-29 wk9 45 2000 DMX Party Up (Up In Here… 3:45 2000-02-26 wk10 27 2000 Aguilera, Christina Come On Over Baby (A… 3:38 2000-08-05 wk6 18 2000 Thomas, Carl Emotional 4:31 2000-11-25 wk15 63 2000 Amber Sexual 4:38 1999-07-17 wk17 98 2000 Goo Goo Dolls Broadway 3:54 2000-04-22 wk20 87 2000 Westlife Swear It Again 4:07 2000-04-01 wk3 66 2000 Lonestar What About Now 3:30 2000-06-10 wk1 78 2000 Madonna Music 3:45 2000-08-12 wk6 1 2000 DMX Party Up (Up In Here… 3:45 2000-02-26 wk8 32 La instrucción na.rm = TRUE se utiliza para eliminar los valores faltantes en las columnas wk1 a wk76. Realizamos una limpieza adicional creando mejores variables de fecha. billboard_tidy &lt;- billboard_long %&gt;% mutate( week = parse_number(week), date = as.Date(date.entered) + 7 * (week - 1)) %&gt;% select(-date.entered) billboard_tidy %&gt;% sample_n(10) %&gt;% knitr::kable() year artist track time week rank date 2000 Ginuwine The Best Man I Can B… 4:06 4 94 2000-01-29 2000 Dion, Celine That’s The Way It Is 4:03 8 30 2000-01-01 2000 Avant Separated 4:13 2 32 2000-05-06 2000 Vassar, Phil Carlene 4:07 7 47 2000-04-15 2000 Creed With Arms Wide Open 3:52 35 5 2001-01-06 2000 Aguilera, Christina Come On Over Baby (A… 3:38 6 18 2000-09-09 2000 Jagged Edge Let’s Get Married 4:23 14 14 2000-08-05 2000 Walker, Clay The Chain Of Love 5:03 15 71 2000-07-22 2000 Creed Higher 5:16 65 49 2000-12-02 2000 Lonestar Amazed 4:25 37 18 2000-02-12 Nuevamente, podemos hacer gráficas fácilmente. tracks &lt;- billboard_tidy %&gt;% filter(track %in% c(&quot;Come On Over Baby (A...&quot;, &quot;What A Girl Wants&quot;, &quot;Say My Name&quot;, &quot;Jumpin&#39; Jumpin&#39;&quot;, &quot;Bye Bye Bye&quot;)) ggplot(tracks, aes(x = date, y = rank)) + geom_line() + facet_wrap(~track, nrow = 1) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) 2. Una columna asociada a más de una variable La siguiente base de datos proviene de la Organización Mundial de la Salud y contiene el número de casos confirmados de tuberculosis por país y año, la información esta por grupo demográfico de acuerdo a sexo (m, f), y edad (0-4, 5-14, etc). library(countrycode) tb &lt;- read_csv(&quot;datos/tb.csv&quot;) tb$country_name &lt;- countrycode(tb$iso2, &#39;iso2c&#39;, &#39;country.name&#39;) tb %&gt;% sample_n(5) %&gt;% knitr::kable() iso2 year new_sp_m04 new_sp_m514 new_sp_m014 new_sp_m1524 new_sp_m2534 new_sp_m3544 new_sp_m4554 new_sp_m5564 new_sp_m65 new_sp_mu new_sp_f04 new_sp_f514 new_sp_f014 new_sp_f1524 new_sp_f2534 new_sp_f3544 new_sp_f4554 new_sp_f5564 new_sp_f65 new_sp_fu country_name PT 1980 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Portugal AT 2002 NA NA 1 8 14 32 43 20 25 NA NA NA 0 8 13 7 5 7 21 NA Austria LU 1984 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Luxembourg OM 1999 NA NA 2 10 11 23 15 7 10 NA NA NA 3 16 4 6 1 4 8 NA Oman NZ 1985 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA New Zealand De manera similar, utilizando la función gather() se busca apilar las columnas correspondientes a sexo-edad. ¿Cómo podemos separar la “variable” sexo-edad en dos columnas? tb_long &lt;- tb %&gt;% gather(demog, casos, new_sp_m04:new_sp_fu, na.rm=TRUE) tb_long %&gt;% sample_n(10) %&gt;% knitr::kable() iso2 year country_name demog casos BZ 2001 Belize new_sp_m014 0 AN 2004 NA new_sp_m3544 4 CA 1991 Canada new_sp_m4554 37 NP 2002 Nepal new_sp_f1524 1203 RO 2006 Romania new_sp_m65 580 BH 1995 Bahrain new_sp_m65 3 PH 1998 Philippines new_sp_f2534 109 GN 2004 Guinea new_sp_f65 63 GU 2001 Guam new_sp_m2534 4 TM 1999 Turkmenistan new_sp_m2534 225 Las variables sexo y edad se obtienen separando la columna demog, para esto se usa la función separate()con los siguientes argumentos: tidyr::separate(data, col = name_variabletoseparate, into = c(vector with names using &quot;&quot;), sep) tb_tidy &lt;- tb_long %&gt;% separate(col = demog, into = c(&quot;sex&quot;, &quot;age&quot;), sep = 8) tb_tidy %&gt;% sample_n(10) %&gt;% knitr::kable() iso2 year country_name sex age casos GN 2004 Guinea new_sp_f 2534 521 NG 2008 Nigeria new_sp_m u 0 PY 2006 Paraguay new_sp_f 1524 130 AT 2007 Austria new_sp_f 2534 14 BO 1997 Bolivia new_sp_m 1524 1214 MR 1999 Mauritania new_sp_f 3544 110 NI 2007 Nicaragua new_sp_f 3544 100 VU 2005 Vanuatu new_sp_f 65 2 NG 2005 Nigeria new_sp_f 65 415 JO 2006 Jordan new_sp_m 5564 4 Ahora para hacer mejor variable sex y age usaremos la función mutate() que permite crear nuevas variables sin modificar la dimensión del dataframe. library(stringr) tb_tidy &lt;- tb_long %&gt;% separate(col = demog, into = c(&quot;sex&quot;, &quot;age&quot;), sep = 8) %&gt;% mutate(sex = str_sub(sex, 8, 8), age = factor(age, levels = c(&quot;014&quot;, &quot;04&quot;, &quot;1524&quot;, &quot;2534&quot;, &quot;3544&quot;, &quot;4554&quot;, &quot;514&quot;, &quot;5564&quot;, &quot;65&quot;,&quot;u&quot;), labels = c(&quot;0-14&quot;, &quot;0-4&quot;, &quot;15-24&quot;, &quot;25-34&quot;, &quot;35-44&quot;, &quot;45-54&quot;, &quot;5-14&quot;, &quot;55-64&quot;, &quot;65+&quot;,&quot;unknown&quot;) ) ) tb_tidy %&gt;% sample_n(10) %&gt;% knitr::kable() iso2 year country_name sex age casos LB 2004 Lebanon m 65+ 6 GT 2007 Guatemala m 45-54 203 EG 2007 Egypt m 25-34 853 BS 2003 Bahamas f 0-14 2 ZW 2007 Zimbabwe m 65+ 153 SG 1999 Singapore f 35-44 18 PA 1999 Panama m 25-34 209 SL 1998 Sierra Leone f 25-34 294 MX 2000 Mexico m 0-14 214 UA 1999 Ukraine m 45-54 1825 Se puede separar la columna demog en dos variables, sexo y edad, utilizando la función separate. Se debe indicar la posición de donde deseamos “cortar”: tb_tidy &lt;- tidyr::separate(tb_long, demog, c(&quot;sex&quot;, &quot;age&quot;), 8) tb_tidy %&gt;% sample_n(10) %&gt;% knitr::kable() iso2 year country_name sex age casos KZ 1998 Kazakhstan new_sp_f 4554 204 PL 2001 Poland new_sp_m 3544 603 NR 2003 Nauru new_sp_f 014 0 NC 1996 New Caledonia new_sp_m 4554 5 BH 2008 Bahrain new_sp_f 1524 12 LK 1995 Sri Lanka new_sp_m 2534 361 GH 2000 Ghana new_sp_f 65 176 ES 2002 Spain new_sp_f 014 17 GA 1998 Gabon new_sp_f 014 15 SE 1999 Sweden new_sp_m 3544 12 3. Variables almacenadas en filas y columnas El problema más difícil es cuando las variables están tanto en filas como encolumnas, veamos una base de datos de clima en Cuernavaca. ¿Cuáles son las variables en estos datos? clima &lt;- tbl_df(read.delim(&quot;datos/clima.txt&quot;, stringsAsFactors=FALSE)) clima %&gt;% sample_n(10) %&gt;% knitr::kable() id year month element d1 d2 d3 d4 d5 d6 d7 d8 d9 d10 d11 d12 d13 d14 d15 d16 d17 d18 d19 d20 d21 d22 d23 d24 d25 d26 d27 d28 d29 d30 d31 MX000017004 2010 5 TMIN NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 182 NA NA NA NA MX000017004 2010 4 TMIN NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 167 NA NA NA NA MX000017004 2010 1 TMAX NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 278 NA MX000017004 2010 5 TMAX NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 332 NA NA NA NA MX000017004 2010 12 TMAX 299 NA NA NA NA 278 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA MX000017004 2010 11 TMIN NA 163 NA 120 79 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 121 142 NA NA NA NA MX000017004 2010 4 TMAX NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 363 NA NA NA NA MX000017004 2010 11 TMAX NA 313 NA 272 263 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 281 277 NA NA NA NA MX000017004 2010 6 TMIN NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA 175 NA NA NA NA NA NA NA NA NA NA NA 180 NA NA MX000017004 2010 3 TMIN NA NA NA NA 142 NA NA NA NA 168 NA NA NA NA NA 176 NA NA NA NA NA NA NA NA NA NA NA NA NA NA NA Estos datos tienen variables en columnas individuales (id, año, mes), en múltiples columnas (día, d1-d31) y en filas (tmin, tmax). Comencemos por apilar las columnas. clima_long &lt;- clima %&gt;% gather(day, value, d1:d31, na.rm = TRUE) head(clima_long) %&gt;% knitr::kable() id year month element day value MX000017004 2010 12 TMAX d1 299 MX000017004 2010 12 TMIN d1 138 MX000017004 2010 2 TMAX d2 273 MX000017004 2010 2 TMIN d2 144 MX000017004 2010 11 TMAX d2 313 MX000017004 2010 11 TMIN d2 163 Podemos crear algunas variables adicionales. clima_vars &lt;- clima_long %&gt;% mutate(day = extract_numeric(day), value = value / 10) %&gt;% select(id, year, month, day, element, value) %&gt;% arrange(id, year, month, day) #&gt; extract_numeric() is deprecated: please use readr::parse_number() instead head(clima_vars) %&gt;% knitr::kable() id year month day element value MX000017004 2010 1 30 TMAX 27.8 MX000017004 2010 1 30 TMIN 14.5 MX000017004 2010 2 2 TMAX 27.3 MX000017004 2010 2 2 TMIN 14.4 MX000017004 2010 2 3 TMAX 24.1 MX000017004 2010 2 3 TMIN 14.4 Finalmente, la columna element no es una variable, sino que almacena el nombre de dos variables, la operación que debemos aplicar (spread) es el inverso de apilar (gather): clima_tidy &lt;- clima_vars %&gt;% spread(element, value) clima_tidy %&gt;% sample_n(10) %&gt;% knitr::kable() id year month day TMAX TMIN MX000017004 2010 8 23 26.4 15.0 MX000017004 2010 8 29 28.0 15.3 MX000017004 2010 4 27 36.3 16.7 MX000017004 2010 11 27 27.7 14.2 MX000017004 2010 7 14 29.9 16.5 MX000017004 2010 10 28 31.2 15.0 MX000017004 2010 6 17 28.0 17.5 MX000017004 2010 3 5 32.1 14.2 MX000017004 2010 8 13 29.8 16.5 MX000017004 2010 2 2 27.3 14.4 Ahora es inmediato no solo hacer gráficas sino también ajustar un modelo. # ajustamos un modelo lineal donde la variable respuesta es temperatura # máxima, y la variable explicativa es el mes clima_lm &lt;- lm(TMAX ~ factor(month), data = clima_tidy) summary(clima_lm) #&gt; #&gt; Call: #&gt; lm(formula = TMAX ~ factor(month), data = clima_tidy) #&gt; #&gt; Residuals: #&gt; Min 1Q Median 3Q Max #&gt; -3.65 -0.92 -0.02 1.05 3.18 #&gt; #&gt; Coefficients: #&gt; Estimate Std. Error t value Pr(&gt;|t|) #&gt; (Intercept) 27.800 1.861 14.94 5.3e-13 *** #&gt; factor(month)2 -0.050 2.081 -0.02 0.9810 #&gt; factor(month)3 4.767 2.149 2.22 0.0372 * #&gt; factor(month)4 8.500 2.632 3.23 0.0039 ** #&gt; factor(month)5 5.400 2.632 2.05 0.0523 . #&gt; factor(month)6 1.250 2.279 0.55 0.5889 #&gt; factor(month)7 1.450 2.279 0.64 0.5312 #&gt; factor(month)8 0.471 1.990 0.24 0.8149 #&gt; factor(month)10 1.100 2.039 0.54 0.5949 #&gt; factor(month)11 0.320 2.039 0.16 0.8767 #&gt; factor(month)12 1.050 2.279 0.46 0.6496 #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 #&gt; #&gt; Residual standard error: 1.86 on 22 degrees of freedom #&gt; Multiple R-squared: 0.618, Adjusted R-squared: 0.445 #&gt; F-statistic: 3.56 on 10 and 22 DF, p-value: 0.0062 4. Mas de un tipo de observación en una misma tabla En ocasiones las bases de datos involucran valores en diferentes niveles, endiferentes tipos de unidad observacional. En la limpieza de datos, cada unidad observacional debe estar almacenada en su propia tabla (esto esta ligado a normalización de una base de datos), es importante para evitar inconsistencias en los datos. ¿Cuáles son las unidades observacionales de los datos de billboard? billboard_tidy %&gt;% arrange(artist, track, year, time) %&gt;% head(20) #&gt; # A tibble: 20 x 7 #&gt; year artist track time week rank date #&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;date&gt; #&gt; 1 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 1.00 87 2000-02-26 #&gt; 2 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 2.00 82 2000-03-04 #&gt; 3 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 3.00 72 2000-03-11 #&gt; 4 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 4.00 77 2000-03-18 #&gt; 5 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 5.00 87 2000-03-25 #&gt; 6 2000 2 Pac Baby Don&#39;t Cry (Keep... 4:22 6.00 94 2000-04-01 #&gt; # ... with 14 more rows Separemos esta base de datos en dos: la tabla canción que almacena artista, nombre de la canción y duración; la tabla rank que almacena el ranking de la canción en cada semana. song &lt;- billboard_tidy %&gt;% select(artist, track, year, time) %&gt;% unique() %&gt;% arrange(artist) %&gt;% mutate(song_id = row_number(artist)) song %&gt;% sample_n(10) %&gt;% knitr::kable() artist track year time song_id Zombie Nation Kernkraft 400 2000 3:30 316 Brooks, Garth Do What You Gotta Do 2000 2:56 48 Larrieux, Amel Get Up 2000 4:02 167 Sisqo Thong Song 2000 4:05 265 Next Wifey 2000 4:03 224 Diffie, Joe The Quittin’ Kind 2000 3:23 79 Lil Wayne Tha Block Is Hot 2000 4:13 172 SheDaisy This Woman Needs 2000 3:20 258 Aaliyah Try Again 2000 4:03 9 Jay-Z Big Pimpin’ 2000 3:55 145 rank &lt;- billboard_tidy %&gt;% left_join(song, c(&quot;artist&quot;, &quot;track&quot;, &quot;year&quot;, &quot;time&quot;)) %&gt;% select(song_id, date, week, rank) %&gt;% arrange(song_id, date) %&gt;% tbl_df rank %&gt;% sample_n(10) %&gt;% knitr::kable() song_id date week rank 253 2000-07-15 23 26 255 2000-03-11 21 4 126 2000-04-08 8 77 65 2000-09-23 1 97 131 1999-10-30 4 43 214 2000-10-28 8 10 156 2000-09-16 7 36 211 2000-12-02 13 45 157 2000-08-19 3 75 264 2000-07-01 2 66 5. Una misma unidad observacional está almacenada en múltiples tablas También es común que los valores sobre una misma unidad observacional estén separados en muchas tablas o archivos, es común que estas tablas esten divididas de acuerdo a una variable, de tal manera que cada archivo representa a una persona, año o ubicación. Para juntar los archivos hacemos lo siguiente: Leemos los archivos en una lista de tablas. Para cada tabla agregamos una columna que registra el nombre del archivo original. Combinamos las tablas en un solo data frame. Veamos un ejemplo, la carpeta specdata contiene 332 archivos csv que almacenan información de monitoreo de contaminación en 332 ubicaciones de EUA. Cada archivo contiene información de una unidad de monitoreo y el número de identificación del monitor es el nombre del archivo. Los pasos en R (usando el paquete plyr), primero creamos un vector con los nombres de los archivos en un directorio, aligiendo aquellos que contengan las letras “.csv”. paths &lt;- dir(&quot;datos/specdata&quot;, pattern = &quot;\\\\.csv$&quot;, full.names = TRUE) Después le asignamos el nombre del csv al nombre de cada elemento del vector. Este paso se realiza para preservar los nmobres de los archivos ya que estos los asignaremos a una variable mas adelante. names(paths) &lt;- basename(paths) La función map_df del paquete purrr itera sobre cada dirección, lee el csv en dicha dirección y los combina en un data frame. specdata_US &lt;- map_df(paths, read.csv, stringsAsFactors = FALSE) specdata &lt;- specdata_US %&gt;% mutate(monitor = extract_numeric(ID), date = as.Date(Date)) %&gt;% select(id = ID, monitor, date, sulfate, nitrate) glimpse(specdata) #&gt; Observations: 772,087 #&gt; Variables: 5 #&gt; $ id &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... #&gt; $ monitor &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, ... #&gt; $ date &lt;date&gt; 2003-01-01, 2003-01-02, 2003-01-03, 2003-01-04, 2003-... #&gt; $ sulfate &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... #&gt; $ nitrate &lt;dbl&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA... 6. Otras consideraciones En las buenas prácticas es importante tomar en cuenta los siguientes puntos: Incluir un encabezado con el nombre de las variables. Los nombres de las variables deben ser entendibles (e.g. age_at_diagnosis es mejor que AgeDx). En general los datos se deben guardar en un archivo por tabla. Escribir un script con las modificaciones que se hicieron a los datos crudos (reproducibilidad). Otros aspectos importantes en la limpieza de datos son: selección del tipo de variables (por ejemplo fechas), datos faltantes, typos y detección de valores atípicos. 3.3 Separa-aplica-combina Muchos problemas de análisis de datos involucran la aplicación de la estrategia split-apply-combine de Hadley Whickam, 2011. Esto se traduce en realizar filtros, cálculos y agregación de datos. Split-apply-combine Separa la base de datos original. Aplica funciones a cada subconjunto. Combina los resultados en una nueva base de datos. Consiste en romper un problema en pedazos (de acuerdo a una variable de interés), operar sobre cada subconjunto de manera independiente (calcular la media de cada grupo) y después unir los pedazos nuevamente. Cuando pensamos como implementar la estrategia divide-aplica-combina es natural pensar en iteraciones para recorrer cada grupo de interés y aplicar las funciones. Para esto usaremos la librería dplyr que contiene funciones que facilitan la implementación de la estrategia. Son importantes las siguientes funciones de la librería dplyr: filter: obtiene un subconjunto de las filas de acuerdo a una condición. select: selecciona columnas de acuerdo al nombre. arrange: re ordena las filas. mutate: agrega nuevas variables. summarise: reduce variables a valores (crear nuevas bases de datos). Para mostrar las funciones se usará el siguiente dataframe. df_ej &lt;- data.frame(genero = c(&quot;mujer&quot;, &quot;hombre&quot;, &quot;mujer&quot;, &quot;mujer&quot;, &quot;hombre&quot;), estatura = c(1.65, 1.80, 1.70, 1.60, 1.67)) df_ej %&gt;% knitr::kable() genero estatura mujer 1.65 hombre 1.80 mujer 1.70 mujer 1.60 hombre 1.67 Filtrar Filtrar una base de datos dependiendo de una condición requiere la función filter() que tiene los siguientes argumentos dplyr::filter(data, condition). df_ej %&gt;% filter(genero == &quot;mujer&quot;) #&gt; genero estatura #&gt; 1 mujer 1.65 #&gt; 2 mujer 1.70 #&gt; 3 mujer 1.60 Seleccionar Elegir columnas de un conjunto de datos se puede hacer con la función select() que tiene los siguientes argumentos dplyr::select(data, seq_variables). df_ej %&gt;% select(genero) #&gt; genero #&gt; 1 mujer #&gt; 2 hombre #&gt; 3 mujer #&gt; 4 mujer #&gt; 5 hombre También, existen funciones que se usan exclusivamente en select(): starts_with(x, ignore.case = TRUE): los nombres empiezan con x. ends_with(x, ignore.case = TRUE): los nombres terminan con x. contains(x, ignore.case = TRUE): selecciona las variable que contengan x. matches(x, ignore.case = TRUE): selecciona las variable que igualen la expresión regular x. num_range(&quot;x&quot;, 1:5, width = 2): selecciona las variables (numéricamente) de x01 a x05. one_of(&quot;x&quot;, &quot;y&quot;, &quot;z&quot;): selecciona las variables que estén en un vector de caracteres. everything(): selecciona todas las variables. Por ejemplo: df_ej %&gt;% select(starts_with(&quot;g&quot;)) #&gt; genero #&gt; 1 mujer #&gt; 2 hombre #&gt; 3 mujer #&gt; 4 mujer #&gt; 5 hombre Arreglar Arreglar u ordenar de acuerdo al valor de una o más variables es posible con la función arrange() que tiene los siguientes argumentos dplyr::arrange(data, variables_por_las_que_ordenar). La función desc() permite que se ordene de forma descendiente. df_ej %&gt;% arrange(desc(estatura)) #&gt; genero estatura #&gt; 1 hombre 1.80 #&gt; 2 mujer 1.70 #&gt; 3 hombre 1.67 #&gt; 4 mujer 1.65 #&gt; 5 mujer 1.60 Mutar Mutar consiste en crear nuevas variables con la función mutate() que tiene los siguientes argumentos dplyr::mutate(data, nuevas_variables = operaciones): df_ej %&gt;% mutate(estatura_cm = estatura * 100) #&gt; genero estatura estatura_cm #&gt; 1 mujer 1.65 165 #&gt; 2 hombre 1.80 180 #&gt; 3 mujer 1.70 170 #&gt; 4 mujer 1.60 160 #&gt; 5 hombre 1.67 167 Resumir Los resúmenes permiten crear nuevas bases de datos que son agregaciones de los datos originales. La función summarise() permite realizar este resumendplyr::summarise(data, nuevas_variables = operaciones): df_ej %&gt;% dplyr::summarise(promedio = mean(estatura)) #&gt; promedio #&gt; 1 1.68 También es posible hacer resúmenes agrupando por variables determinadas de la base de datos. Pero, primero es necesario crear una base agrupada con la función group_by() con argumentos dplyr::group_by(data, add = variables_por_agrupar): df_ej %&gt;% group_by(genero) #&gt; # A tibble: 5 x 2 #&gt; # Groups: genero [2] #&gt; genero estatura #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 mujer 1.65 #&gt; 2 hombre 1.80 #&gt; 3 mujer 1.70 #&gt; 4 mujer 1.60 #&gt; 5 hombre 1.67 Después se opera sobre cada grupo, creando un resumen a nivel grupo y uniendo los subconjuntos en una base nueva: df_ej %&gt;% group_by(genero) %&gt;% dplyr::summarise(promedio = mean(estatura)) #&gt; # A tibble: 2 x 2 #&gt; genero promedio #&gt; &lt;fct&gt; &lt;dbl&gt; #&gt; 1 hombre 1.74 #&gt; 2 mujer 1.65 3.4 Muertes por armas de fuego en EUA Los datos que vamos a utilizar provienen principalmente de la base de datos de causas múltiples de la muerte de los Centros para el Control y Prevención de la Enfermedad (CDCs) de Estados Unidos, de certificados de defunción de los 50 estados. Se considera que esta fuente de información es la base de datos más completa de muertes por armas de fuego. Para más información puedes leer el artículo: https://fivethirtyeight.com/features/gun-deaths/ Comencemos leyendo los datos para los años 2012, 2013 y 2014: guns_12 &lt;- read_csv(&quot;datos/guns_12.csv&quot;, na = &quot;&quot;) guns_13 &lt;- read_csv(&quot;datos/guns_13.csv&quot;, na = &quot;&quot;) guns_14 &lt;- read_csv(&quot;datos/guns_14.csv&quot;, na = &quot;&quot;) Las tres tablas tienen las mismas variables en el mismo orden. Examinemos la tabla para el año 2012: glimpse(guns_12) #&gt; Observations: 33,096 #&gt; Variables: 40 #&gt; $ res_status &lt;int&gt; 1, 3, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, ... #&gt; $ education_89 &lt;chr&gt; &quot;16&quot;, &quot;13&quot;, &quot;16&quot;, &quot;17&quot;, &quot;12&quot;, &quot;10&quot;, &quot;12&quot;, &quot;12... #&gt; $ education_03 &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ education_flag &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ... #&gt; $ month &lt;chr&gt; &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;02&quot;, &quot;02&quot;, &quot;02&quot;, &quot;02&quot;, &quot;03... #&gt; $ sex &lt;chr&gt; &quot;M&quot;, &quot;F&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, &quot;M&quot;, ... #&gt; $ detail_age &lt;int&gt; 1034, 1021, 1060, 1064, 1031, 1017, 1048, 104... #&gt; $ age_flag &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ age_recode &lt;int&gt; 32, 30, 38, 38, 32, 29, 35, 34, 36, 32, 30, 3... #&gt; $ age_recode2 &lt;chr&gt; &quot;12&quot;, &quot;10&quot;, &quot;18&quot;, &quot;18&quot;, &quot;12&quot;, &quot;09&quot;, &quot;15&quot;, &quot;14... #&gt; $ age_group &lt;chr&gt; &quot;05&quot;, &quot;04&quot;, &quot;08&quot;, &quot;08&quot;, &quot;05&quot;, &quot;04&quot;, &quot;07&quot;, &quot;06... #&gt; $ age_infant &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ death_place &lt;int&gt; 4, 7, 7, 4, 7, 4, 1, 7, 7, 4, 4, 4, 2, 4, 4, ... #&gt; $ marital &lt;chr&gt; &quot;S&quot;, &quot;S&quot;, &quot;M&quot;, &quot;S&quot;, &quot;U&quot;, &quot;S&quot;, &quot;W&quot;, &quot;M&quot;, &quot;M&quot;, ... #&gt; $ day_of_week &lt;int&gt; 6, 4, 7, 7, 1, 7, 5, 1, 7, 5, 1, 5, 4, 4, 5, ... #&gt; $ data_year &lt;int&gt; 2012, 2012, 2012, 2012, 2012, 2012, 2012, 201... #&gt; $ at_work &lt;chr&gt; &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, ... #&gt; $ death_manner &lt;chr&gt; &quot;2&quot;, &quot;2&quot;, &quot;2&quot;, &quot;2&quot;, &quot;2&quot;, &quot;2&quot;, &quot;5&quot;, &quot;2&quot;, &quot;1&quot;, ... #&gt; $ burial &lt;chr&gt; &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, ... #&gt; $ autopsy &lt;chr&gt; &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;Y&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, ... #&gt; $ activity &lt;int&gt; 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, ... #&gt; $ injury_place &lt;int&gt; 0, 4, 8, 0, 8, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, ... #&gt; $ underlying_cause &lt;chr&gt; &quot;X74&quot;, &quot;X74&quot;, &quot;X72&quot;, &quot;X74&quot;, &quot;X72&quot;, &quot;X73&quot;, &quot;Y2... #&gt; $ cause_recode358 &lt;int&gt; 429, 429, 429, 429, 429, 429, 446, 429, 407, ... #&gt; $ cause_recode113 &lt;int&gt; 125, 125, 125, 125, 125, 125, 132, 125, 119, ... #&gt; $ cause_recode130 &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ cause_recode39 &lt;int&gt; 40, 40, 40, 40, 40, 40, 42, 40, 39, 40, 40, 4... #&gt; $ race &lt;chr&gt; &quot;68&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;01&quot;, &quot;03&quot;, &quot;01&quot;, &quot;03... #&gt; $ race_bridged &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ race_flag &lt;chr&gt; &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA&quot;, &quot;NA... #&gt; $ race_recode &lt;int&gt; 2, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, ... #&gt; $ race_recode2 &lt;int&gt; 4, 1, 1, 1, 1, 3, 1, 3, 1, 1, 3, 1, 3, 1, 3, ... #&gt; $ hispanic &lt;int&gt; 100, 100, 100, 100, 100, 100, 100, 100, 100, ... #&gt; $ hispanic_recode &lt;int&gt; 8, 6, 6, 6, 6, 8, 6, 8, 6, 6, 8, 6, 8, 6, 8, ... #&gt; $ intent &lt;chr&gt; &quot;Suicide&quot;, &quot;Suicide&quot;, &quot;Suicide&quot;, &quot;Suicide&quot;, &quot;... #&gt; $ police &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, ... #&gt; $ weapon &lt;chr&gt; &quot;Other/unknown&quot;, &quot;Other/unknown&quot;, &quot;Handgun&quot;, ... #&gt; $ year &lt;int&gt; 2012, 2012, 2012, 2012, 2012, 2012, 2012, 201... #&gt; $ age &lt;int&gt; 34, 21, 60, 64, 31, 17, 48, 41, 50, 30, 21, 4... #&gt; $ place &lt;chr&gt; &quot;Home&quot;, &quot;Street&quot;, &quot;Other specified&quot;, &quot;Home&quot;, ... Para pegar las tablas para los 3 años vamos a utilizar la función bind_rows() del paquete dplyr: guns &lt;- guns_12 %&gt;% bind_rows(guns_13) %&gt;% bind_rows(guns_14) Veamos otro ejemplo de cómo recodificar variables categóricas, en este caso para la variable de nivel educativo: guns &lt;- guns %&gt;% mutate(education = ifelse(education_flag == 1, cut(as.numeric(education_03), breaks = c(0, 2, 3, 5, 8, 9, labels = c(&quot;Less than HS&quot;, &quot;HS/GED&quot;, &quot;Some college&quot;, &quot;BA+&quot;, NA))), cut(as.numeric(education_89), breaks = c(0, 11, 12, 15, 17, 99), labels = c(&quot;Less than HS&quot;, &quot;HS/GED&quot;, &quot;Some college&quot;, &quot;BA+&quot;, NA)))) Otro ejemplo, para la variable de raza: guns &lt;- guns %&gt;% mutate(race = as.integer(race), race = ifelse(hispanic &gt; 199 &amp; hispanic &lt;996, &quot;Hispanic&quot;, ifelse(race == &quot;01&quot;, &quot;White&quot;, ifelse(race == &quot;02&quot;, &quot;Black&quot;, ifelse(as.numeric(race) &gt;= 4 &amp; as.numeric(race) &lt;= 78, &quot;Asian/Pacific Islander&quot;,&quot;Native American/Native Alaskan&quot;)))), race = ifelse(is.na(race), &quot;Unknown&quot;, race)) Para quedarnos con las variables con las que vamos a trabajar utilizamos la función select(): guns &lt;- guns %&gt;% select(year, month, intent, police, sex, age, race, hispanic, place, education) Veamos de nuevo cómo es la estructura de la tabla: str(guns) #&gt; Classes &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 99396 obs. of 10 variables: #&gt; $ year : int 2012 2012 2012 2012 2012 2012 2012 2012 2012 2012 ... #&gt; $ month : chr &quot;01&quot; &quot;01&quot; &quot;01&quot; &quot;02&quot; ... #&gt; $ intent : chr &quot;Suicide&quot; &quot;Suicide&quot; &quot;Suicide&quot; &quot;Suicide&quot; ... #&gt; $ police : int 0 0 0 0 0 0 0 0 0 0 ... #&gt; $ sex : chr &quot;M&quot; &quot;F&quot; &quot;M&quot; &quot;M&quot; ... #&gt; $ age : int 34 21 60 64 31 17 48 41 50 30 ... #&gt; $ race : chr &quot;Asian/Pacific Islander&quot; &quot;Native American/Native Alaskan&quot; &quot;Native American/Native Alaskan&quot; &quot;Native American/Native Alaskan&quot; ... #&gt; $ hispanic : int 100 100 100 100 100 100 100 100 100 100 ... #&gt; $ place : chr &quot;Home&quot; &quot;Street&quot; &quot;Other specified&quot; &quot;Home&quot; ... #&gt; $ education: int 4 3 4 4 2 1 2 2 3 3 ... Supongamos que nos interesa analizar el número de suicidios por arma de fuego para cada uno de los tres años. Esto quiere decir que es necesario agrupar y usar una función de resumen: guns %&gt;% filter(intent == &quot;Suicide&quot;) %&gt;% group_by(year) %&gt;% summarize(suicides = n()) #&gt; # A tibble: 3 x 2 #&gt; year suicides #&gt; &lt;int&gt; &lt;int&gt; #&gt; 1 2012 20663 #&gt; 2 2013 21172 #&gt; 3 2014 21333 Supongamos que deseamos filtar (quitar las observaciones) de homicidios para los cuales se tiene la categoría de “Other”, para ello utilizamos la función filter(): guns_sin_especificar &lt;- guns %&gt;% filter(place != &quot;Other unspecified&quot; &amp; place != &quot;Other specified&quot;) Podemos analizar la siguiente gráfica de mosaico: ggplot(guns_sin_especificar, aes(x=as.factor(place), fill=as.factor(intent))) + geom_bar(position=&#39;fill&#39;) + coord_flip() + theme(aspect.ratio = 1,legend.position=&quot;bottom&quot;, axis.text.y=element_text(color=&#39;black&#39;,size=10), axis.text.x=element_text(color=&#39;black&#39;,size=10), axis.title.x=element_text(size=10), axis.title.y=element_text(size=10), legend.text=element_text(size=10)) + scale_fill_discrete(&quot;&quot;) + ylab(&#39;Proporción&#39;) + xlab(&quot;Lugar&quot;) + ggtitle(&quot;Lugar de homicidios por intención&quot;) Se podría concluir, por ejemplo, que si un homicidio ocurrió en una granja, entonces lo más probable es que haya sido un suicidio. 3.5 El Cuarteto de Anscombe “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey En 1971 un estadístico llamado Frank Anscombe (fundador del departamento de Estadística de la Universidad de Yale) encontró cuatro conjuntos de datos (I, II, III y IV). Cada uno consiste de 11 observaciones y tienen las mismas propiedades estadísticas. anscombe \\(x_1\\) \\(y_1\\) \\(x_2\\) \\(y_2\\) \\(x_3\\) \\(y_3\\) \\(x_4\\) \\(y_4\\) 10.0 8.04 10.0 9.14 10.0 7.46 8.0 6.58 8.0 6.95 8.0 8.14 8.0 6.77 8.0 5.76 13.0 7.58 13.0 8.74 13.0 12.74 8.0 7.71 9.0 8.81 9.0 8.77 9.0 7.11 8.0 8.84 11.0 8.33 11.0 9.26 11.0 7.81 8.0 8.47 14.0 9.96 14.0 8.10 14.0 8.84 8.0 7.04 6.0 7.24 6.0 6.13 6.0 6.08 8.0 5.25 4.0 4.26 4.0 3.10 4.0 5.39 19.0 12.50 12.0 10.84 12.0 9.13 12.0 8.15 8.0 5.56 7.0 4.82 7.0 7.26 7.0 6.42 8.0 7.91 5.0 5.68 5.0 4.74 5.0 5.73 8.0 6.89 Por ejemplo, todos los conjuntos de datos I, II, III, y IV, tienen exactamente misma media de \\(x\\), \\(\\bar{x}_i = \\bar{x}_j\\), y misma media de \\(y\\), \\(\\bar{y}_i = \\bar{y}_j\\) para toda \\(i,j=1,2,3,4\\). Además, se puede ver que todos tienen misma varianza muestral de \\(x\\) y de \\(y\\). En cada conjunto de datos la correlación entre \\(x\\) y \\(y\\) es la misma, y por consiguiente, los coeficientes de la regresión lineal \\(\\beta_0\\) y \\(\\beta_1\\) también son iguales. Propiedad Valor Media de \\(x\\) 9 Varianza muestral de \\(x\\) 11 Media de \\(y\\) 7.50 Varianza muestral de \\(y\\) 4.12 Correlación entre \\(x\\) y \\(y\\) 0.816 Línea de regresión lineal \\(y = 3.00 + 0.500x\\) ¿En qué son diferentes estos conjuntos de datos? ¿Es posible con la información anterior concluir que los cuatro conjuntos de datos deben ser similares? ¿Que tengan estadísticas similares asegura que provienen de un mismo modelo? Cuando analizamos los datos de manera gráfica en un histograma encontramos rápidamente que los conjuntos de datos son muy distintos. “Una imagen dice más que mil palabras.” En la gráfica del primer conjunto de datos, se ven datos como los que se tendrían en una relación lineal simple con un modelo que cumple los supuestos de normalidad. La segunda gráfica (la de arriba a la derecha) muestra unos datos que tienen una asociación pero definitivamente no es lineal y el coeficiente de correlación no es relevante en este caso. En la tercera gráfica (abajo a la izquierda) están puntos alineados perfectamente en una línea recta, excepto por uno de ellos. En la última gráfica podemos ver un ejemplo en el cual basta tener una observación atípica para que se produzca un coeficiente de correlación alto aún cuando en realidad no existe una asociación lineal entre las dos variables. Edward Tufte usó el cuarteto en la primera página del primer capítulo de su libro The Visual Display of Quantitative Information, para enfatizar la importancia de mirar los datos antes de analizarlos. (Tufte and Graves-Morris 2014) 3.6 The Grammar of Graphics de Leland Wilkinson Una ventaje de ggplot es que implementa una gramática de gráficas de forma organizada y con sentido orientada a esta forma de asociar variables con geometrías (Wilkinson 2005). En lugar de tener una lista enorme y conceptualmente plana de opciones para hacer gráficas, ggplot parte en varios pasos el procedimiento para realizar una gráfica: primero, se debe proporcionar información a la función sobre qué datos y qué variables se van a utilizar. segundo, se debe vincular las variables que se van a utilizar en la gráfica con las características específicas que se requiere tener en la gráfica. tercero, se debe elegir una función geom_ para indicar qué tipo de gráfica se dibujará, un diagrama de dispersión, una gráfica de barras o un diagrama de caja. En general, según Leland Wilkinson, hay dos principios generales que se deben seguir: La geometría utilizada debe coincidir con los datos que se están visualizando. La geometría utilizada debe ser fácil de interpretar. 3.7 ggplot Vamos a ver cómo visualizar los datos usando ggplot2. R tiene varios sistemas para hacer gráficas, pero ggplot2 es uno de los más elegantes y versátiles. ggplot2 implementa la gramática de gráficas, un sistema consistente para describir y construir gráficas. Con ggplot2, pueden hacerse cosas más rápido, aprendiendo un único sistema consistente, y aplicándolo de muchas formas. Para mayor información sobre los fundamentos teóricos de ggplot2 se recomienda leer el artículo titulado “The Layered Grammar of Graphics”, visitando la siguiente liga: http://vita.had.co.nz/papers/layered-grammar.pdf. Lo más importante para entender ggplot es comprender la estructura y la lógica para hacer una gráfica. El código debe decir cuáles son las conexiones entre las variables en los datos y los elementos de la gráfica tal como los vamos a ver en la pantalla, los puntos, los colores y las formas. En ggplot, estas conexiones lógicas entre los datos y los elementos de la gráfica se denominan asignaciones estéticas o simplemente estéticas. Se comienza una gráfica indicando a ggplot cuáles son los datos, qué variables en los datos se van a usar y luego cómo las variables en estos datos se mapean lógicamente en la estética de la gráfica. Luego, toma el resultado y se indica qué tipo de gráfica se desea, por ejemplo, un diagrama de dispersión, una gráfica de barras, o una gráfica de línea. En ggplot este tipo general de gráficas se llama geom. Cada geom tiene una función que lo crea. Por ejemplo, geom_point() hace diagramas de dispersión, geom_bar() hace gráficas de barras, geom_line() hace gráficas de línea, y así sucesivamente. Para combinar estas dos piezas, el objeto ggplot() y el geom se suman literalmente en una expresión, utilizando el símbolo “+”. ¿Qué geometrías son más adecuadas para cada tipo de variable? Usaremos los datos de gapminder para hacer nuestras primeras gráficas. Vamos a asegurarnos de que la biblioteca que contiene los datos esté cargada: library(gapminder) Esto hace que una tabla de datos esté disponible para su uso. Para ver un pedazo de la tabla utilizamos la función glimpse(): library(tidyverse) glimpse(gapminder) #&gt; Observations: 1,704 #&gt; Variables: 6 #&gt; $ country &lt;fct&gt; Afghanistan, Afghanistan, Afghanistan, Afghanistan, ... #&gt; $ continent &lt;fct&gt; Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia, Asia... #&gt; $ year &lt;int&gt; 1952, 1957, 1962, 1967, 1972, 1977, 1982, 1987, 1992... #&gt; $ lifeExp &lt;dbl&gt; 28.8, 30.3, 32.0, 34.0, 36.1, 38.4, 39.9, 40.8, 41.7... #&gt; $ pop &lt;int&gt; 8425333, 9240934, 10267083, 11537966, 13079460, 1488... #&gt; $ gdpPercap &lt;dbl&gt; 779, 821, 853, 836, 740, 786, 978, 852, 649, 635, 72... Supongamos que queremos graficar la esperanza de vida vs el PIB per cápita para todos los años y países en los datos. Haremos esto creando un objeto que contenga parte de la información necesario y a partir de ahí vamos a construir nuestra gráfica. Primero debemos indicarle a la función ggplot() qué datos estamos utilizando: p &lt;- ggplot(data = gapminder) p En este punto, ggplot sabe cuáles son nuestros datos, pero no cuál es el mapeo, es decir, qué variables de los datos deben correlacionarse con qué elementos visuales de la trama. Tampoco sabe qué tipo de trama queremos. En ggplot, las asignaciones se especifican utilizando la función aes(). Me gusta esta: Hasta este punto ggplot conoce qué datos se van a utilizar para hacer la gráfico, pero no el mapeo o asociación de qué variables se van a relacionar con los elementos visuales de la gráfica. Tampoco se sabe qué tipo de gráfica se va a hacer. En ggplot, las asignaciones se especifican utilizando la función aes(): p &lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp)) El argumento mapping = aes(...) vincula variables a cosas que se van a ver en la gráfica. Los valores de \\(x\\) y \\(y\\) son los más obvios. Otras asignaciones estéticas pueden incluir, por ejemplo, el color, la forma, el tamaño y el tipo de línea (si una línea es sólida o discontinua, o algún otro patrón). Un mapeo no dice directamente qué formas o colores van a aparecer en la gráfica. Más bien, dicen qué variables en los datos serán representadas por los elementos visuales como color, forma o un punto. ¿Qué sucede si simplemente escribimos p en la consola y ejecutamos? p El objeto p ha sido creado por la función ggplot(), y ya tiene información sobre las asignaciones que queremos, junto con mucha otra información añadida por defecto. (Si quiere ver cuánta información hay en el objeto p, intente solicitar str(p)). Sin embargo, no le hemos dado ninguna instrucción acerca de qué tipo de diagrama dibujar. Necesitamos agregar una capa a la trama. Esto significa elegir una función geom_*. Usaremos geom_point(). Sabe cómo tomar valores xey y trazarlos en un diagrama de dispersión. Se ha creado el objeto p utilizando la función ggplot() y este objeto ya tiene información de las asignacionesque queremos. Sin embargo, no se le ha dado ninguna instrucción sobre qué tipo de gráfica se quiere dibujar. Necesitamos agregar una capa a la gráfica. Esto se hace mediante el símbolo +. Esto significa elegir una función geom_. Utilizaremos geom_point() para hacer un diagrama de dispersión. p + geom_point() El mapeo de las propiedades estéticas se denomina escalamiento y depende del tipo de variable, las variables discretas (por ejemplo, genero, escolaridad, país) se mapean a distintas escalas que las variables continuas (variables numéricas como edad, estatura, etc.), los defaults para algunos atributos son (estos se pueden modificar): aes Discreta Continua Color (color) Arcoiris de colores Gradiente de colores Tamaño (size) Escala discreta de tamaños Mapeo lineal entre el área y el valor Forma (shape) Distintas formas No aplica Transparencia (alpha) No aplica Mapeo lineal a la transparencia Los geoms controlan el tipo de gráfica: p + geom_smooth() Podemos ver de inmediato que algunos de estos geoms hacen mucho más que simplemente poner puntos en una cuadrícula. Aquí geom_smooth() ha calculado una línea suavizada y la región sombreada representa el error estándar de la línea suavizada. Si queremos ver los puntos de datos y la línea juntos, simplemente agregamos geom_point() de nuevo como una capa adicional utilizando +: p &lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp)) p + geom_point() + geom_smooth() El mensaje de la consola de R nos dice que la función geom_smooth() está utilizando un método llamado gam, que en este caso significa que se ajusta a un modelo aditivo generalizado. Esto sugiere que tal vez haya otros métodos en geom_smooth(). Podemos intentar agregar method = &quot;lm&quot; (para “modelo lineal”) como un argumento para geom_smooth(): p &lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp)) p + geom_point() + geom_smooth(method=&quot;lm&quot;) Se puede agregar al mapeo del color de la línea el continente y del relleno de los puntos (fill) también el continente para obtener una gráfica que nos dé una idea más general de como se tiene esta relación por continente. p &lt;- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y = lifeExp, color = continent, fill = continent)) p + geom_point(size = 0.5) + geom_smooth(method=&#39;loess&#39;) + scale_x_log10() 3.8 Un histograma de las muertes en Iraq Iraq Body Count (IBC) mantiene la base de datos pública más grande sobre muertes violentas de civiles desde la invasión en Iraq del 2003. Los datos de IBC provienen de informes de medios cruzados, de hospitales, morgue, ONG y cifras o registros oficiales. Para mayor información puedes visitar https://www.iraqbodycount.org/. Los datos los leemos con la función read_csv() de la librería readr: ibc &lt;- read_csv(&quot;datos/ibc-incidents-2016-8-8.csv&quot;) ibc %&gt;% sample_n(10) %&gt;% knitr::kable(&quot;html&quot;) %&gt;% kableExtra::kable_styling(font_size = 10) IBC_code Start_Date End_Date Time Location Target Weapons Deaths_recorded Sources m2046 2-Sep-13 2-Sep-13 PM 13 Street, Al-Bayaa, southwest Baghdad employee at the Ministry of Education in front of his home gunfire 1 AIN 2 Sep, Sotaliraq 2 Sep d2329 9-Feb-07 9-Feb-07 NA near Al-Shimal Garage, Mosul NA explosive device 1 MO 09 Feb, WP 04 Apr (MoH) k7919 29-Oct-07 29-Oct-07 8:00-9:00 AM Ishbilliyah Square, central Baquba police recruits awaiting training suicide bomber 28 AFP 31 Oct, NINA 29 Oct, REU 29 Oct, DPA 29 Oct s1254 22-Apr-15 22-Apr-15 NA Al-Mansour, west Baghdad civilian in Al-Mansour drive-by shooting 1 NINA 22 Apr h0379 25-Feb-14 25-Feb-14 NA Saba’ Abkar, north Baghdad Mohamed Taha Mohamed, Iraqi Sports Channel Director car in hit-and-run 0 AIN 25 Feb, INN 25 Feb k18626 13-Mar-12 14-Mar-12 NA Hoswa, Karma, east of Falluja civilian car roadside bomb 1 AKnews 14 Mar, Al-Shorfa 13 Mar k1708 1-Aug-05 1-Aug-05 PM west Baghdad Shaikh Akil al-Ma’adhidi, a cleric from al-Muhajirin mosque, brother also killed gunfire 2 Al-Jaz 02 Aug, AFP 02 Aug k10200 15-Apr-08 15-Apr-08 NA al-Zahraa, east Mosul ‘operator for a private electricity generator’ gunfire 1 VOI 15 Apr m3013 2-Dec-13 2-Dec-13 AM Refaq, east Mosul civilian in his car magnetic bomb 1 AIN 2 Dec, NINA 2 Dec k3289e 18-Jun-06 18-Jun-06 NA Al-Sha’b, Baghdad bodies found shot, tortured gunfire, executed, tortured 1 Al-Shar 18 Jun, DPA 18 Jun Primero filtramos los incidentes en los que hubo al menos cinco fatalidades: ibc_fatalidades &lt;- ibc %&gt;% filter(Deaths_recorded &gt;= 5) Una forma fácil de dibujar un histograma es utilizando la geometría geom_histogram(): ggplot(ibc_fatalidades, aes(x=Deaths_recorded)) + geom_histogram() + scale_x_log10() #&gt; `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 3.9 Inglehart–Welzel: un mapa cultural del mundo Los teóricos de la modernización de Karl Marx a Daniel Bell han sostenido que el desarrollo económico trae cambios culturales penetrantes. Pero otros, desde Max Weber hasta Samuel Huntington, han afirmado que los valores culturales son una influencia duradera y autónoma sobre la sociedad. En un artículo de la ciencia política, los autores Inglehart y Welzel de la Universidad de Michigan, afirman que el desarrollo económico está vinculado a cambios sistemáticos en los valores culturales. Utilizando los datos de la encuesta de valores mundiales WVS (World Values Survey), crearon dos índices: uno que pone énfasis en valores tradicionales y otro que pone énfasis en valores de supervivencia. Características de valores tradicionales en una sociedad: fuerte sentimiento de orgullo nacional le da más importancia a que un niño aprenda obediencia y fé religiosa en lugar de independencia y determinación el aborta nunca es justificada fuerte sentido de orgullo nacional favorece más el respeto por la autoridad. Los valores seculares o racionales enfatizan lo opuesto. Características de valores de supervivencia en una sociedad: le da prioridad a la economía sobre la calidad de vida se describe como no muy feliz aún no ha firmado o jamás firmaría una petición la homosexualidad nuna es justificada se debe ser muy cuidadoso al confiar en las personas. Los valores de autoexpresión enfatizan lo opuesto. Ronald Inglehart en su artículo de 1971 The silent revolution in Europe. Intergenerational change in post-industrial societies. publicado en el American Political Science Review, propone una medida de los valores postmaterialistas de una sociedad. Esta medida se conoce como índice post-materialista de Inglehart (4-item) . La siguiente pregunta de la encuesta es el punto de partida para medir el materialismo o el post-materialismo: “Si tuvieras que elegir entre las siguientes cosas, ¿cuáles son las dos que te parecen más deseables?” Mantener el orden en la nación. Dando a la gente más voz en importantes decisiones políticas. La lucha contra el aumento de los precios. Proteger la libertad de expresión. La medida se basa entonces en la observación de que dos de las cuatro opciones, la primera y la tercera, se consideran como “preferencia hacia el valor adquisitivo en relación con la protección y adquisición de bienes”. Si se eligen las dos opciones postmaterialistas, entonces la puntuación es 3. Si se elige sólo una opción post-materialista, entonces la puntuación es 2, y de lo contrario es 1. Como todas las opciones podrían ser deseables, la medida se relaciona con la “prioridad relativa” de las elecciones materialistas sobre la segunda y cuarta y aborda las concesiones que típicamente conllevan las decisiones políticas. La conceptualización del postmaterialismo a lo largo de un continuo unidimensional está cerca del concepto de la “jerarquía de necesidades” propuesta por Maslow. library(tidyverse) factores_inglehart &lt;- read_csv(file = &quot;datos/factores_inglehart.csv&quot;) glimpse(factores_inglehart) #&gt; Observations: 60 #&gt; Variables: 6 #&gt; $ country_code &lt;int&gt; 112, 12, 152, 156, 158, 170, 196, 218,... #&gt; $ country &lt;chr&gt; &quot;Belarus&quot;, &quot;Algeria&quot;, &quot;Chile&quot;, &quot;China&quot;... #&gt; $ region &lt;chr&gt; &quot;Eastern Europe&quot;, &quot;Northern Africa&quot;, &quot;... #&gt; $ reg &lt;chr&gt; &quot;Europe &amp; Eurasia&quot;, &quot;Middle East &amp; Nor... #&gt; $ traditional_secular &lt;dbl&gt; 0.91766, -0.68003, 0.14525, 1.45307, 1... #&gt; $ survival_selfexpression &lt;dbl&gt; -0.3187, -0.3300, 1.5769, -0.5487, 0.9... 3.9.1 Creando un ggplot Para graficar factores_inglehart, ejecuta este código para poner survival_selfexpression en el eje x (eje horizontal) y traditional_secular en el eje y (eje vertical): ggplot(data = factores_inglehart) + geom_point(mapping = aes(x = survival_selfexpression, y = traditional_secular)) 3.9.2 Mapeos: Aesthetics “The greatest value of a picture is when it forces us to notice what we never expected to see.” — John Tukey En la gráfica de abajo, un grupo de puntos (en rojo) parece estar fuera de la tendencia lineal. Estos países tienen menores valores de supervivencia de lo que esperaríamos de acuerdo a sus mayores valores de tradicionalismo. Podemos formular la hipótesis de que se trata de países latinoamericanos. Una forma de probar esta hipótesis es con la variable reg. La variable reg del conjunto de datos factores_inglehart clasifica a los países de acuerdo a su región geográfica. Podemos agregar una tercera variable, como reg, a un diagrama de dispersión bidimensional asignándolo a un aesthetic o mapeo. Un mapeo es una propiedad visual de los objetos en la gráfica. Un mapeo incluye cosas como el tamaño, la forma o el color de los puntos. Puede mostrar un punto (como el que se muestra a continuación) de diferentes maneras cambiando los valores de sus propiedades de mapeos. Aquí cambiamos los niveles de tamaño, forma y color de un punto para hacer que el punto sea pequeño, triangular o azul: Podemos transmitir información sobre los datos mapeando los aesthetics en la gráfica a las variables del data frame. Por ejemplo, podemos asignar los colores de los puntos a la variable reg para revelar la región de cada país. ggplot(data = factores_inglehart) + geom_point(mapping = aes(x = survival_selfexpression, y = traditional_secular, color=reg)) Para asignar una característica a una variable, asociamos el nombre del mapeo al nombre de la variable dentro de aes(). ggplot2 asignará automáticamente un nivel único de dicha característica (o mapeo) a cada valor único de la variable, un proceso conocido como escalamiento. ggplot2 también agregará una leyenda que explique qué niveles corresponden a qué valores. También podríamos agregar etiquetas: 3.9.2.1 Objetos geométricos ¿En qué se parecen las siguiente dos gráficas? Ambas gráficas contienen la misma variable x, la misma variable y, y ambas describen los mismos datos. Pero las gráficas no son idénticas. Cada una utiliza un objeto visual diferente para representar los datos. En la sintaxis de ggplot2, decimos que usan diferentes geoms. Un geom es un objeto geométrico que una gráfica utiliza para representar a los datos. La gente a menudo describe las gráficas por el tipo de geometría que usa la gráfica. Por ejemplo, las gráficas de barras usan geometrías de barras, los gráficos de línea utilizan geoms de línea, los boxplots usan geoms de boxplot, y así sucesivamente. Los diagramas de dispersión rompen la tendencia; Utilizan la geometría de punto. La gráfica de la izquierda utiliza el punto geom, y la gráfica de la derecha utiliza el geom de smooth, una línea ajustada a los datos. Para hacer las gráficas mostradas arriba se puede utilizar el siguiente código. #izquierda ggplot(data = factores_inglehart) + geom_point(mapping = aes(x = survival_selfexpression, y = traditional_secular)) #derecha ggplot(data = factores_inglehart) + geom_smooth(mapping = aes(x = survival_selfexpression, y = traditional_secular), method = &quot;loess&quot;) Cada función geom en ggplot2 toma un argumento mapping. Sin embargo, no todas las propiedades de aesthetics funciona con cada geom. Podríamos cambiar la forma de un punto, pero no la “forma” de una línea. Por otro lado, podríamos establecer el tipo de línea de una línea. geom_smooth() dibujará una línea diferente, con un tipo de línea diferente, para cada valor único de la variable que se asigna al tipo de línea. ggplot(data = factores_inglehart) + geom_smooth(mapping = aes(x = survival_selfexpression, y = traditional_secular, linetype = reg), method = &quot;loess&quot;, se = F, span = 1) Aquí geom_smooth() separa los países en líneas basándose en su valor de reg (región geográfica). Podemos superponer las líneas encima de los datos sin procesar y luego coloreándolo todo de acuerdo a reg. Para mostrar varios geoms en la misma gráfica, agregamos varias funciones geom a ggplot(): ggplot(data = factores_inglehart) + geom_point(mapping = aes(x = survival_selfexpression, y = traditional_secular)) + geom_smooth(mapping = aes(x = survival_selfexpression, y = traditional_secular), method = &quot;loess&quot;) Este código genera la misma gráfica que el código anterior: ggplot(data = factores_inglehart, mapping = aes(x = survival_selfexpression, y = traditional_secular)) + geom_point() + geom_smooth(method = &quot;loess&quot;) Si colocan asignaciones en una función geom, ggplot2 las tratará como asignaciones locales para cada capa, de tal forma que usará estas asignaciones para extender o sobrescribir las asignaciones globales para esa capa solamente. Esto hace posible visualizar elementos diferentes en diferentes capas. ggplot(data = factores_inglehart, mapping = aes(x = survival_selfexpression, y = traditional_secular)) + geom_point(mapping = aes(color = reg)) + geom_smooth(method = &quot;loess&quot;) 3.10 Poniendo todo junto El Billboard Hot 100 es un ranking semanal publicado en Estados Unidos y es utilizado en la industria de la música como una medida del rendimiento de las canciones en ventas y en streaming en el país. Por ejemplo, en la página https://www.billboard.com/charts/hot-100/2000-03-18 se puede consultar el chart en la semana del 18 de marzo del año 2000. Con el siguiente código podemos descargar los datos del Billboard Hot 100 para cada semana para obtener un conjunto de datos que vamos a utilizar más adelante. suppressPackageStartupMessages({ library(tidyverse) library(rvest) library(lubridate) }) extract_song_info &lt;- function(html_row) { node_primary &lt;- html_row %&gt;% html_node(css = &#39;.chart-row__primary&#39;) node_secondary &lt;- html_row %&gt;% html_node(css = &#39;.chart-row__secondary&#39;) song_features &lt;- c( &#39;.chart-row__history--rising&#39;, &#39;.chart-row__bullet&#39;, &#39;.chart-row__history--falling&#39;, &#39;.chart-row__award-indicator&#39;, &#39;.chart-row__new-indicator&#39;, &#39;.chart-row__history--steady&#39;) feat_search &lt;- map(.x = song_features, .f = function(y) { node_primary %&gt;% html_nodes(css = y) }) song_node &lt;- node_primary %&gt;% html_node(css = &#39;.chart-row__main-display&#39;) info_node &lt;- song_node %&gt;% html_node(css = &#39;.chart-row__container&#39;) song_name_node &lt;- info_node %&gt;% html_node(css = &#39;.chart-row__song&#39;) song_artist_node &lt;- info_node %&gt;% html_node(css = &#39;.chart-row__artist&#39;) song_stats &lt;- node_secondary %&gt;% html_node(css = &#39;.chart-row__stats&#39;) last_week &lt;- song_stats %&gt;% html_node(css = &#39;.chart-row__last-week .chart-row__value&#39;) %&gt;% html_text() peak_position &lt;- song_stats %&gt;% html_node(css = &#39;.chart-row__top-spot .chart-row__value&#39;) %&gt;% html_text() wks_on_chart &lt;- song_stats %&gt;% html_node(css = &#39;.chart-row__weeks-on-chart .chart-row__value&#39;) %&gt;% html_text() current_week_rank &lt;- node_primary %&gt;% html_node(css = &#39;.chart-row__current-week&#39;) %&gt;% html_text() artist &lt;- song_artist_node %&gt;% html_text() %&gt;% str_replace_all(&#39;\\n&#39;,&#39;&#39;) name &lt;- song_name_node %&gt;% html_text() %&gt;% str_replace_all(&#39;\\n&#39;,&#39;&#39;) song &lt;- tibble(current_week_rank = as.character(current_week_rank), name = str_trim(as.character(name)), artist = str_trim(as.character(artist)), rising = length(feat_search[[1]]) &gt; 0, steady = length(feat_search[[6]]) &gt; 0, falling = length(feat_search[[3]]) &gt; 0, gains_performance = length(feat_search[[2]]) &gt; 0, award = length(feat_search[[4]]) &gt; 0, hot_debut = length(feat_search[[5]]) &gt; 0, last_week = as.character(last_week), peak_position = as.character(peak_position), wks_on_chart = as.character(wks_on_chart) ) cat(sprintf(&#39;%-3s\\t %-40s\\t%s\\n&#39;, song$current_week_rank, song$artist, song$name)) song } billboard_weekchart &lt;- function(fecha){ cat(sprintf(&#39;\\n\\n Fecha: \\t%s\\n\\n&#39;, toString(fecha))) # url base del Billboard Hot 100 base_url &lt;- &quot;http://www.billboard.com/charts/hot-100/&quot; current_url &lt;- paste0(base_url, fecha) webpage &lt;- tryCatch( { Sys.sleep(5) read_html(current_url); }, error=function(cond) { message(&quot;Error: Webpage did not respond succesfully.&quot;) message(cond) cat(&#39;\\n\\n&#39;) return(NA) }, finally={ cat(&#39;\\n&#39;) } ) if(length(webpage) &gt; 1){ chart &lt;- html_nodes(webpage, css=&#39;.chart-data&#39;) rows &lt;-html_nodes(chart, css=&#39;.chart-row&#39;) week_songs &lt;- map_df(.x = rows, .f = extract_song_info) fecha_df &lt;- data.frame(fecha=rep(fecha,nrow(week_songs))) week_songs &lt;- cbind(fecha_df, week_songs) }else{ write(toString(fecha), file=&quot;/home/andreu/scripts/billboard/missing.txt&quot;, append = T) Sys.sleep(60) week_songs &lt;- NULL } if(length(week_songs) &gt; 0){ write_csv(x = week_songs, path = paste0(&quot;/home/andreu/scripts/billboard/data/&quot;,fecha,&quot;.csv&quot;)) val = T }else{ val = F } val } billboard_alltime &lt;- function(start_date = ymd(&#39;1958-08-04&#39;), current_date = ymd(&#39;2018-02-03&#39;)){ file.create(&quot;/home/andreu/scripts/billboard/missing.txt&quot;) fechas &lt;- seq(start_date, current_date, by = &#39;1 week&#39;) alltime_songs &lt;- map_lgl(.x = fechas, .f = billboard_weekchart) alltime_songs } alltime_songs &lt;- billboard_alltime(start_date = ymd(&#39;2018-02-03&#39;)) paths &lt;- dir(&quot;/home/andreu/scripts/billboard/data/&quot;, pattern = &quot;\\\\.csv$&quot;, full.names = TRUE) billboard &lt;- map_df(paths, read_csv, col_types=paste(rep(&#39;c&#39;, 13), collapse=&#39;&#39;)) No es necesario entender a profundidad el código utilizado para parsear el html de cada página de Billboard, sin embargo, es interesante ver el uso de las funciones map, map_lgl, y map_df en el fragmento de código anteior. La función map se utiliza en la llamada a la primera función extract_song_info. Primero se definen tags del html que se necesitan parsear y posteriormente se utiliza map para buscar cada uno dentro del texto plano en html. La función map_df se utiliza para aplicar cada elemento (rengón) del html en una fecha dada la función extract_song_info y el resultado de aplicar esta función a cada renglón del html da como resultado un data frame con los datos de la información de cada canción para cada fecha. Posteriormente, este conjunto de datos se guarda en formato csv. La función map_lgl aplica la función billboard_weekchart a cada elemento de la lista de fecha y regresa un vector lógico que indica si el parseo del html tuvo éxito para cada una de las fechas. La función map_df al final del fragmento de código lee todos los archivos correspondientes a las fechas utilizadas y como resultado junta todos los data frames en uno solo. Una muestra de los datos obtenidos se puede ver en la siguiente tabla: billboard %&gt;% sample_n(10) %&gt;% knitr::kable(&quot;html&quot;) %&gt;% kableExtra::kable_styling(font_size = 10) fecha current_week_rank name artist rising steady falling gains_performance award hot_debut last_week peak_position wks_on_chart 2010-06-21 23 Undo It Carrie Underwood TRUE FALSE FALSE TRUE FALSE FALSE 25 23 7 1996-11-18 59 Knocks Me Off My Feet Donell Jones TRUE FALSE FALSE TRUE FALSE FALSE 67 59 4 2007-04-23 19 Go Getta Young Jeezy Featuring R. Kelly FALSE FALSE TRUE FALSE FALSE FALSE 18 18 13 1996-07-01 13 Twisted Keith Sweat TRUE FALSE FALSE TRUE FALSE FALSE 21 13 3 1968-04-22 41 She’s Lookin’ Good Wilson Pickett TRUE FALSE FALSE FALSE FALSE FALSE 45 41 3 1980-04-21 18 Hurt So Bad Linda Ronstadt TRUE FALSE FALSE FALSE FALSE FALSE 23 18 3 1965-12-27 3 I Got You (I Feel Good) James Brown And The Famous Flames FALSE TRUE FALSE FALSE FALSE FALSE 3 3 8 2006-01-16 45 Heard ’Em Say Kanye West Featuring Adam Levine FALSE FALSE TRUE FALSE FALSE FALSE 40 26 13 1967-04-24 8 The Happening The Supremes TRUE FALSE FALSE FALSE FALSE FALSE 11 8 4 1980-04-14 75 Steal Away Robbie Dupree TRUE FALSE FALSE FALSE FALSE FALSE 85 75 2 Veamos de qué tipos son cada una de las columnas en los datos. Podemos usar nuevamente la función glimpse: glimpse(billboard) #&gt; Observations: 310,500 #&gt; Variables: 13 #&gt; $ fecha &lt;date&gt; 1958-08-04, 1958-08-04, 1958-08-04, 1958-08... #&gt; $ current_week_rank &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1... #&gt; $ name &lt;chr&gt; &quot;Poor Little Fool&quot;, &quot;Patricia&quot;, &quot;Splish Spla... #&gt; $ artist &lt;chr&gt; &quot;Ricky Nelson&quot;, &quot;Perez Prado And His Orchest... #&gt; $ rising &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ steady &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ falling &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ gains_performance &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ award &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ hot_debut &lt;lgl&gt; FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FA... #&gt; $ last_week &lt;chr&gt; &quot;--&quot;, &quot;--&quot;, &quot;--&quot;, &quot;--&quot;, &quot;--&quot;, &quot;--&quot;, &quot;--&quot;, &quot;-... #&gt; $ peak_position &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1... #&gt; $ wks_on_chart &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... Supongamos que deseamos hacer una gráfica de barras del número de semanas en el top 10 para los 20 artistas que más semanas han permanecido en el top 10. artistas_top10 &lt;- billboard %&gt;% filter(current_week_rank &gt;= 10) %&gt;% group_by(artist) %&gt;% summarise(num_semanas_top_10 = n()) %&gt;% arrange(desc(num_semanas_top_10)) %&gt;% top_n(20, wt = num_semanas_top_10) Para hacer la gráfica con ggplot debemos primero ordenar los artistas de manera descendente por el número de semanas en el top 10. Para esto utilizamos la función de fct_reorder del paquete forcats. artistas_top10$artist &lt;- forcats::fct_reorder(.f = artistas_top10$artist, .x = artistas_top10$num_semanas_top_10, .desc = T) Por último, hacemos la gráfica indicando a geom_bar que la transformación estadística que debe usar es la de identity, es decir, la longitud de la barra corresponde al valor absoluto de la variable num_semanas_top_10: ggplot(artistas_top10, aes(x = artist, y = num_semanas_top_10)) + geom_bar(stat = &#39;identity&#39;) + theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) 3.11 Tarea Utiliza los datos del Billboard Hot 100 para contestar las siguientes preguntas: ¿Cuáles son los 10 artistas que han tenido más #1’s en la historia de Billboard? ¿Cuáles son los 10 artistas que han tenido más #1’s en los últimos 10 años? Realiza una gráfica de barras para responder a la pregunta. ¿Cómo se ha comportado el número promedio de semanas que una canción ha estado en el #1 a través de la historia? ¿Existe alguna relación entre el número de presentaciones en vivo (gains_performance) y el número de semanas que permance una canción en #1 desde 1980? Para algunos últimos singles que han permanecido más semanas en el Hot 100 en algunos meses realiza una gráfica de su posición en el tiempo semana a semana. Puedes elegir alguna fecha que te interese, la fecha de tu cumpleaños o la fecha en que estuvo en #1 tu canción favorita. Referencias "],
["teorema-del-limite-central.html", "Clase 4 Teorema del Límite Central 4.1 La distribución de la media 4.2 ¿De dónde proviene la distribución normal? 4.3 Otras observaciones 4.4 Diagramas de caja y brazos 4.5 Gráficas de cuantiles teóricos 4.6 Gráficas de cuantiles para un conjunto de datos 4.7 Gráficas qq-normales 4.8 El TLC y errores estándar 4.9 Ejemplo 4.10 Tarea", " Clase 4 Teorema del Límite Central .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } A continuación discutiremos el Teorema del Límite Central (CLT), el cual nos ayuda a realizar cálculos importantes relacionados con la probabilidad de las cosas. Se utiliza con frecuencia en la ciencia para probar hipótesis estadísticas. Para utilizarlo, tenemos que hacer diferentes supuestos. Sin embargo, si los supuestos son verdaderos, entonces podemos calcular probabilidades exactas de eventos mediante el uso de una fórmula matemática muy sencilla. 4.1 La distribución de la media El Teorema del Límite Central El CLT es uno de los resultados matemáticos más utilizados en la ciencia. Nos dice que cuando el tamaño de la muestra es grande, la media \\(\\bar{Y}\\) de una muestra aleatoria sigue una distribución normal con centro en la media poblacional \\(\\mu_Y\\) y con desviación estándar igual a la desviación estándar de la población \\(\\sigma_Y\\) dividida por la raíz cuadrada del tamaño de la muestra \\(\\sqrt{N}\\). Nos referimos a la desviación estándar de la distribución de una variable aleatoria como el error estándar de la variable aleatoria. Si tomamos muchas muestras de tamaño \\(N\\), entonces la cantidad: \\[ \\frac{\\bar{Y} - \\mu}{\\sigma_Y/\\sqrt{N}} \\] se aproxima con una distribución normal con centro en 0 y con desviación estándar 1. Ahora nos interesa la diferencia entre dos medias muestrales. Aquí, de nuevo, un resultado matemático nos puede ayudar. Si tenemos dos variables aleatorias \\(X\\) y \\(Y\\) con medias \\(\\mu_X\\) y \\(\\mu_Y\\) y varianzas \\(\\sigma_X\\) y \\(\\sigma_Y\\) respectivamente, entonces tenemos el siguiente resultado: la media de la suma \\(Y + X\\) es la suma de las medias \\(\\mu_Y + \\mu_X\\). Esto implica que la media de \\(Y - X = Y + aX\\) con \\(a = -1\\), es \\(\\mu_Y - \\mu_X\\). Sin embargo, el siguiente resultado quizás no sea tan intuitivo. Si \\(X\\) y \\(Y\\) son independientes entre sí, entonces la varianza de \\(Y + X\\) es la suma de las varianzas \\(\\sigma_Y^2 + \\sigma_X^2\\). Esto implica que la varianza de la diferencia \\(Y - X\\) es la varianza de \\(Y + aX\\) con \\(a = -1\\) que es \\(\\sigma^2_Y + a^2\\sigma_X^2 = \\sigma ^ 2_Y + \\sigma_X ^ 2\\). Así que la varianza de la diferencia es también la suma de las varianzas. Si esto parece un resultado contraintuitivo, recordemos que si \\(X\\) y \\(Y\\) son independientes entre sí, el signo realmente no importa. Finalmente, otro resultado útil es que la suma de variables normales (mutuamente independientes) es otra vez normal. El cociente \\[ \\frac{(\\bar{Y}-\\bar{X}) - (\\mu_Y - \\mu_X)}{\\sqrt{\\frac{\\sigma_X^2}{M} + \\frac{\\sigma_Y^2}{N}}} \\] se aproxima por una distribución normal centrada en 0 y con desviación estándar 1. Usando esta aproximación, el cálculo de probabilidades es simples porque conocemos la proporción de la distribución bajo cualquier valor. Por ejemplo, sólo el 5% de estos valores son mayores que 2 (en valor absoluto): pnorm(-2) + (1 - pnorm(2)) #&gt; [1] 0.0455 4.2 ¿De dónde proviene la distribución normal? En 1894, Francis Galton inventó lo que ahora conocemos como tablero de Galton, para ilustrar el Teorema del Límite Central, y en particular, que la distribución binomial es una aproximación a la distribución normal. El tablero consta de una tablero vertical con varias filas de clavos acomodados en forma de arreglo triangular. En la parte inferior hay varias cubetas para cada posible camino que forman los clavos en el tablero. Se deja caer canicas desde la parte superior, las cuales van botando, rebotando y saltando, aleatoriamente, y van depositándose, a medida que caen, en las cubetas de la parte inferior. Las canicas chocarán con el primer clavo teniendo una probabilidad de \\(1/2\\) de ir a la izquierda o la derecha. A medida que caen, cada canica tiene más caminos a donde ir, es decir más posibilidades para desviarse a la izquiera o a la derecha. A lo largo de esta estructura, las canicas toman caminos aleatorios hasta caer en alguna de las cubetas. Es consecuencia de las leyes del universo que está sostenido por una tela sobre la cual subyace lo aleatorio, que las canicas caen con mayor probabilidad en las cubetas que están al centro, mientras que la probabilidad de que caigan en cubetas más alejadas es cada vez menor cuando la canica se aleja más y más de la cubeta del centro. Nota: Puedes ver el script para hacer la simulación del tablero de Galton aquí. La primera versión de este teorema fue postulada por el matemático francés Abraham De Moivre que, en un notable artículo publicado en 1733, usó la distribución normal para aproximar la distribución del número de soles resultante de muchos lanzamientos de una moneda justa. Este hallazgo estaba muy por delante de su tiempo y permaneció en el olvido hasta que el famoso matemático francés Pierre-Simon Laplace lo rescató de la oscuridad en su monumental obra Théorie analytique des probabilités, publicada en 1812. Laplace extendió el hallazgo de De Moivre al aproximar la distribución binomial en general con la distribución normal. El teorema en su forma más general fue demostrado por primera vez por el príncipe de las matemáticas, Carl Friedrich Gauss, en 1813. Hoy en día es conocida en su honor como distribución Gaussiana, cuando en su tiempo no era más que la ley del error. Supongamos que \\(x\\) y \\(y\\) son errores independientes cometidos al azar cuando se han hecho dos mediciones independientemente una de la otra. De tal forma que se cumple que \\[ g(r) \\Delta x \\Delta y = f(x) \\Delta x f(y) \\Delta y, \\] por lo cual \\[ g(r) = f(x)f(y). \\] Esto significa nada más que la magnitud del error \\(g(r)\\) es el producto de las magnitudes de los errores en \\(x\\) y \\(y\\) de forma independiente. Las coordenadas \\(x\\),\\(y\\) son tales que \\[ x = r \\cos(\\theta), \\; \\;\\; y = r\\mbox{sen}(\\theta). \\] Sabemos que \\[\\begin{eqnarray*} \\dfrac{dx}{d\\theta} &amp;=&amp; -r\\mbox{sen}(\\theta)\\\\ \\dfrac{dy}{d\\theta} &amp;=&amp; r \\cos{(\\theta)} \\end{eqnarray*}\\] Derivando con respecto a \\(\\theta\\): \\[\\begin{eqnarray*} 0 &amp;=&amp; \\dfrac{d f(x)}{d \\theta} f(y) + \\dfrac{d f(y)}{d \\theta} f(x)\\\\ &amp;=&amp; \\dfrac{df}{dx}\\cdot \\dfrac{d x}{d \\theta}\\cdot f(y) + \\dfrac{d f}{d y}\\cdot\\dfrac{d y}{d\\theta} \\cdot f(x) \\\\ &amp;=&amp; -r f^\\prime(x) \\mbox{sen}(\\theta)f(y) + f^\\prime(y)\\cdot r \\cos(\\theta) f(x)\\\\ &amp;=&amp; -y f^\\prime(x)f(y) + xf^\\prime(y)f(x). \\end{eqnarray*}\\] Por lo tanto, \\[ yf^\\prime(x)f(y) = x f^\\prime(y)f(x). \\] Se tiene que \\[ \\dfrac{f^\\prime(x)}{f(x)x} = \\dfrac{f^\\prime(y)}{f(y)y}, \\] para toda \\(x\\) y \\(y\\). Como \\(x\\) y \\(y\\) son mediciones arbitrarias, esto implica que \\[ \\dfrac{f^\\prime(x)}{f(x)x} \\] debe ser constante. Por lo tanto, \\[ \\displaystyle{\\int{\\dfrac{f^\\prime(x)}{f(x)x}}\\,dx = \\int{c \\,dx}}. \\] Multiplicando por \\(x\\), \\[ \\displaystyle{\\int{\\dfrac{f^\\prime(x)}{f(x)}}\\,dx = \\int{cx\\, dx}}. \\] Por lo cual, \\[ \\mbox{ln}f(x) = c\\cdot \\dfrac{x^2}{2} + c^\\prime. \\] 4.2.1 ¿Qué signo tiene c? Vemos que \\[ f(x) = Ae^{c\\frac{x^2}{2}}, \\] donde \\(A=e^{c^\\prime}\\). Como \\(f(x)\\) es la función de densidad de este fenómeno de errores independientes entonces se debe cumplir que: \\[ 1 = \\displaystyle{\\int f(x)\\, dx}, \\] y podemos concluir que \\(c&lt;0\\), para que \\(f(x)\\) pueda ser función de densidad. Integramos: \\[ A \\displaystyle{\\int{e^{c\\cdot \\frac{x^2}{2}}}\\, dx}. \\] Sea \\(u=\\sqrt{-\\dfrac{c}{2}}x\\), entonces \\(du = \\sqrt{-\\dfrac{c}{2}}\\,dx\\). Por lo cual, \\[ 1 = A\\sqrt{-\\dfrac{2}{c}} \\displaystyle{\\int_{-\\infty}^{\\infty}{e^{-u^2}}\\,du = A \\sqrt{-\\dfrac{2}{c}} \\cdot \\sqrt{\\pi}}. \\] Para obtener lo anterior, se desea demostrar que \\[ \\boxed{\\int_0^\\infty{e^{-x^2}dx} = \\dfrac{\\sqrt{\\pi}}{2}.} \\] Sea \\[ I = \\int_{-\\infty}^\\infty{e^{-x^2}dx}, \\] entonces \\[ I^2=\\left(\\int_{-\\infty}^\\infty{e^{-x^2}dx}\\right)\\left(\\int_{-\\infty}^\\infty{e^{-y^2}dy}\\right)=\\int_{-\\infty}^\\infty{\\int_{-\\infty}^{\\infty}{e^{-(x^2+y^2)}dxdy}}. \\] Si \\(x=r\\mbox{cos}(\\theta)\\) y \\(y=r\\mbox{sen}(\\theta)\\) entonces \\(x^2+y^2=r^2\\) y se puede demostrar que \\(dxdy=rd\\theta dr\\). Por lo tanto, \\[\\begin{eqnarray*} I^2&amp;=&amp;\\int_{-\\infty}^\\infty{\\int_{-\\infty}^{\\infty}{e^{-(x^2+y^2)}dxdy}}\\\\ &amp;=&amp;\\int_{0}^\\infty{\\int_{0}^{2\\pi}{re^{-r^2}d\\theta dr}}\\\\ &amp;=&amp;-\\pi\\int_{0}^{\\infty}{-2re^{-r^2}dr}\\\\ &amp;=&amp;-\\pi e^{-r^2}{\\biggr\\rvert_{0}^{\\infty}}\\\\ &amp;=&amp;\\pi. \\end{eqnarray*}\\] Por lo cual, \\(I=\\sqrt{\\pi}\\). Como \\(e^{-x^2}\\) es una función simétrica alrededor de \\(0\\), entonces se tiene, finalmente, que \\[ \\int_{0}^{\\infty}{e^{-x^2}dx}=\\dfrac{1}{2}\\int_{-\\infty}^{\\infty}{e^{-x^2}dx}=\\dfrac{\\sqrt{\\pi}}{2}. \\] Finalmente, \\[ 1 =A \\sqrt{-\\dfrac{2}{c}} \\cdot \\sqrt{\\pi}, \\] y despejando \\(A\\), obtenemos que \\[ A = \\sqrt{-\\dfrac{c}{2\\pi}}. \\] Sean \\(\\mu\\), el valor esperado de \\(X\\), y \\(\\sigma^2\\) la varianza de \\(X\\), \\(E(X)\\) y \\(V(X)\\), respectivamente. Vemos que \\[\\begin{eqnarray*} E(X) &amp;=&amp; \\displaystyle{\\int_{-\\infty}^{\\infty}{Ax e^{c\\frac{x^2}{2}}}\\, dx}\\\\ &amp;=&amp; \\sqrt{-\\dfrac{c}{2\\pi}}\\displaystyle{\\int_{-\\infty}^\\infty{xe^{c\\frac{x^2}{2}}}\\,dx}. \\end{eqnarray*}\\] Por lo tanto, \\[ E(X) = -\\dfrac{1}{c} \\sqrt{-\\dfrac{c}{2\\pi}}\\,e^{c\\frac{x^2}{2}}{\\biggr\\rvert_{-\\infty}^{\\infty}}=0. \\] Ahora bien, \\[ E(X^2) = V(X). \\] Tenemos que \\[ E(X^2) = \\sqrt{-\\dfrac{c}{2\\pi}} \\displaystyle{\\int_{-\\infty}^\\infty{x^2e^{c\\frac{x^2}{2}}}\\,dx}. \\] Integrando por partes (con \\(u=x\\) y \\(dv = xe^{c\\frac{x^2}{2}}\\,dx\\)) ahora obtenemos \\[\\begin{eqnarray*} \\sigma^2 = V(X) &amp;=&amp; \\sqrt{-\\dfrac{c}{2\\pi}} \\left(\\dfrac{1}{c}xe^{cx^2/2}{\\biggr\\rvert_{-\\infty}^{\\infty}} - \\dfrac{1}{c}\\displaystyle{\\int_{-\\infty}^{\\infty}{e^{c{x^2/2}}\\,dx}}\\right) \\\\ &amp;=&amp; \\sqrt{-\\dfrac{c}{2\\pi}} \\left(-\\dfrac{1}{c}\\displaystyle{\\int_{-\\infty}^{\\infty}{e^{cx^2/2}}\\,dx}\\right) \\\\ &amp;=&amp; \\sqrt{-\\dfrac{c}{2\\pi}} \\cdot \\left(\\dfrac{1}{c}\\right) \\cdot \\sqrt{-\\dfrac{2\\pi}{c}}. \\end{eqnarray*}\\] Por lo cual, \\[ c = - \\dfrac{1}{\\sigma^2}. \\] Finalmente, la distribución de \\(X\\) con media \\(0\\) y varianza \\(\\sigma^2\\) es \\[ f(x) = \\dfrac{1}{\\sqrt{2\\pi\\sigma^2}}\\,e^{-\\frac{1}{2\\sigma^2}x^2}. \\] Si ahora la media es \\(\\mu\\), entonces \\[ f(x) = \\dfrac{1}{\\sqrt{2\\pi\\sigma^2}}\\,e^{-\\frac{1}{2\\sigma^2}(x-\\mu)^2}. \\] 4.3 Otras observaciones Otras propiedades de esta distribución se pueden obtener buscando los puntos críticos de su función de densidad \\[ f(x) = Ae^{cx^2/2}. \\] La primera derivada es \\[ f^\\prime(x) = A e^{cx^2/2}\\cdot cx. \\] Por lo que \\(f^\\prime(x)=0\\) cuando \\(x=0\\). La segunda derivada es \\[ f^{\\prime\\prime}(x) = cA\\left(e^{cx^2/2}+xe^{cx^2/2}\\cdot cx\\right). \\] Por lo tanto, \\[\\begin{eqnarray*} f^{\\prime\\prime}(0) &amp;=&amp; cA \\\\ &amp;=&amp; c\\sqrt{-\\dfrac{c}{2\\pi}} \\\\ &amp;=&amp; \\sqrt{\\dfrac{1}{2\\pi\\sigma^2}} &gt; 0. \\end{eqnarray*}\\] Por lo tanto, si \\(\\sigma^2 = 1\\), entonces el máximo de \\(f(x)\\) se alcanza en \\(x=0\\), que coincide con la media, y el valor de \\(f\\) en \\(x=0\\) es \\[ \\sqrt{\\dfrac{1}{2\\pi}} \\approx 0.3989. \\] Ahora bien, \\(f^{\\prime\\prime}(0) = 0\\) si y sólo si \\[ e^{cx^2/2} = -cx^2 e^{cx^2/2}, \\] que ocurre si y sólo si \\[ x = \\pm \\sigma. \\] Esto quiere decir que \\(f(x)\\) tiene puntos de inflexión en \\(-\\sigma\\) y \\(\\sigma\\). 4.4 Diagramas de caja y brazos Los diagramas de caja y brazos son muy populares, e intentan mostrar gráficamente algo similar al resumen de cinco números de Tukey: Imagen de Wikipedia. Como vemos en la imagen superior el método muestra la mediana como una línea horizontal (medida de tendencia central), los bordes de la caja indican los cuartiles inferior y superior (o cuantiles 0.25 y 0.75). La distancia entre estos dos se conoce como rango intercuartílico o IQR por sus siglas en inglés, el IQR es una medida de dispersión. Alrededor del 50% de los datos están entre los cuartiles inferior y superior, es así que si el rango intercuartílico es chico los datos de enmedio están muy cercanos alrededor de la mediana, si el rango intercunatílico es grande los datos de enmedio están dispersos alrededor de la mediana. Adicionalmente, las distancias relativas de los cuartiles a lamediana nos dan información de la forma de la distribución, si una es mayor a la otra la distribucción está sesgada. Las líneas punteadas del diagrama superior indican los valores adyacentes, el valor adyacente superior se calcula de la siguiente forma: se toma el dato más grande que está a no más de \\(1.5IQR\\) del cuartil superior. Los valores adyacentes también nos dan un resumen de la forma y dispersión, pero lo hacen para los valores extremos, o colas de la distribución. Finalmente, los datos mayores (o menores) a los valores adyacentes se grafican de manera individual como puntos. Si hay datos atípicos suelen aparecer como estos puntos graficados individualmente. Ejemplo En el caso de los cantantes obtenemos la siguiente gráfica: library(lattice) library(tidyverse) # calculamos la estatura en centímetros singer$estatura.m &lt;- singer$height * 2.54 Veamos la estructura de los datos: singer %&gt;% sample_n(10) %&gt;% knitr::kable() height voice.part estatura.m 19 62 Soprano 1 157 196 75 Bass 1 190 140 65 Tenor 1 165 37 63 Soprano 2 160 2 62 Soprano 1 157 108 64 Alto 2 163 114 67 Alto 2 170 67 65 Alto 1 165 167 68 Tenor 2 173 175 73 Bass 1 185 singer.medians &lt;- singer %&gt;% group_by(voice.part) %&gt;% mutate(mediana = median(estatura.m), media = mean(estatura.m)) library(forcats) singer.medians$voice.part.2 &lt;- fct_reorder(.f = singer.medians$voice.part, .x = singer.medians$mediana, .fun = median) ggplot(singer.medians, aes(x = voice.part.2, y = estatura.m)) + geom_boxplot() + geom_jitter(position = position_jitter(height = 0.8, width = 0.3), color = &quot;darkgray&quot;, alpha = 0.5) + geom_point(aes(y = media), colour = &quot;red&quot;, size = 2) + coord_flip() Consideramos las siguientes mediciones de ozono en el aire, producidas por la red automática de monitoreo ambiental (SIMA). Las mediciones son concentración de ozono (en ppb o partes por billón) para las estaciones de Tlalnepantla e Iztapalapa, tomadas a las 2 pm, durante 2014. Una exposición de 110 ppb durante una hora se considera aguda. La distribución de ozono (en cualquier estación) es… Simétrica. Tiene sesgo a la derecha. Tiene sesgo a la izquierda. 4.5 Gráficas de cuantiles teóricos Supongamos que \\(G\\) es la función de distribución de una variable aleatoria continua, tal que \\(G\\) es diferenciable y tiene derivada positiva (por ejemplo, si la variable aleatoria tiene densidad positiva y continua en todos los reales). Entonces podemos construir la función \\(q:(0,1) \\to (\\infty, \\infty)\\) dada por: \\[q(f)=G^{-1}(f)\\] para cualquier \\(f \\in (0,1)\\). Decimos que \\(q\\) es la función de cuantiles de la variable aleatoria con distribución \\(G\\). Bajo esta definición, es claro que si \\(X\\) tiene distribución \\(G\\), entonces \\(P(X&lt;q(f))=G(q(f))=f\\). Ejemplo: normal Abajo vemos cómo se ve la gráfica de cuantiles de una variable aleatoria normal estándar. A esta función la denotamos como \\(q_{0,1}(f)\\), y en general, a la función de cuantiles de una distribución \\(Normal(\\mu, \\sigma^2)\\) la denotamos por \\(q_{\\mu, \\sigma}(f)\\). ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = qnorm) + xlim(0.001,0.999) + xlab(&#39;Cuantil (f)&#39;) + ylab(&#39;q&#39;) Notemos que \\(q_{\\mu, \\sigma}(f) \\to \\infty\\) cunado \\(f \\to 1\\), y el cuantil \\(1\\) no esta definido. Análogamente el cuantil \\(0\\) tampoco está definido. ¿Cómo se ve la gráfica de cuantiles de una variable aleatoria uniforme? Similar al caso normal (una curva). Como una recta horizontal. Como una recta vertical. Como una diagonal. 4.6 Gráficas de cuantiles para un conjunto de datos Hay varias maneras razonables de definir los cuantiles de un conjunto de datos, (ver Hyndman y Fan 1996 para una resumen de lo que usan los paquetes estadísticos). Nosotros adoptamos la siguiente construcción: Cuantiles de un conjunto de datos. Si \\(x_1,...,x_n\\) es el conjunto de datos, los ordenamos de manera creciente para obtener \\(x_{(1)},...,x_{(n)}\\), donde \\(x_{(1)}\\) es la observación más chica y \\(x_{(n)}\\) la más grande. Definimos \\[f_i=\\frac{i-0.5}{n}\\] y decimos que \\(x_{(i)}\\) es el cuantil \\(f_i\\). Si se deseara calcular otros cuantiles \\(f\\), se podría interpolar o extrapolar con los puntos \\(x_{(1)},...,x_{(n)}\\) y \\(f_1,...,f_n\\), pero esto no tiene tanto sentido. Podemos hacer gráficas de la función de cuantiles de manera fácil. Estas gráficas se hacen, aproximadamente, como sigue: se ordenan los datos del más chico al más grande, se enumeran como índice, y graficamos los pares resultantes con el índice en el eje horizontal. library(ggplot2) library(reshape2) # aquí están los datos de propinas n &lt;- length(tips$total_bill) tips$probs &lt;- (1:n - 0.5) / n tips$cuantiles &lt;- quantile(tips$total_bill, probs = tips$probs, type = 5) ggplot(tips, aes(x=probs, y = cuantiles)) + xlab(&#39;Cuantil (f)&#39;) + ylab(&#39;Dólares&#39;) + geom_point() 4.6.1 ¿Qué buscar en una gráfica de cuantiles? Las gráficas de cuantiles son conceptualmente simples; sin embargo, su interpretación efectiva requiere práctica. Algunas guías son: Podemos leer fácilmente la mediana y los cuartos. Regiones en la escala de medición de los datos (dimensión vertical) con densidades de datos más altas se ven como pendientes bajas en la gráfica. Mientras que pendientes altas indican densidades de datos relativamente más bajas. Una mayor pendiente en la forma general de la gráfica (por ejemplo, en la recta que une los cuartos) indica dispersiones más grandes. Si el conjunto de datos se distribuye aproximadamente uniforme, entonces la gráfica debe parecerse a una recta (diagonal). De manera más general: en las regiones donde el histograma crece conforme aumentan los valores en el conjunto de datos, la pendiente de la gráfica de cuantiles es decreciente (así que la gráfica de cuantiles es cóncava hacia abajo). Cuando el histograma decrece conforme aumentan los valores en el conjunto de datos, la pendiente de la gráfica de cuantiles es creciente (así que observamos concavidad hacia arriba). Si la distribución tiene más dispersión hacia la derecha, la figura general de la gráfica es cóncava hacia arriba. Si tiene más dispersión a la izquierda, es cóncava hacia abajo. ¿Cómo se ve una distribución que parece tener grupos definidos donde se acumulan los datos? num_sim &lt;- 300 grupos &lt;- data.frame( gpo = sample(1:3, size = 300, replace = TRUE, prob = c(0.25, 0.25, 0.5))) grupos$x &lt;- ifelse(grupos$gpo == 1, rnorm(num_sim, mean = 0), ifelse(grupos$gpo == 2, rnorm(num_sim, 10, 2), rnorm(num_sim, mean = 20, 2))) hist(grupos$x) n &lt;- length(grupos$x) grupos$probs &lt;- (1:n - 0.5) / n grupos$cuantiles &lt;- quantile(grupos$x, probs = grupos$probs, type = 5) ggplot(grupos, aes(x=probs, y = cuantiles)) + xlab(&#39;Cuantil (f)&#39;) + ylab(&#39;Dólares&#39;) + geom_point() 4.7 Gráficas qq-normales En las secciones anteriores hemos usado gráficas de cuantiles para graficar cuantiles de un conjunto de datos y cuantiles teóricos dada una función de distribución. También es posible hacer gráficas de conjuntos de datos contra cuantiles teóricos de una distribución, de manera que podamos visualizar el grado de concordancia entre estas dos. La más popular de estas gráficas son las cuantil-cuantil normales (q-q normales). Una manera de hacer estas gráficas para el conjunto de datos \\(x_1,...,x_n\\) es calcular: \\[\\bar{x}=\\frac{1}{n}\\sum_{i=1}^n x_i, s=\\sqrt{\\frac{1}{n-1}\\sum_{i=1}^n(x_i-\\mu)^2}\\] y calcular los cuantiles \\(q_{\\bar{x},s}(f)\\) de la distribución \\(Normal(\\bar{x},s)\\). Entonces calculamos \\(q_{\\bar{x},s}(f)\\) donde \\(f_1,f_2,...,f_n\\) son los cuantiles de los datos y graficamos \\((x_{i},q_{\\bar{x},s}(f_i))\\). Si los puntos no se desvían mucho de la recta \\(x=y\\), entonces el conjunto de datos se distribuye, aproximadamente, de manera normal. Las desviaciones de la recta se interpretan como arriba hicimos con la gráfica cuantil cuantil. Cuando queremos evaluar si la forma de la distribución de los datos es cercana a la normal, no es necesario calcular \\(\\bar{x}\\) y \\(s\\), pues para cualquier \\(\\mu\\) y \\(\\sigma\\) tenemos que: \\[q_{\\mu, \\sigma}(f) = \\sigma q_{0,1}(f)+\\mu,\\] lo que implica que si graficamos los cuantiles \\(q_{0,1}(f_i)\\) contra los del conjunto de datos, los datos se distribuyen aproximadamente normal cuando están dispuestos cerca de una recta. Construcción de una gráfica normal de cuantiles. Si los datos ordenados están dados por \\(x_{1},x_{2},...,x_{n}\\), con valores \\(f\\) correspondientes \\(f_1,f_2,...,f_n\\), entonces graficamos los puntos \\((q_{0,1},x_{i})\\). Ejemplo: cantantes En estas gráficas podemos ver: Cada conjunto de datos es razonablemente bien aproximado por una distribución normal. Muchas de las desviaciones que observamos se deben a redondeo. Aunque las medianas varían de grupo a grupo, las pendientes no varían mucho, esto quiere decir que las dispersiones (por ejemplo, desviaciones estándar) son similares a lo largo de todos los grupos. La variación en la dispersión de cada conjunto de datos no está asociado a la mediana de cada uno. library(ggplot2) library(lattice) library(dplyr) # calculamos la estatura en centímetros singer$estatura.m &lt;- singer$height * 2.54 # calculamos el valor f dentro de cada grupo singer_ord &lt;- arrange(group_by(singer, voice.part), estatura.m) singer_cuant &lt;- mutate(singer_ord, n = n(), valor.f = (1:n[1] - 0.5)/n[1], q.norm = qnorm(valor.f) ) ggplot(singer_cuant, aes(x = q.norm, y = estatura.m)) + geom_point() + facet_wrap(~voice.part, nrow = 2) + geom_smooth(method = &quot;lm&quot;, se = FALSE) 4.8 El TLC y errores estándar En Noviembre del 2017 El Financiero publicó una noticia que afirmab que los estados de Oaxaca, Michoacán, Morelos y Tamaulipas tenían la peor atención a pacientes diabéticos. El índice ICAD (Secretaría de Salud) mide el cuidado que se les da a los pacientes en las unidades de primer nivel, en todas sus jurisdicciones sanitarias. Además toma en cuenta tres aspectos principales: que se pueda retener al paciente, que se tenga acceso a pruebas diagnósticas y si tiene su diabetes controlada. Se cuenta con datos del ICAD de Noviembre del 2016: icad &lt;- read_csv(&quot;datos/icad.csv&quot;) icad %&gt;% sample_n(10) %&gt;% knitr::kable() fecha cve_edo cve_clues nombre calificacion pac_act 20161125 12 GRSSA012004 CSR EL POTRERILLO 53.5 33 20161125 28 TSSSA000034 CSR GUÍA DEL PORVENIR 68.6 21 20161125 25 SLSSA000806 CULIACÁNCITO 60.2 35 20161125 8 CHSSA002356 CS BENITO JUÁREZ 45.3 39 20161125 21 PLSSA008563 PLSSA008563 68.4 224 20161125 30 VZSSA016081 FCO I MADERO 51.4 19 20161125 4 CCSSA000346 CS TIKINMUL 57.8 13 20161125 15 MCSSA000813 S MARTÍN 68.4 24 20161125 15 MCSSA009954 S AGUSTÍN ATLAPULCO 62.0 63 20161125 28 TSSSA000256 CSR FORTINES 66.9 34 Cada unidad de salud o CLUES recibe una calificación promedio y tiene cierto número de pacientes diabéticos activos. Un efecto interesante es que si vemos el promedio de calificación contra el número de pacientes activos vemos el siguiente fenómeno: ggplot(icad, aes(x=pac_act, y=calificacion)) + geom_jitter(width = 0.1, height = 0.1) + scale_x_continuous(limits = c(0,400)) + geom_hline(yintercept = mean(icad$calificacion), color = &#39;red&#39;) La línea roja representa la media nacional de la calificación promedio de todas las unidades del país. Podemos ver que conforme aumenta el número de pacientes en el hospital las observaciones tienden a acercarse más a la media poblacional. Podemos simular la media para diferentes tamaños de muestra y ver cómo se comporta la media para varios tamaños de muestra. En los datos del ICAD la media nacional es de 58.867: set.seed(123456) sim_media_normal &lt;- function(n){ media &lt;- mean(rnorm(n = n, mean = 58.86661, sd = 11.12385)) tibble(n=n, media=media) } sim_1 &lt;- map_df(sample(1:500, 1000, replace = T), sim_media_normal) ggplot(sim_1, aes(x = n, y = media)) + geom_point() + geom_hline(yintercept = mean(icad$calificacion), color = &#39;red&#39;) Nuevamente se observa un fenómeno similar. Este fenómeno del error estándar generalmente se observa en la práctica y una buena estrategia para el modelado sería considerar el número de observaciones (pacientes, alumnos, escuelas) utilizados para calcular la media. Alguien nos podría preguntar: ¿por qué debería el promedio acercarse a la media general cuando aumentamos el tamaño de la muestra?. Debemos interpretar esta pregunta como preguntando por qué el error estándar de la media se reduce a medida que \\(n\\) aumenta. El teorema del límite central muestra que (bajo ciertas condiciones, por supuesto) el error estándar debe hacer esto, y que la media se aproxima a una distribución normal. Pero la pregunta es ¿por qué? La mejor justificación simple puede ser que hay más formas de obtener valores medios que valores extremos; por ejemplo, la media de un lanzamiento de un dado (distribución discreta uniforme en \\(1, 2, ..., 6\\)) es \\(3.5\\). Con un dado, es igualmente probable que obtengas un “promedio” de 3 o de 1. Pero con dos dados hay cinco formas de obtener un promedio de 3, y solo una forma de obtener un promedio de 1. Hay 5 veces más probabilidades de obtener el valor que está más cerca de la media que el que está más lejos. Veamos esto con un ejercicio de simulación: set.seed(110265) tira_dado &lt;- function(i){ res &lt;- sample(x = 1:6, size = 1) tibble(lanzamiento=i, resultado=res) } Lanzamos el dado mil veces y calculamos el promedio en cada lanzamiento. sim_2 &lt;- map_df(1:1000, tira_dado) %&gt;% mutate(media = cummean(resultado)) sim_2 %&gt;% head(5) %&gt;% knitr::kable() lanzamiento resultado media 1 3 3.00 2 2 2.50 3 5 3.33 4 1 2.75 5 5 3.20 Esto ocurre debido a la Ley de los Grandes Números: ggplot(sim_2, aes(x = lanzamiento, y = media)) + geom_line() + geom_hline(yintercept = 3.5, color = &#39;red&#39;) + scale_x_continuous(limits = c(2,1000)) + scale_y_continuous(limits = c(3.3,3.8)) La idea es ver como se aproxima la distribución muestral de la media (cuando las observaciones provienen de distintas distribuciones) a una Normal conforme aumenta el tamaño de muestra. Para esto, aproximamos la distribución muestral de la media usando simulación. Vale la pena observar que hay distribuciones que requieren un mayor tamaño de muestra \\(n\\) para lograr una buena aproximación (por ejemplo la log-normal), ¿a qué se debe esto? ¿Por qué tanto énfasis en el TLC? El error estándar es la manera más común para describir la precisión de una estadística. En términos generales, esperamos que \\(\\bar{x}\\) este a una distancia de \\(\\mu_P\\) menor a un error estándar el 68% del tiempo, y a menos de 2 errores estándar el 95% del tiempo. Estos porcentajes están basados el teorema central del límite que nos dice que bajo ciertas condiciones (bastante generales) de \\(P\\) la distribución de \\(\\bar{x}\\) se aproximará a una distribución normal: \\[\\bar{x} \\overset{\\cdot}{\\sim} N(\\mu_P,\\sigma_P^2/n)\\] Con la siguiente aplicación podemos simular muestras de cualquier distribución y visualizar la distribución de \\(\\bar{X}\\): 4.9 Ejemplo La corporación ALFA vende bicicletas. Basada en su experiencia siente que en los meses de verano es probable que venda 0, 1, 2, 3 ó 4 bicicletas en un día (la firma nunca ha vendido más de 4 bicicletas por día). Sea \\(X\\) el número de bicicletas vendidas en un día. \\(X\\) sigue una distribución uniforme y toma los valores \\(-2,-1,0,1,2\\), es decir, \\[ X=\\left\\{ \\begin{array}{cl} -2 &amp; \\text{con probabilidad 1/5}\\\\ -1 &amp; \\text{con probabilidad 1/5}\\\\ 0 &amp; \\text{con probabilidad 1/5}\\\\ 1 &amp; \\text{con probabilidad 1/5}\\\\ 2 &amp; \\text{con probabilidad 1/5.} \\end{array}\\right. \\] Suponga que el número de bicicletas vendidas el siguiente día es independiente del número vendido el día anterior. Sea \\(S\\) el número de bicicletas vendidas en un periodo de cinco días. Si \\(X_1,X_2,\\ldots,X_{5}\\) son variables aleatorias independientes con la misma distribución, entonces \\[ S = X_1 + X_2 + \\cdots + X_{5}. \\] Primero podemos definir el experimento como una función que reciba el número de realización del experimento y regrese el número de bicicletas vendidas en los 5 días: set.seed(100888) experimento &lt;- function(k){ tibble(k = k, x = as.integer(sum(sample.int(5,5,replace=T) - 1))) } Podemos ver qué regresa la función en una realización del experimento: experimento(1) #&gt; # A tibble: 1 x 2 #&gt; k x #&gt; &lt;dbl&gt; &lt;int&gt; #&gt; 1 1.00 12 Ahora utilizamos la fución map_df del paquete purrr para obtener 1000 realizaciones del experimento en un data frame: m &lt;- 1000 df_bicis &lt;- map_df(.x = 1:m, .f = experimento) df_bicis %&gt;% head(10) %&gt;% knitr::kable() k x 1 16 2 11 3 14 4 5 5 6 6 9 7 11 8 7 9 12 10 13 Calculamos la tabla y gráfica de frecuencias: df_bicis_frec &lt;- df_bicis %&gt;% group_by(x) %&gt;% summarise(p_x = n()/m) ggplot(df_bicis_frec, aes(x = x)) + geom_bar(aes(y = p_x), stat = &#39;identity&#39;) + geom_text(stat=&#39;identity&#39;,aes(y=p_x,label=round(p_x,4)),vjust=-1,size=2.5) Si comparamos con los valores que toma una distribución normal con la misma media y la misma desviación estándar vemos que las probabilidades son muy similares. Es un resultado del Teorema del Límite Central que la suma de variables uniformes independientes sigue una distribución normal. De cualquier forma es interesante cómo la suma de sólo 5 uniformes independientes da como resultado una distribución que se asemeja a la de una normal. media_bicis &lt;- mean(df_bicis$x) sd_bicis &lt;- sd(df_bicis$x) dnorm(0:20, mean = media_bicis, sd = sd_bicis) #&gt; [1] 0.000933 0.002325 0.005270 0.010868 0.020393 0.034816 0.054083 #&gt; [8] 0.076440 0.098302 0.115022 0.122455 0.118619 0.104546 0.083838 #&gt; [15] 0.061172 0.040611 0.024531 0.013482 0.006742 0.003068 0.001270 4.10 Tarea La Evaluación Nacional de Logros Académicos en Centros Escolares (ENLACE), es un examen que se pretende realizar cada año en México por la Secretaria de Educación Pública (SEP) a todas las escuelas públicas y privadas de nivel básico; para conocer el nivel de desempeño en las materias de español y matemáticas. Han existido importantes resistencias a la aplicación de este examen y opiniones de intelectuales respecto de las fallas que esta tiene. En este enlace la SEP publicó los resultados de la prueba ENLACE para todas las escuelas de los 32 estados de México: http://www.enlace.sep.gob.mx/content/ba/pages/base_de_datos_completa_2013/ Descarga los datos para todas las localidades y cárgalos en R utilizando la función map_df del paquete purrr. Explica si los datos cumplen los principios de datos limpios. Haz la limpieza necesaria que requieran los datos. Agrega los datos a nivel municipio para calcular el número de alumnos en cada grado y su promedio de puntos en español y matemáticas. Haz una gráfica en la cual cada punto represente un municipio y en el eje \\(x\\) se muestre el número de alumnos que presentaron el examen y en el eje \\(y\\) el promedio de puntos en matemáticas. La siguiente función de R sirve para generar una gráfica de la función de masa de probabilidad de una variable aleatoria \\(\\mbox{Binomial}(n,p)\\). genera_binoms &lt;- function(p, n) { datos &lt;- tibble(x = 0:n, y = dbinom(x, n, p)) media &lt;- n*p sd &lt;- sqrt(n*p*(1-p)) ls &lt;- media + 4*sd li &lt;- media - 4*sd lse &lt;- as.integer(ls) lie &lt;- as.integer(li) + 1 datos %&gt;% filter(x &lt; ls &amp; x &gt; li) %&gt;% ggplot(aes(x, y)) + geom_point(size = 0.6) + geom_segment(aes(x=x,y=0,xend=x,yend=y), color = &#39;red&#39;) + scale_x_continuous(&#39;k&#39;,breaks=lie:lse) + scale_y_continuous(&#39;p(k)&#39;) + geom_text(aes(y=y,label=round(y,3)),stat = &#39;identity&#39;,vjust=-1,size=3) } Por ejemplo, con \\(p=1/3\\) y \\(n=10\\) realizaciones, la gráfica se ve así: genera_binoms(1/3, 10) Utiliza la función para determinar a partir de qué valor de \\(n\\) la distribución de una variable Binomial con probabilidad de éxito \\(p=1/100\\) se asemeja a la de una normal. Regresando al ejemplo de la venta de bicicletas: Utiliza la función de experimento y la función map_df para obtener una simulación de 100 realizaciones del experimento. Haz una gráfica de cuantiles vs cuantiles normales y decide si el conjunto de datos está bien aproximado por una distribución normal. Calcula la distribución de probabilidades del número de bicicletas vendidas en un periodo de cinco días. Para calcular \\(p(k) = P(S=k)\\) considera que deberás contar el número de soluciones de la ecuación \\[ x_1 + x_2 + \\cdots + x_5 = k, \\] donde \\(0 \\leq x_i \\leq 4\\). El número de soluciones enteras es equivalente al coeficiente del término \\(y^k\\) del polinomio \\((1+y+\\cdots+y^4)^5\\) porque cada factor del producto representa el número de bicicletas vendidas por día. Compara las probabilidades calculadas con los valores de la distribución normal obtenidos anteriormente. "],
["analisis-de-datos-categoricos.html", "Clase 5 Análisis de datos categóricos 5.1 Repaso y algunos conceptos 5.2 La \\(\\chi^2\\) de Pearson de una multinomial 5.3 Definiciones 5.4 Asociación en tablas de tamaño \\(I\\times J\\) 5.5 Intervalos de confianza para los parámetros de asociación 5.6 Prueba de independencia 5.7 General Social Survey 1972 - 2016 5.8 La catadora de té 5.9 Modelos multinomiales para conteos 5.10 Modelos log lineales con tres variables categóricas 5.11 Ejemplo: sensitividad y especificidad 5.12 Ejemplo: horóscopos 5.13 Tarea (opcional)", " Clase 5 Análisis de datos categóricos .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } Sólo necesitas instalar un paquete una vez, pero debes volver a cargarlo cada vez que inicies una nueva sesión. library(tidyverse) Las variables categóricas están por doquier. Desde ayudar a decidir cuándo un tratamiento médico es mejor hasta evaluar los factores que afectan nuestras opiniones y conductas, hoy en día los analistas encuentran innumerables usos para los métodos de datos categóricos. Primero vamos a repasar algunos conceptos de probabilidad. 5.1 Repaso y algunos conceptos Recordemos la distribución multinomial. Supongamos que cada uno de \\(n\\) ensayos independientes e idénticos tiene realizaciones en \\(c\\) categorías. Definimos \\(y_{ij}\\) como \\[ y_{ij} = \\left\\{ \\begin{array}{cl} 1 &amp; \\text{si el }\\; i\\text{-esimo ensayo cae en la categoria }j,\\\\ 0 &amp; \\text{en otro caso.} \\end{array}\\right. \\] Entonces \\(y_i=(y_{i1},y_{i2},\\ldots,y_{ic})\\) representa un ensayo multinomial, done \\[ \\displaystyle{\\sum_j{y_{ij}}}=1. \\] Notemos que \\(y_{ic}=1-(y_{i1}+\\cdots+y_{i,c-1})\\) es redundante. Sea \\(n_j=\\displaystyle{\\sum_i{y_{ij}}}\\) el número de ensayos que caen en la categoría \\(j\\). Los conteos \\((n_1,n_2,\\ldots,n_c)\\) tienen una distribución multinomial. Sea \\(\\pi_{j}=P(Y_{ij}=1)\\), la probabilidad de éxito en la categoría \\(j\\). La función de masa de probabilidad de \\((n_1,n_2,\\ldots,n_c)\\) es \\[ p(n_1,n_2,\\ldots,n_c) = \\dfrac{n!}{n_1!n_2!\\cdots n_c!}\\pi_1^{n_1}\\pi_2^{n_2}\\cdots \\pi_c^{n_c}. \\] Sea \\(n=\\displaystyle{\\sum_j{n_j}}\\). Recordemos que esta ecuación es de dimensión \\(c-1\\) porque \\[ n_c = n - (n_1 + n_2 + \\cdots + n_{c-1}). \\] Se puede ver que \\[ \\begin{eqnarray*} E(n_j) =n\\pi_j, \\quad &amp;&amp; V(n_j)=n\\pi_j(1-\\pi_j),\\\\ C(n_i,n_j)=-n\\pi_i \\pi_j&amp;\\quad&amp;\\mbox{si } i\\neq j \\end{eqnarray*} \\] Modelo Poisson Sean \\((Y_1,Y_2,\\ldots,Y_c)\\) variables aleatorias Poisson independientes con parámetros \\((\\mu_1,\\mu_2,\\ldots,\\mu_c)\\). La función de masa de probabilidad conjunta es \\[ P(Y_1=n_1, Y_2=n_2, \\ldots, Y_c=n_c) = \\prod_i{\\mbox{exp}(-\\mu_i)\\dfrac{\\mu_i^{n_i}}{n_i!}}. \\] El total \\(n=\\displaystyle{\\sum_i{Y_i}}\\) también tiene una distribución Poisson con media \\(\\displaystyle{\\sum_i{\\mu_i}}\\). Como \\(n\\) también es una variable aleatoria, al condicionar en \\(n\\), \\(\\{Y_i\\}\\) ya no tienen una distribución Poisson, pues cada \\(Y_i\\) no puede exceder \\(n\\). La distribución condicional es \\[ \\begin{eqnarray*} P\\left(Y_1=n_1,\\ldots,Y_c=n_c \\,\\middle|\\, \\sum_j{Y_j}=n\\right) &amp;=&amp; \\dfrac{P(Y_1=n_1,\\ldots,Y_c=n_c)}{P\\left(\\sum_j{Y_j}\\right)} \\\\ &amp;=&amp; \\dfrac{\\prod_i \\mbox{exp}(-\\mu_i)\\mu_i^{n_i}/n_i!}{\\mbox{exp}\\left(-\\sum_j{\\mu_j}\\right)\\left(\\sum_j {\\mu_j}\\right)^n/n!} \\\\ &amp;=&amp; \\dfrac{n!}{\\prod_i n_i!} \\prod_i{\\pi_i^{n_i}} \\end{eqnarray*} \\] con \\(\\pi_i = \\dfrac{\\mu_i}{\\sum_i \\mu_i}\\), es decir, se trata de una distribución multinomial con parámetros \\((n, \\{\\pi_i\\})\\). Muchos análisis de datos categóricos suponen una distribución multinomial. Tales análisis usualmente tineen resultados similres a aquellos análisis que suponen una distribución Poisson, por las similitudes en sus funciones de verosimilitud. En la estimación de parámetros a menudo se utilizan dos métodos para obtener intervalos de confianza: Método de Wald En el caso univariado se utiliza como estimador de la varianza \\(-E\\left(\\dfrac{d^2 L(\\theta)}{d\\theta^2}\\right)\\) y el estadístico es \\[z=(\\hat{\\theta} - \\theta_0)/\\mbox{SE} \\sim N(0,1)\\] o en el caso multivariado, \\[ W = \\left(\\hat{\\theta}- \\theta_0\\right)^T\\left[\\mbox{Cov}\\left(\\hat{\\theta}\\right)\\right]^{-1}\\left(\\hat{\\theta}- \\theta_0\\right), \\] y como \\(\\hat{\\theta}\\) se distribuye normal asintóticamente, entonces la distribución de \\(W\\) es \\(\\chi^2\\) con grados de libertad igual al rango de \\(\\mbox{Cov}\\left(\\hat{\\theta}\\right)\\), el número de parámetros no redundantes. Método de cociente de verosimilitud Si \\(l_0\\) es el máximo valor de la función de verosimilitud bajo \\(H_0\\) y \\(l_1\\) es el valor máximo sobre el espacio de parámetros (que contiene también el valor bajo \\(H_0\\)), entonces \\(l_0 \\leq l_1\\) y el estadístico es \\[-2\\, \\mbox{log}(\\Lambda) = -2\\, \\mbox{log}(l_0/l_1)=-2(L_0-L_1) \\sim \\chi^2_n\\] donde los grados de libertad equivalen a la diferencia de dimensiones de los espacios de parámetros. 5.1.1 Caso binomial Definimos la función de verosimilitud de una variable aleatoria binomial con \\(n\\) realizaciones y \\(x\\) éxitos: \\[ L(\\theta) = \\mbox{log}(\\theta^x(1-\\theta)^{n-x}) = x\\mbox{log}(\\theta) + (n-x)\\mbox{log}(1-\\theta) \\] likelihood &lt;- function(x, n){ function(theta){x*log(theta) + (n-x)*log(1-theta)} } Creamos nuestra función de verosimilitud para \\(x=3\\) y \\(n=10\\): mi_likelihood &lt;- likelihood(3, 10) Graficamos la función: ggplot(data = data.frame(x = 0), mapping = aes(x = x)) + stat_function(fun = mi_likelihood) + xlim(0.001,0.999) El estadístico de Wald da como resultado el invervalo \\[ \\hat{\\theta} \\pm z_{\\alpha/2}\\sqrt{\\dfrac{\\hat{\\theta}(1-\\hat{\\theta})}{n}} \\] El estadístico del cociente de verosimilitud es: \\[ 2x\\left[x\\mbox{log}\\left(\\dfrac{\\hat{\\theta}}{\\theta_0}\\right)+(n-x)\\mbox{log}\\left(\\dfrac{1-\\hat{\\theta}}{1-\\theta_0}\\right)\\right] = \\chi^2_{1,\\alpha} \\] Se puede expresar como \\[ 2\\sum{\\mbox{observado} \\,\\left[\\,\\mbox{log}\\left(\\dfrac{\\mbox{observado}}{\\mbox{ajustado}}\\right)\\right]} \\] Existen varios métodos para obtener intervalos de confianza. Utilizando la función ciAllx del paquete proportion podemos obtener intervalos de confianza para \\(\\hat{\\theta}\\) a partir de 6 métodos: library(proportion) intervalos &lt;- ciAllx(x = 3, n = 10, alp = 0.05) intervalos %&gt;% knitr::kable() method x LowerLimit UpperLimit LowerAbb UpperAbb ZWI Wald 3 0.016 0.584 NO NO NO ArcSine 3 0.071 0.603 NO NO NO Likelihood 3 0.085 0.607 NO NO NO Score 3 0.108 0.603 NO NO NO Logit-Wald 3 0.100 0.624 NO NO NO Wald-T 3 0.002 0.598 NO NO NO Los intervalos de confianza para todos los métodos son realmente muy similares. Si el tamaño de muestra \\(n\\) es grande, los 6 métodos dan como resultado intervalos de confianza prácticamente idénticos. ggplot(intervalos, aes(y = method)) + geom_segment(aes(x = LowerLimit, xend = UpperLimit, y = method, yend = method)) + geom_vline(xintercept = 0.3, color = &#39;red&#39;) + xlab(&#39;Intervalo de confianza para cada método&#39;) Estimación de parámetros multinomiales Definimos la función de verosimilitud \\[ l(n_1,n_2,\\ldots,n_c | \\pi_1, \\pi_2, \\ldots, \\pi_c) = c \\prod_j \\pi_j^{n_j} \\] donde \\(\\pi_j \\geq 0\\) y \\(\\sum_j{\\pi_j}=1\\). Para estimar \\(\\{\\pi_j\\}\\) maximizamos la log-verosimilitud \\[ L(\\pi) = \\sum_j{n_j \\mbox{log}(\\pi_j)}. \\] Para no tener redundancias vemos \\(L\\) como función de \\(\\pi_1,\\pi_2,\\ldots,\\pi_{c-1}\\) pues \\(\\pi_c=1-(\\pi_1+ \\pi_2+\\cdots+\\pi_{c-1})\\). Por lo tanto, \\[ \\dfrac{d \\pi_c}{d \\pi_j} = -1 \\qquad \\mbox{para }\\; j=1,2,\\ldots,c-1. \\] Por la regla de la cadena, \\[ \\dfrac{d\\,\\mbox{log}(\\pi_c)}{d\\,\\pi_j}=\\dfrac{1}{\\pi_c} \\cdot \\dfrac{d\\, \\pi_c}{d\\, \\pi_j}=-\\dfrac{1}{\\pi_c}. \\] Ahora diferenciamos \\(L\\) con respecto a \\(\\pi_j\\) \\[ \\dfrac{d\\, L(\\pi)}{d\\, \\pi_j}=\\dfrac{n_j}{\\pi_j} - \\dfrac{n_c}{\\pi_c} = 0. \\] Por lo que los estimadores de máxima verosimilitud satisfacen que \\[ \\dfrac{\\hat{\\pi}_j}{\\hat{\\pi}_c} = \\dfrac{n_j}{n_c}. \\] Ahora bien, \\[ 1 = \\sum_j{\\pi_j}= \\dfrac{\\hat{\\pi}_c\\left(\\sum_j n_j\\right)}{n_c}=\\dfrac{\\hat{\\pi}_c n}{n_c}, \\] y se tiene que \\(\\hat{\\pi_c}=n_c/n\\) y \\(\\hat{\\pi_j}=n_j/n\\) para \\(j=1,2,\\ldots,c-1\\). Se puede verificar que estos estimadores efectivamente maximizan la verosimilitud. Notemos que \\(\\hat{\\pi_j}=n_j/n\\) son las proporciones muestrales. 5.2 La \\(\\chi^2\\) de Pearson de una multinomial En 1900 el estadístico Karl Pearson definió una prueba de hipótesis para la multinomial. Su motivación inicial fue analizar las probabilidades de ocurrencias de varias realizaciones en el juego de la ruleta. Consideramos para \\(j=1,2,\\ldots,c\\) \\[ H_0:\\pi_j =\\pi_{j0} \\qquad H_1:\\pi_j \\neq \\pi_{j0}. \\] Bajo \\(H_0\\), los valores esperados de \\(\\{n_j\\}\\), llamadas frecuencias esperadas son \\(\\mu_j=n\\pi_{j0}\\), \\(j=1,\\ldots,c\\). El estadístico propueto es \\[ X^2 = \\sum_j{\\dfrac{(n_j - \\mu_j)^2}{\\mu_j}} \\sim \\chi^2_{(c-1)}. \\] Si las diferencias \\(\\{n_j - \\mu_j\\}\\) son más grandes, esto produce valores \\(X^2\\) más grandes para una \\(n\\) fija. Si \\(X_o^2\\) es el valor observado de \\(X^2\\) entonces el valor p es \\(P(X^2 \\geq X_o^2)\\). Si \\(n\\) es grande, \\(X^2\\) tiene una distribución \\(\\chi^2_{c-1}\\). 5.2.1 Cociente de verosimilitud de una multinomial Bajo \\(H_0\\) la verosimilitud se maximiza cuando \\(\\hat{\\pi}_j=\\pi_{j0}\\) y en el caso general cuando \\(\\hat{pi}_j=\\frac{n_j}{n}\\). El cociente de verosimilitud es \\[ \\Lambda = \\dfrac{\\prod_j{\\pi_{j0}^{n_j}}}{\\prod_j{(n_j/n)^{n_j}}}. \\] Por lo tanto, el estadístico del cociente de verosimilitud es \\[ G^2 = -2\\,\\mbox{log}(\\Lambda) = 2\\, \\sum_j{n_j \\mbox{log}\\left(\\dfrac{n_j}{n\\pi_{j0}}\\right)}. \\] A este estadístico se le llama estadístico \\(\\chi^2\\) de verosimilitud. Entre más grande sea el valor de \\(G^2\\) hay mayor evidencia en contra de \\(H_0\\). En el caso general, el espacio de parámetros consiste de \\(\\{\\pi_j\\}\\) sujeto a que \\(\\sum_j{\\pi_j}=1\\), por lo que la dimensión es \\(c-1\\). Bajo \\(H_0\\), se especifica por completo \\(\\{\\pi_j\\}\\), por lo que la dimensión es \\(0\\). La diferencia entre estas dimensiones es \\((c-1)\\). Si \\(n\\) es grande, entonces \\(G^2\\) tiene una distribución \\(\\chi^2\\) con \\((c-1)\\) grados de libertad. 5.3 Definiciones Supongamos que se tiene una tabla de contingencias. A continuación introduciremos una notación y algunas definiciones. 5.3.1 Notación Sea \\(\\pi_{ij}\\) la probabilidad de que una observación \\((X,Y)\\) esté en la celdilla (\\(i\\),\\(j\\)). Las densidades marginales las denotamos por: \\[ \\pi_{i+}=\\sum_j{\\pi_{ij}},\\qquad \\pi_{+j} = \\sum_i{\\pi_{ij}} \\] Cuando ambas variables son aleatorias, se pueden definir las densidades marginales: \\[ \\pi_{j|i} = \\pi_{ij}/\\pi_{i+}, \\qquad \\mbox{para toda }i\\mbox{ y }j \\] Se dice que las variables son independientes si \\[ \\pi_{ij} = \\pi_{i+}\\pi_{+j} \\quad \\mbox{para }\\; i=1,\\ldots,I\\; \\mbox{ y para }\\; j=1,\\ldots,J. \\] Cuando son independientes se cumple que \\[ \\pi_{j|i}=\\pi_{ij}/\\pi_{i+}=(\\pi_{i+}\\pi_{+j})/\\pi_{i+}=\\pi_{+j} \\quad \\mbox{para }i=1,\\ldots,I. \\] 5.3.2 Razón de momios Para una probabilidad de éxito \\(\\pi\\) se definen los momios (o chances) como \\[ \\Omega = \\dfrac{\\pi}{1-\\pi} \\] Los momios siempre son no negativos. Ejemplo Un sitio de apuestas escribe: Momio 7/1: Ganas $7 por cada $1 apostado. Si apuestas $10, cobras $70 más tu apuesta, es decir, $80. Momio 5/2: Ganas $5 por cada $2 apostados. Si apuestas $10, cobras $25 más tu apuesta, es decir, $35. Momio 3/5: Ganas $3 por cada $5 apostados. Si apuestas $10, cobras $6 más tu apuesta, es decir, $16. Si el momio es menor que 1 entonces… La probabilidad de éxito es cero. La probabilidad de éxito es menor que \\(1/2\\). El éxito es más probable que el fracaso. Todas la anteriores. Si \\(\\Omega &gt; 1\\), entonces es más probable el éxito que el fracaso. Por ejemplo, cuando \\(\\pi=0.75\\) entonces \\(\\Omega = 0.75/0.25 =3\\), un éxito es 3 veces más probable que un fracaso, y esperaríamos 3 éxitos por cada fracaso. Cuando \\(\\Omega = \\frac{1}{3}\\) un fracaso es tres veces más verosímil que un éxito. Inversamente, \\[ \\pi = \\dfrac{\\Omega}{\\Omega + 1}. \\] Pensemos nuevamente en una tabla de contingencias de \\(2\\times 2\\), en la \\(i\\)-ésima fila los momios de éxito en vez de fracaso son \\(\\Omega_i=\\pi_i/(1-\\pi_i)\\). La razón de momios de \\(\\Omega_1\\) y \\(\\Omega_2\\) en ambas filas es: \\[ \\theta = \\dfrac{\\Omega_1}{\\Omega_2}=\\dfrac{\\pi_1/(1-\\pi_1)}{\\pi_2/(1-\\pi_2)} \\] Si se tiene una tabla con probabilidades conjuntas \\(\\{\\pi_{ij}\\}\\) la definición equivalente de momio para cada fila es \\(\\Omega_i=\\pi_{i1}/\\pi_{i2}\\), \\(i=1,2\\). Entonces la razón de momios es: \\[ \\theta = \\dfrac{\\pi_{11}/\\pi_{12}}{\\pi_{21}/\\pi_{22}}=\\dfrac{\\pi_{11}\\pi_{22}}{\\pi_{12}\\pi_{21}} \\] A \\(\\theta\\) se le conoce también como la razón del producto cruzado. ¿Cómo interpretamos este número? Si \\(\\theta=1\\) (o \\(\\Omega_1=\\Omega_2\\)), entonces las variables son independientes. Si \\(\\theta &gt; 1\\), entonces las observaciones en el renglón 1 tienen más probabilidad de éxito que observaciones en en renglón 2, es decir, \\(\\pi_1 &gt; \\pi_2\\). Si \\(\\theta &lt; 1\\), entonces \\(\\pi_1 &lt; \\pi_2\\). Para conteos en una tabla de contingencia, la razón de momios muestral es: \\[ \\hat{\\theta} = \\dfrac{n_{11}n_{22}}{n_{12}n_{21}} \\] Regresemos a los datos de billboard: billboard &lt;- read_csv(&quot;datos/billboard_alltime.csv&quot;) OR &lt;- function(var1, var2){ n &lt;- table(var1, var2) (n[1,1] / n[1,2])*(n[2,2] / n[2,1]) } OR(billboard$gains_performance, billboard$rising) #&gt; [1] 2.75 Los chances de éxito (subir una o más posiciones en el chart) cuando no hubo una presentación en vivo (rengón 1) son equivalentes a 2.75 veces los chances de éxito (incremento en el chart) que cuando no hubo presentación en vivo (renglón 2). Con la función odds.ratio del paquete questionr se puede calcular la razón de momios y el paquete hace una prueba de hipótesis conocida como prueba exacta de Fisher: library(questionr) odds.ratio(table(billboard$gains_performance, billboard$rising)) #&gt; OR 2.5 % 97.5 % p #&gt; Fisher&#39;s test 2.75 2.70 2.8 &lt;2e-16 *** #&gt; --- #&gt; Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 Valores de \\(\\theta\\) más alejados de \\(1\\) reflejan un mayor grado de asociación entre las variables. Dos valores representan la misma asociación pero en direcciones opuestas, cuando uno es el recíproco del otro. Por ejemplo, cuando \\(\\theta=0.25\\) los chances de éxito en el renglón 1 son 0.25 veces los chances en el renglón 2, o equivalentemente, los chances de éxito en el renglón 2 son 1/0.25 = 4 veces los chances en el renglón 1. Si se invierte el orden de los renglones o de las columnas, entonces \\(\\theta\\) no cambia. debe ser necesariamente \\(1\\). es el recíproco de su valor original. puede tomar cualquier valor. Para hacer inferencia es conveniente usar \\(\\mbox{log}(\\theta)\\). Este tiene las siguientes propiedades: El caso de independencia corresponde a \\(\\mbox{log}(\\theta) = 0\\). El logaritmo de la razón de momios es simétrico alrededor de \\(0\\). Si se invierten los renglones o las columnas, entonces \\(\\mbox{log}(\\theta)\\) cambia de signo pero tiene la misma magnitud. Por ejemplo, dos valores de \\(\\mbox{log}(\\theta)\\) que tienen misma magnitud pero signos contrarios, como \\(\\mbox{log}(4)=1.39\\) y \\(\\mbox{log}(0.25)=-1.39\\), representan el mismo grado de asociación. 5.4 Asociación en tablas de tamaño \\(I\\times J\\) En tablas de \\(2\\times 2\\) un sólo número como la razón de momios puede ser suficiente para resumir la asociación. En tablas \\(I\\times J\\) usualmente no es posible resumir la asociación entre las dos variables con un sólo número sin alguna pérdida de información. Sin embargo, un conjunto de razones de momios, o bien, algun otro estadístico de resumen pueden ser útil para describir la asociación entre las variables. 5.4.1 Razones de momios en tablas \\(I\\times J\\) Se puede utiliar los \\(\\dbinom{I}{2}\\) pares de renglones en combinación con los \\(\\dbinom{J}{2}\\) pares de columnas. Para renglones \\(a\\) y \\(b\\) y columnas \\(c\\) y \\(d\\) la razón de momios utiliza 4 valores en casillas en un patrón rectangular: \\[ \\dfrac{\\pi_{ab}\\pi_{bd}}{\\pi_{bc}\\pi_{ad}} \\] Consideremos el subconjunto de \\((I-1)(J-1)\\) razones de momios locales: \\[ \\theta_{ij} = \\dfrac{\\pi_{ij}\\pi_{i+1,j+1}}{\\pi_{i,j+1}\\pi_{i+1,j}}, \\qquad i=1,\\ldots, I-1,\\;\\;\\; j=1,\\ldots,J-1. \\] Estos \\((I-1)(J-1)\\) razones de momios determinan las razones de momios entre pares de renglones y pares de columnas. 5.4.2 Ejemplo: mushrooms Este conjunto de datos incluye descripciones de muestras correspondientes a 23 especies de setas de las familias Agaricus y Lepiota. Cada especie está identificada como definitivamente comestible, definitivamente venenosa, o de comestibilidad desconocida y no recomendada su ingesta. Las otras variables se presentan en la siguiente tabla: Variable Categorías cap-shape bell=b,conical=c,convex=x,flat=f,knobbed=k,sunken=s cap-surface fibrous=f,grooves=g,scaly=y,smooth=s cap-color brown=n,buff=b,cinnamon=c,gray=g,green=r,pink=p,purple=u,red=e,white=w,yellow=y bruises bruises=t,no=f odor almond=a,anise=l,creosote=c,fishy=y,foul=f,musty=m,none=n,pungent=p,spicy=s gill-attachment attached=a,descending=d,free=f,notched=n gill-spacing close=c,crowded=w,distant=d gill-size broad=b,narrow=n gill-color black=k,brown=n,buff=b,chocolate=h,gray=g,green=r,orange=o,pink=p,purple=u,red=e,white=w,yellow=y stalk-shape enlarging=e,tapering=t stalk-root bulbous=b,club=c,cup=u,equal=e,rhizomorphs=z,rooted=r,missing=? stalk-surface-above-ring fibrous=f,scaly=y,silky=k,smooth=s stalk-surface-below-ring fibrous=f,scaly=y,silky=k,smooth=s stalk-color-above-ring brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y stalk-color-below-ring brown=n,buff=b,cinnamon=c,gray=g,orange=o,pink=p,red=e,white=w,yellow=y veil-type partial=p,universal=u veil-color brown=n,orange=o,white=w,yellow=y ring-number none=n,one=o,two=t ring-type cobwebby=c,evanescent=e,flaring=f,large=l,none=n,pendant=p,sheathing=s,zone=z spore-print-color black=k,brown=n,buff=b,chocolate=h,green=r,orange=o,purple=u,white=w,yellow=y population abundant=a,clustered=c,numerous=n,scattered=s,several=v,solitary=y habitat grasses=g,leaves=l,meadows=m,paths=p,urban=u,waste=w,woods=d mushrooms &lt;- read_csv(&quot;datos/mushrooms.csv&quot;) glimpse(mushrooms) #&gt; Observations: 8,124 #&gt; Variables: 23 #&gt; $ edibility &lt;chr&gt; &quot;p&quot;, &quot;e&quot;, &quot;e&quot;, &quot;p&quot;, &quot;e&quot;, &quot;e&quot;, &quot;e&quot;, ... #&gt; $ `cap-shape` &lt;chr&gt; &quot;x&quot;, &quot;x&quot;, &quot;b&quot;, &quot;x&quot;, &quot;x&quot;, &quot;x&quot;, &quot;b&quot;, ... #&gt; $ `cap-surface` &lt;chr&gt; &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;y&quot;, &quot;s&quot;, &quot;y&quot;, &quot;s&quot;, ... #&gt; $ `cap-color` &lt;chr&gt; &quot;n&quot;, &quot;y&quot;, &quot;w&quot;, &quot;w&quot;, &quot;g&quot;, &quot;y&quot;, &quot;w&quot;, ... #&gt; $ bruises &lt;chr&gt; &quot;t&quot;, &quot;t&quot;, &quot;t&quot;, &quot;t&quot;, &quot;f&quot;, &quot;t&quot;, &quot;t&quot;, ... #&gt; $ odor &lt;chr&gt; &quot;p&quot;, &quot;a&quot;, &quot;l&quot;, &quot;p&quot;, &quot;n&quot;, &quot;a&quot;, &quot;a&quot;, ... #&gt; $ `gill-attachment` &lt;chr&gt; &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, &quot;f&quot;, ... #&gt; $ `gill-spacing` &lt;chr&gt; &quot;c&quot;, &quot;c&quot;, &quot;c&quot;, &quot;c&quot;, &quot;w&quot;, &quot;c&quot;, &quot;c&quot;, ... #&gt; $ `gill-size` &lt;chr&gt; &quot;n&quot;, &quot;b&quot;, &quot;b&quot;, &quot;n&quot;, &quot;b&quot;, &quot;b&quot;, &quot;b&quot;, ... #&gt; $ `gill-color` &lt;chr&gt; &quot;k&quot;, &quot;k&quot;, &quot;n&quot;, &quot;n&quot;, &quot;k&quot;, &quot;n&quot;, &quot;g&quot;, ... #&gt; $ `stalk-shape` &lt;chr&gt; &quot;e&quot;, &quot;e&quot;, &quot;e&quot;, &quot;e&quot;, &quot;t&quot;, &quot;e&quot;, &quot;e&quot;, ... #&gt; $ `stalk-root` &lt;chr&gt; &quot;e&quot;, &quot;c&quot;, &quot;c&quot;, &quot;e&quot;, &quot;e&quot;, &quot;c&quot;, &quot;c&quot;, ... #&gt; $ `stalk-surface-above-ring` &lt;chr&gt; &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, ... #&gt; $ `stalk-surface-below-ring` &lt;chr&gt; &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, &quot;s&quot;, ... #&gt; $ `stalk-color-above-ring` &lt;chr&gt; &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, ... #&gt; $ `stalk-color-below-ring` &lt;chr&gt; &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, ... #&gt; $ `veil-type` &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, ... #&gt; $ `veil-color` &lt;chr&gt; &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, &quot;w&quot;, ... #&gt; $ `ring-number` &lt;chr&gt; &quot;o&quot;, &quot;o&quot;, &quot;o&quot;, &quot;o&quot;, &quot;o&quot;, &quot;o&quot;, &quot;o&quot;, ... #&gt; $ `ring-type` &lt;chr&gt; &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;p&quot;, &quot;e&quot;, &quot;p&quot;, &quot;p&quot;, ... #&gt; $ `spore-print-color` &lt;chr&gt; &quot;k&quot;, &quot;n&quot;, &quot;n&quot;, &quot;k&quot;, &quot;n&quot;, &quot;k&quot;, &quot;k&quot;, ... #&gt; $ population &lt;chr&gt; &quot;s&quot;, &quot;n&quot;, &quot;n&quot;, &quot;s&quot;, &quot;a&quot;, &quot;n&quot;, &quot;n&quot;, ... #&gt; $ habitat &lt;chr&gt; &quot;u&quot;, &quot;g&quot;, &quot;m&quot;, &quot;u&quot;, &quot;g&quot;, &quot;g&quot;, &quot;m&quot;, ... library(oddsratio) mushrooms_1 &lt;- mushrooms %&gt;% mutate(edibility = 1*(edibility == &#39;e&#39;)) fit_glm &lt;- glm(edibility ~ `cap-color`, data=mushrooms_1, family=&#39;binomial&#39;) or_mushrooms &lt;- or_glm(data = mushrooms_1, model = fit_glm) or_mushrooms %&gt;% knitr::kable() predictor oddsratio CI_low (2.5 %) CI_high (97.5 %) increment cap-colorc 6.67e+00 3.247 14.50 Indicator variable cap-colore 1.78e+00 1.263 2.55 Indicator variable cap-colorg 3.19e+00 2.272 4.56 Indicator variable cap-colorn 3.10e+00 2.210 4.41 Indicator variable cap-colorp 1.59e+00 0.992 2.56 Indicator variable cap-colorr 5.30e+06 4.411 NA Indicator variable cap-coloru 5.30e+06 4.411 NA Indicator variable cap-colorw 5.62e+00 3.951 8.12 Indicator variable cap-colory 1.49e+00 1.048 2.14 Indicator variable En esta tabla se tienen dos columnas donde “e” siginifica que la seta es comestible y “p” que la seta es venenosa. En los renglones están los colores de las setas codificados de acuerdo con la tabla anterior. En las columnas están las razones de momio para cada color para aquellas setas que son comestibles. Veamos la tabla de color y comestibilidad: table(mushrooms$edibility, mushrooms$`cap-color`) #&gt; #&gt; b c e g n p r u w y #&gt; e 48 32 624 1032 1264 56 16 16 720 400 #&gt; p 120 12 876 808 1020 88 0 0 320 672 Podemos ver que la razón de momios para p=pink y u=purple es “infinita” porque hay muy pocas observaciones para setas de esos colores. De cualquier forma, con los momios podemos concluir que aquellas setas de colores c=cinnamon y w=white aumentan los chances de que sean comestibles en 6.7 y 5.6, respectivamente. 5.5 Intervalos de confianza para los parámetros de asociación La precisión de los esitmadores de asociación está caracterizada por las distribuciones muestrales de los errores estándar. Para tablas de \\(2\\times 2\\) recordemos que \\[ \\hat{\\theta} = \\dfrac{n_{11}n_{22}}{n_{12}n_{21}} \\] Se puede demostrar que \\(\\hat{\\theta}\\) tiene una distribución normal asinotóticamente alrededor de \\(\\theta\\). A menos que \\(n\\) sea grande, la distribución muestral generalmente es sesgada. 5.5.1 Error estándar de la razón de momios Utilizando la transformación de logaritmo, la estructura multiplicativa converge muy rápidamente a la normalidad. Una aproximación del error estándar para \\(\\mbox{log}(\\hat{\\theta})\\) es \\[ \\hat{\\sigma}(\\mbox{log}\\hat{\\theta}) = \\sqrt{\\dfrac{1}{n_{11}}+\\dfrac{1}{n_{12}}+\\dfrac{1}{n_{21}}+\\dfrac{1}{n_{22}}}. \\] Como consecuencia de la normalidad de la distribución de \\(\\mbox{log}(\\hat{\\theta})\\), \\[ \\mbox{log}(\\hat{\\theta}) \\pm z_{\\alpha/2}\\hat{\\sigma}(\\mbox{log}\\hat{\\theta}) \\] 5.6 Prueba de independencia Suponemos que se tiene resultados obtenidos de una distribución multinomial y probabilidades conjuntas \\(\\{\\pi_{ij}\\}\\) en una tabla de contingencia de dimensiones \\(I\\times J\\). La hipótesis nula de independencia estadística es: \\[ H_0:\\pi_{ij}=\\pi_{i+}\\pi_{+j},\\qquad \\text{ para toda }\\;\\; i \\;\\;\\text{ y }\\;\\; j. \\] 5.6.1 La prueba \\(\\chi^2\\) de Pearson Ya estudiamos la prueba para valores específicos de probabilidades multinomiales. Una prueba de \\(H_0:\\mbox{independencia}\\) utiliza la \\(\\chi^2\\) con \\(n_{ij}\\) en lugar de \\(n_i\\) y con \\(\\mu_{ij}=n\\pi_{i+}\\pi_{+j}\\) en lugar de \\(\\mu_i\\). Bajo \\(H_0\\): \\[E(n_{ij}) = \\mu_{ij}\\] Usualmente \\(\\{\\pi_{i+}\\}\\) y \\(\\{\\pi_{+j}\\}\\) son conocidas. Sus estimadores de máxima verosimilitud son \\(\\hat{\\pi}_{i+}=n_{i+}/n\\) y \\(\\hat{\\pi}_{+j}=n_{+j}/n\\). Las frecuencias esperadas estimadas son \\[ \\{\\hat{\\mu}_{ij} = n\\hat{\\pi}_{i+}\\hat{\\pi}_{+j}=n_{i+}n_{+j}/n^2\\} \\] Por lo tanto, el estadístico de Pearson es: \\[ X^2 = \\displaystyle{\\sum_{i}\\sum_{j}{\\dfrac{(n_{ij}-\\hat{\\mu}_{ij})^2}{\\hat{\\mu}_{ij}}}}. \\] En 1900, el mismo Karl Pearson argumento que reemplazar las \\(\\{\\mu_{ij}\\}\\) por sus estimadores \\(\\{\\hat{\\mu}_{ij}\\}\\) no afectaría la distribución muestral cuando se tiene una muestra grande. Como la tabla de contingencia tiene \\(IJ\\) categorías, Pearson argumentó que la \\(X^2\\) se distribuye como chi cuadrada asintóticamente con grados de libertad \\(IJ-1\\). Sin embargo, años después (en 1922) Fisher publicó un artículo corrigiendo el error de Pearson. Lo que sucede es lo siguiente: estimar \\(\\{\\hat{\\mu}_{ij}\\}\\) requiere de estimar \\(\\{\\pi_{i+}\\}\\) y \\(\\{\\pi_{+j}\\}\\), por lo que los grados de libertad son: \\[ (IJ - 1) - (I-1) - (J-1) = (I-1)(J-1). \\] El estadístico de cociente de verosimilitud Para una muestra multinomial, el kernel de la verosimilitud es \\[ \\prod_i \\prod_j{\\pi_{ij}^{n_{ij}}},\\qquad \\;\\text{donde todas }\\;\\; \\pi_{ij}\\geq0\\;\\; \\mbox{y}\\;\\;\\sum_i \\sum_j{\\pi_{ij}}=1. \\] Bajo \\(H_0:\\text{independencia}\\), \\(\\hat{\\pi}_{ij}=\\hat{\\pi}_{i+}\\hat{\\pi}_{+j}=n_{i+}n_{+j}/n^2\\). En el caso general, \\(\\hat{\\pi}_{ij}=n_{ij}/n\\). El cociente de verosimilitud es igual a \\[ \\Lambda = \\dfrac{\\prod_i \\prod_j (n_{i+}n_{+j})^{n_{ij}}}{n^n\\prod_i\\prod_j{n_{ij}^{n_{ij}}}}. \\] El estadístico del cociente de verosimilitud es \\(-2\\mbox{log}(\\Lambda)\\). Denotado por \\(G^2\\), es igual a: \\[ G^2 = -2\\mbox{log}(\\Lambda) = 2\\sum_i\\sum_j{n_{ij}\\mbox{log}(n_{ij}/\\hat{\\mu}_{ij})} \\] Entre más grandes sean los valores de \\(G^2\\) y \\(X^2\\), mayor evidencia de independencia. En el caso general el espacio consiste de \\(\\{\\pi_{ij}\\}\\) sujeto a la restricción lineal de que deben sumar \\(1\\). El espacio de parámetros tiene dimensión \\(IJ-1\\). Bajo \\(H_0\\) el espacio está determinado por \\(\\{\\pi_{i+}\\}\\) y \\(\\{\\pi_{+j}\\}\\), por lo que su dimensión es de \\((I-1) + (J-1)\\). La diferencia entre estas dimensiones es \\((I-1)(J-1)\\). Para muestras grandes, \\(G^2\\) tiene una distribución nula \\(\\chi^2\\) con grados de libertad \\((I-1)(J-1)\\). Por lo que \\(G^2\\) y \\(X^2\\) tienen la misma distribución límite. De hecho, son asintóticamente equivalentes: \\(X^2 - G^2\\) converge en probabilidad a \\(0\\). 5.6.2 Ejemplo: brecha de género gendergap &lt;- matrix(c(279,73,225,165,47,191), byrow = T, ncol = 3) dimnames(gendergap) &lt;- list(Gender=c(&quot;Female&quot;,&quot;Male&quot;), PartyID=c(&quot;Democrat&quot;,&quot;Independent&quot;,&quot;Republican&quot;)) gendergap %&gt;% knitr::kable() Democrat Independent Republican Female 279 73 225 Male 165 47 191 La prueba de \\(\\chi^2\\) de Pearson se puede realizar con la función chisq.test que ya está en R base: chisq.test(gendergap) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: gendergap #&gt; X-squared = 7, df = 2, p-value = 0.03 5.7 General Social Survey 1972 - 2016 La Encuesta Social General (GSS) es una encuesta sociológica creada y recopilada desde 1972 por el Centro Nacional de Investigación de Opinión de la Universidad de Chicago. La GSS recopila información y mantiene un registro histórico de las preocupaciones, experiencias, actitudes y prácticas de los residentes de los Estados Unidos. Consideremos las variables de interés de la siguiente tabla: Variable Descripción Niveles YEAR Año del encuestado 1972 - 2016 GOD Grado de creencia en Dios No cree, no hay forma de saberlo, cree un un ser superior, cree en ocasiones, cree pero con dudas, sabe que existe. PARTYID Identificación con un partido político. Fuertemente democrático, algo democrático, independiente, algo republicano, fuertemente republicano, otro partido EDUC Educación del encuestado Años de educación desde 1ro de primaria hasta 8 años de educación universitaria HAPPY Grado de felicidad del encuestado Muy feliz, algo feliz, no muy feliz, POSTLIFE Creencia de la vida después de la muerte Sí, No WRKSTAT Tipo de situación laboral Tiempo completo, tiempo parcial, con trabajo pero de vacaciones o incapacidad, desempleado, retirado, en la escuela, al cuidado de la casa, otra FINRELA Ingreso con respecto a la media nacional Muy por debajo, debajo, promedio, encima, muy por encima del promedio Más información en: http://gss.norc.org/. gss &lt;- read_csv(&quot;datos/gss.csv&quot;) Veamos los datos de la encuesta del 2006 al 2016. Creamos una variable categórica para analizar la variable de educación más facilamente: gss_0616 &lt;- gss %&gt;% filter(YEAR &gt;= 2006 &amp; YEAR &lt;= 2016) %&gt;% mutate(EDUC1 = ifelse(EDUC &lt; 12, &quot;Some HS&quot;, ifelse(EDUC == 12, &quot;HS&quot;, ifelse(EDUC &lt; 16, &quot;Some College&quot;, ifelse(EDUC == 16, &quot;College&quot;, &quot;Graduate&quot;)))), EDUC1 = ordered(EDUC1, levels=c(&quot;Some HS&quot;,&quot;HS&quot;, &quot;Some College&quot;, &quot;College&quot;, &quot;Graduate&quot;)), GOD1 = ordered(GOD, levels=c(&quot;DONT BELIEVE&quot;,&quot;NO WAY TO FIND OUT&quot;,&quot;SOME HIGHER POWER&quot;, &quot;BELIEVE SOMETIMES&quot;,&quot;BELIEVE BUT DOUBTS&quot;,&quot;KNOW GOD EXISTS&quot;))) %&gt;% select(EDUC1, GOD1) %&gt;% drop_na() Veamos la tabla de contingencias: table(gss_0616$EDUC1, gss_0616$GOD1) %&gt;% knitr::kable() DONT BELIEVE NO WAY TO FIND OUT SOME HIGHER POWER BELIEVE SOMETIMES BELIEVE BUT DOUBTS KNOW GOD EXISTS Some HS 53 60 134 98 288 1607 HS 105 146 342 140 631 2551 Some College 113 216 461 155 620 2221 College 93 163 345 98 413 1235 Graduate 106 200 332 77 377 910 A esta gráfica le llamamos gráfica de mosaicos: ggplot(gss_0616, aes(x=EDUC1, fill=GOD1)) + geom_bar(position=&#39;fill&#39;) + coord_flip() + theme(aspect.ratio = 1,legend.position=&quot;bottom&quot;, axis.text.y=element_text(color=&#39;black&#39;,size=10), axis.text.x=element_text(color=&#39;black&#39;,size=10), axis.title.x=element_text(size=12), axis.title.y=element_text(size=12), legend.text=element_text(size=11)) + scale_fill_discrete(&quot;&quot;) + ylab(&#39;Proporción&#39;) Comparamos pruebas de hipótesis con los estadísticos \\(G^2\\) y \\(X^2\\): library(Deducer) likelihood.test(gss_0616$EDUC1, gss_0616$GOD1) #&gt; #&gt; Log likelihood ratio (G-test) test of independence without #&gt; correction #&gt; #&gt; data: gss_0616$EDUC1 and gss_0616$GOD1 #&gt; Log likelihood ratio statistic (G) = 500, X-squared df = 20, #&gt; p-value &lt;2e-16 chisq.test(gss_0616$EDUC1, gss_0616$GOD1) #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: gss_0616$EDUC1 and gss_0616$GOD1 #&gt; X-squared = 500, df = 20, p-value &lt;2e-16 Estas estadísticas pueden ser evidencia de una asociación estadística fuerte. Para entender mejor la naturaleza de la evidencia en contra de \\(H_0\\) es necesario comparar casilla por casilla las frecuencias estimadas y observadas. Definimos los residuales ajustados como \\[ r_{ij} = \\dfrac{n_{ij} - \\hat{\\mu}_{ij}}{\\sqrt{\\hat{\\mu}_{ij}(1-p_{i+})(1-p_{+j})}}. \\] Bajo \\(H_0\\) cada \\(r_{ij}\\) tiene una distribución muestral aproximada normal estándar. Si en una casilla \\(r_{ij}\\) excede 2 en valor absoluto, entonces esto significa que en esa casilla el modelo de independencia (\\(H_0\\)) no es muy apropiado. El signo describe la naturaleza de la asociación. Veamos el cálculo de los residuales: tabla &lt;- table(gss_0616$EDUC1, gss_0616$GOD1) rowsum &lt;- apply(tabla,1,sum) colsum &lt;- apply(tabla,2,sum) n &lt;- sum(tabla) gd &lt;- outer(rowsum, colsum/n) rowp &lt;- rowsum/n #Prob. margimales renglón colp &lt;- colsum/n #Prob. marginales columna pd &lt;- outer(1-rowp,1-colp) resid &lt;- (tabla-gd)/sqrt(gd*pd) resid %&gt;% knitr::kable() DONT BELIEVE NO WAY TO FIND OUT SOME HIGHER POWER BELIEVE SOMETIMES BELIEVE BUT DOUBTS KNOW GOD EXISTS Some HS -2.67 -6.367 -8.65 1.056 -4.802 12.70 HS -2.50 -5.685 -5.94 -1.499 -0.359 8.25 Some College -1.23 0.667 2.00 0.438 0.152 -1.44 College 2.00 3.376 5.70 0.544 1.863 -7.59 Graduate 5.43 9.522 8.06 -0.318 3.309 -13.96 En la columna “God Know Exists” observamos residuales particularmente grandes: con signo positivo: 12.70 para “Some HS” y 8.25 para “HS”, significa que el número observado de personas que “saben que Dios existe” entre los encuestados con secundario o menor grado de estudios es mayor que el esperado. con signo negativo: -7.59 para “Collge” y -13.96 “Graduate”, significa que el número observado de personas que “saben que Dios existe” entre las que fueron a la universidad (licenciatura o posgrado) es menor que el esperado. De la tabla se podría concluir que el grado de estudios tiene una asociación negativ con el gardo de creencia en la existencia de Dios. 5.8 La catadora de té Una tarde del verano de 1920 en Cambridge, Inglaterra, Ronald Fisher tomaba el té en la terraza con sus colegas y amigos. La reunión había progresado complacientemente y en una ocasión cuando las tazas de té las volvían a llenar, Lady Muriel Bristol abruptadmente le dijo al mesero que parara de rellenar su taza. Lady Bristol indicó con desdeño que el mesero había puesto en la taza primero la leche y luego el té, en lugar de cumplir con una preferencia ampliamente conocida de té primero y luego leche. Miradas de reojo fueron intercambiadas por numerosos miembros del grupo, preguntándose qué diferencia podría haber con que se añadiera a la taza primero la leche o primero el té. Hacía toda la diferencia, según Lady Bristol, afirmando que fácilmente ella podía decir si se había vertido primero en la taza la leche o el té. Muy a salvo de la vista de Lady Bristol, se prepararon 8 tazas de té, en las cuales en 4 se virtió primero la leche y luego el té, y en las 4 restantes se virtió primero la leche y luego el té, siempre en las mismas proporciones. Muy amablemente, Lady Bristol cató las 8 tazas de té y dio su veredicto sobre cuáles de las 4 tazas eran aquellas en las q se sirvió primero la leche y luego el té. Los resultados obtenidos a partir de esta cata de té se muestran en la siguiente tabla: Poured &lt;- c(&quot;Milk&quot;,&quot;Milk&quot;,&quot;Tea&quot;,&quot;Tea&quot;) Guess &lt;- c(&quot;Milk&quot;,&quot;Tea&quot;,&quot;Milk&quot;,&quot;Tea&quot;) count &lt;- c(3,1,1,3) teadata &lt;- tibble(Poured, Guess, count) tea &lt;- xtabs(count ~Poured + Guess, data = teadata) tea %&gt;% knitr::kable() Milk Tea Milk 3 1 Tea 1 3 Utilizando el método de la \\(\\chi^2\\) de Pearson hacemos la prueba de independencia \\(H_0:\\theta=1\\): chisq.test(tea, correct = FALSE) #&gt; Warning in chisq.test(tea, correct = FALSE): Chi-squared approximation may #&gt; be incorrect #&gt; #&gt; Pearson&#39;s Chi-squared test #&gt; #&gt; data: tea #&gt; X-squared = 2, df = 1, p-value = 0.2 Obtenemos el mensaje de que la prueba podría ser incorrecta. Esto no nos sorprende ya que la prueba no tiene mucha potencia debido al poco número de observaciones. ¡Fisher no le daría a probar 30 tazas a Lady Bristol sin convertirse en el objeto de su desdeño! El método de R implementa la prueba de \\(\\chi^2\\) utilizando la corrección de Yates cuando el tamaño de muestra es pequeño: \\[ X^2_Y = \\sum_{i}\\sum_j{\\dfrac{(|n_{ij}-\\hat{\\mu}_{ij}|-\\frac{1}{2})^2}{\\hat{\\mu}_{ij}}}\\sim\\chi^2_{(I-1)(J-1)} \\] En el libro The Lady Tasting Tea: How Statistics Revolutionized Science in the Twentieth Century escrito por David Salsburg, se describe con detalle este suceso y los experimentos diseñados por Ronald Fisher para probar las afirmaciones de Lady Bristol. 5.9 Modelos multinomiales para conteos Condicional a la suma \\(n\\) de conteos de casillas en tablas de contingencia, los modelos log-lineales Poisson para \\(\\{\\mu_{ij}\\}\\) se convierten en modelos multinomiales para las probabilidades de las casillas \\[ \\left\\{\\pi_{ij} = \\mu_{ij}/\\sum_a\\sum_b{\\mu_{ab}}\\right\\} \\] Por ejemplo, para el modelo saturado: \\[ \\pi_{ij} = \\dfrac{\\mbox{exp}(\\lambda + \\lambda_i^X + \\lambda_j^Y + \\lambda_{ij}^{XY})}{\\sum_a\\sum_b{\\mbox{exp}(\\lambda+\\lambda_a^X+\\lambda_b^Y+\\lambda_{ab}^{XY})}}. \\] El parámetro de intercepto \\(\\lambda\\) se cancela en este modelo multinomial. Este parámetro está relacionado con el tamaño total de la muestra, que es aleatorio en el modelo Poisson, pero no lo es en el modelo multinomial. Por esta razón, el modelo multinomial saturado tiene \\(IJ-1\\) parámetros, que representa la restricción usual de las probabilidades, o sea, \\(\\sum_i\\sum_j{\\pi_{ij}}=1\\). Por esta razón ajustar un modelo lineal Poisson con función liga \\(\\eta = log(\\mu)\\). Veremos esto con más detalle en las siguientes clases. Recordemos el ejemplo de las admisiones de posgrado de Berkeley. library(MASS) UCBAdmissions %&gt;% as.data.frame() %&gt;% knitr::kable() Admit Gender Dept Freq Admitted Male A 512 Rejected Male A 313 Admitted Female A 89 Rejected Female A 19 Admitted Male B 353 Rejected Male B 207 Admitted Female B 17 Rejected Female B 8 Admitted Male C 120 Rejected Male C 205 Admitted Female C 202 Rejected Female C 391 Admitted Male D 138 Rejected Male D 279 Admitted Female D 131 Rejected Female D 244 Admitted Male E 53 Rejected Male E 138 Admitted Female E 94 Rejected Female E 299 Admitted Male F 22 Rejected Male F 351 Admitted Female F 24 Rejected Female F 317 Ajustamos los parámetros para el modelo llmFit &lt;- loglm(~ Admit + Gender + Dept, data = UCBAdmissions) coef(llmFit) #&gt; $`(Intercept)` #&gt; [1] 5.18 #&gt; #&gt; $Admit #&gt; Admitted Rejected #&gt; -0.228 0.228 #&gt; #&gt; $Gender #&gt; Male Female #&gt; 0.191 -0.191 #&gt; #&gt; $Dept #&gt; A B C D E F #&gt; 0.2305 -0.2363 0.2143 0.0666 -0.2380 -0.0370 Comparamos utilizando el modelo Poisson: UCBdf &lt;- as.data.frame(UCBAdmissions) glmFit &lt;- glm(Freq ~ Admit + Gender + Dept, family=poisson(link = &quot;log&quot;), contrasts=list(Admit=contr.sum, Gender=contr.sum, Dept=contr.sum), data=UCBdf) coef(glmFit) #&gt; (Intercept) Admit1 Gender1 Dept1 Dept2 Dept3 #&gt; 5.1776 -0.2284 0.1914 0.2305 -0.2363 0.2143 #&gt; Dept4 Dept5 #&gt; 0.0666 -0.2380 5.10 Modelos log lineales con tres variables categóricas En la primera clase vimos ejemplos de modelos log lineales con tres variables categóricas. Sabemos construir las tablas de contingencia de tres variables con la función xtabs() y ajustar los modelos con las funciones loglin(), loglm(), y glm(). Vimos que se podía ajustar modelos de independencia y en general, de diferentes tipos de asociaciones. Una tabla de contingencia de \\(I\\times J \\times K\\) con variables de respuesta \\(X, Y\\) y \\(Z\\) potencialmente tiene varios tipos de independencias. Los modelos se aplican a la distribución multinomial con probabilidades de celdillas \\(\\{\\pi_{ijk}\\}\\) en las cuales \\(\\sum_i\\sum_j\\sum_k\\pi_{ijk}=1\\) y también a muestreo con Poisson con medias \\(\\mu_{ijk}\\). 5.10.1 Tipos de independencia Independencia mutua Las tres variables son mutuamente independientes cuando \\[ \\pi_{ijk}=\\pi_{i++}\\pi_{+j+}\\pi_{++k}\\qquad\\;\\text{para toda}\\;i,j,\\,\\mbox{ y }\\, k. \\] Para frecuencias esperadas \\(\\mu_{ijk}\\), la independencia mutua tiene un modelo loglineal de la forma \\[ \\mbox{log}\\,\\mu_{ijk} = \\lambda+\\lambda_{i}^X+\\lambda_j^Y+\\lambda_k^Z. \\] Independencia conjunta La variable \\(Y\\) es conjuntamente independiente de \\(X\\) y \\(Z\\) cuando \\[ \\pi_{ijk}=\\pi_{i+k}\\pi_{+j+}\\qquad\\;\\text{para toda}\\;i,j,\\,\\mbox{ y }\\, k. \\] Esto es equivalente a tener independencia entre la variable \\(Y\\) y una variable con las \\(IK\\) combinaciones de los niveles de \\(X\\) y \\(Z\\). El modelo loglineal es: \\[ \\mbox{log}\\,\\mu_{ijk} = \\lambda+\\lambda_{i}^X+\\lambda_j^Y+\\lambda_k^Z + \\lambda_{ik}^{XZ}. \\] Similarmente, \\(X\\) podría ser conjuntamente independiente de \\(Y\\) y \\(Z\\), o bien, \\(Z\\) podría ser conjuntamente independiente de \\(X\\) y \\(Y\\). La independencia mutua implica independencia conjunta de cualquier variable con las otras dos. Independencia condicional Las variables categóricas \\(X\\) y \\(Y\\) son condicionalmente independientes dado \\(Z\\) cuando se cumple la independencia para cada tabla parcial cuando cada \\(Z\\) permanece fija. Esto es, si \\(\\pi_{ij|k}=P(X=i,Y=j|Z=k)\\), entonces \\[ \\pi_{ij|k}=\\pi_{i+|k}\\pi_{+j|k}\\qquad\\;\\text{para toda}\\;i,j,\\,\\mbox{ y }\\, k. \\] Para probabilidades conjuntas en toda la tabla esto es equivalente: \\[ \\pi_{ijk}=\\pi_{i+k}\\pi_{+jk}/\\pi_{++k}\\qquad\\;\\text{para toda}\\;i,j,\\,\\mbox{ y }\\, k. \\] La independencia condicional de \\(X\\) y \\(Y\\), dado \\(Z\\), tiene un modelo loglineal de la forma \\[ \\mbox{log}\\,\\mu_{ijk} = \\lambda+\\lambda_i^X+\\lambda_j^Y + \\lambda_k^Z+ \\lambda_{ik}^{XZ} + \\lambda_{jk}^{YZ}. \\] Esta es una condición más débil de independencia conjunta. La independencia mutua implica que \\(Y\\) es conjuntamente independiente de \\(X\\) y \\(Z\\), la cual implica que \\(X\\) y \\(Y\\) son condicionalmente independientes. En la siguiente tabla resumimos los tres tipos de independencia: Modelo Forma probabilística para \\(\\pi_{ijk}\\) Términos de asociación en el modelo loglineal Interpretación 1 \\(\\pi_{i++}\\pi_{+j+}\\pi_{++k}\\) Ninguno Independencia mutua de \\(X,Y,Z\\) 2 \\(\\pi_{i+k}\\pi_{+j+}\\) \\(\\lambda_{ik}^{XZ}\\) Independencia conjunta de \\(Y\\) con \\(X,Z\\) 3 \\(\\pi_{i+k}\\pi_{+jk}/\\pi_{++k}\\) \\(\\lambda_{ik}^{XZ}+\\lambda_{jk}^{YZ}\\) Independencia condicional de \\(X\\) y \\(Y\\) dado \\(Z\\) 5.10.2 Asociación homogénea e interacciones de 3 factores Los modelos (1), (2), y (3) tienen tres, dos, y un par de variables condicionalmente independientes, respectivamente. En los modelos (2) y (3) los parámetros con doble subíndice (tales como \\(\\lambda_{ij}^{XY}\\)) representan dependencias condicionales entre las variables. Un modelo con las tres dependencias condicionales es \\[ \\mbox{log}\\,\\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y + \\lambda_k^Z + \\lambda_{ij}^{XY} + \\lambda_{ik}^{XZ} + \\lambda_{jk}^{YZ}. \\] Si exponenciamos ambas partes de la ecuación, las probabilidades en cada casilla tienen la forma \\[ \\pi_{ijk} = \\psi_{ij}\\phi_{jk}\\omega_{ik}. \\] No existe una expresión cerrada para los tres factores en términos de los márgenes de las \\(\\{\\pi_{ijk}\\}\\) en el caso general. Se puede demostrar que las razones de momios entre caulesquiera dos pares de variables son idénticos en cada categoría de la tercera variable. A este modelo se le llama el modelo loglineal de asociación homogénea, o bien, el modelo de no interacción entre los 3 factores. El modelo loglineal general es \\[ \\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y + \\lambda_k^Z + \\lambda_{ij}^{XY} + \\lambda_{jk}^{YZ} + \\lambda_{jk}^{YZ} + \\lambda_{ijk}^{XYZ} \\] Con variables indicadoras, \\(\\lambda_{ijk}^{XYZ}\\) es el coeficiente del producto de la \\(i\\)-ésima variable indicadora de \\(X\\), la \\(j\\)-ésima de \\(Y\\), y la \\(k\\)-ésima de \\(Z\\). El número total de parámetros no redundates es \\[\\begin{eqnarray*} 1 &amp;+&amp; (I-1) + (J-1) + (K-1) + (I-1)(J-1) + (I-1)(K-1) \\\\ &amp;+&amp; (J-1)(I-1) + (I-1)(J-1)(K-1) = IJK, \\end{eqnarray*}\\] que es el número total de conteos de casillas. Este modelo tiene tantos parámetros como observaciones y es saturado. Describe todas las posibles \\(\\{\\mu_{ijk}\\}\\). Cada par de variables pueden ser condicionalmente dependientes, y las razones de momios para cada par pueden variar a lo largo de todas las categorías de la tercera variable. Poniendo algunos términos como cero obtenemos cualquiera de los modelos anteriores. En la siguiente tabla resumimos los modelos. Para facilitar cuando nos referimos a ellos en la tabla le asignamos un símbolo que pone en la lista únicamente el (los) términos de mayor orden para cada variable. Por ejemplo, el modelo (3) de independencia condicional se codifica como (XZ, YZ), porque sus términos de mayor orden son \\(\\lambda_{ik}^{XZ}\\) y \\(\\lambda_{jk}^{YZ}\\). Fórmula del modelo loglineal Símbolo \\(\\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y,+,\\lambda_k^Z\\) (X,Y,Z) \\(\\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y,+,\\lambda_k^Z + \\lambda_{ij}^{XY}\\) (XY,Z) \\(\\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y,+,\\lambda_k^Z + \\lambda_{ij}^{XY} + \\lambda_{jk}^{YZ}\\) (XY,YZ) \\(\\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y +,\\lambda_k^Z + \\lambda_{ij}^{XY} + \\lambda_{jk}^{YZ} + \\lambda_{jk}^{YZ}\\) (XY,YZ,XZ) \\(\\mbox{log}\\, \\mu_{ijk} = \\lambda + \\lambda_i^X + \\lambda_j^Y + \\lambda_k^Z + \\lambda_{ij}^{XY} + \\lambda_{jk}^{YZ} + \\lambda_{jk}^{YZ} + \\lambda_{ijk}^{XYZ}\\) (XYZ) Finalmente, en la siguiente tabla resumímos el número de grados de libertad de los estadísticos \\(G^2\\) y \\(X^2\\) que tienen una distribución muestral aproximada a \\(\\chi^2\\). El número de grados de libertad es igual a la diferencia entre el número de parámetros en el caso general y cuando el modelo se cumple. En el caso general hay \\(IJK-1\\) parámetros. Modelo Grados de libertad \\((X,Y,Z)\\) \\(IJK - I - J - K + 2\\) \\((XY,Z)\\) \\((K-1)(IJ-1)\\) \\((XZ,Y)\\) \\((J-1)(IK-1)\\) \\((YZ,X)\\) \\((I-1)(JK-1)\\) \\((XY,YZ)\\) \\(J(I-1)(K-1)\\) \\((XZ,YZ)\\) \\(K(I-1)(J-1)\\) \\((XY,XZ)\\) \\(I(J-1)(K-1)\\) \\((XY,XZ,YZ)\\) \\((I-1)(J-1)(K-1)\\) \\((XYZ)\\) \\(0\\) 5.11 Ejemplo: sensitividad y especificidad En la siguiente tabla se muestran resultados de un artículo reciente sobre varios métodos para tratar de diagnosticar el VIH. Delaney, K. P., Branson, B. M., Uniyal, A., Phillips, S., Candal, D., Owen, S. M., &amp; Kerndt, P. R. (2011). Evaluation of the performance characteristics of 6 rapid HIV antibody tests. Clinical Infectious Diseases, 52(2), 257-263. El paciente tiene VIH Diagnóstico positivo Diagnóstico negativo Total Sí 0.99 0.01 1.0 No 0.05 0.95 1.0 Con base en una revisión de la literatura, los autores concluyen que, como el rendimiento fue similar para todas las pruebas rápidas y todos los tipos de especímenes, entonces otras características, como la conveniencia, el tiempo para obtener el resultado, la vida útil y el costo serán factores determinantes para la selección de una prueba rápida de detección del VIH para una aplicación específica. Sea \\(X=\\) verdadero valor de la enfermedad (si el paciente tiene VIH o no) y sea \\(Y=\\) diagnóstico (positivo o negativo), donde un diagnóstico positivo predice que el individuo tiene VIH. Las probabilidades mostradas en la tabla son probabilidades condicionales de \\(Y\\) dado \\(X\\). Con una prueba de diagnóstico de una enfermedad, los dos diagnósticos correctos son: un resultado positivo de la prueba cuando el individuo tiene la enfermedad, y un resultado negativo cuando el individuo no la tiene. Dado que el individuo tiene la enfermedad, la probabilidad condicional de que la prueba de diagnóstico sea positiva se denomina sensibilidad. Dado que el individuo no tiene la enfermedad, la probabilidad condicional de que la prueba sea negativa se llama especificidad. Idealmente, estos son altos. En una tabla de \\(2\\times 2\\) como la que se muestra arriba, la sensibilidad es \\(\\pi_{1|1}\\) y la especificidad es \\(\\pi_{2|2}\\). En la tabla de de arriba, la sensibilidad estimada de las pruebas rápidas del VIH es \\(0.99\\). Entre los individuos con VIH, el 99% es diagnosticado correctamente. La especificidad estimada es 0.95. Entre los individuos que no tienen VIH, el 95% es diagnosticado correctamente. 5.12 Ejemplo: horóscopos Supongamos que deseamo saber si los horóscopos son realmente sólo un figmento de la imaginación de las personas. Se hizo una encuesta con 2201 personas. Se les pidió su signo zodiacal (esta variable, obviamente, tiene 12 categorías: Capricornio, Acuario, Piscis, Aries, Tauro, Géminis, Cáncer, Leo, Virgo, Libra, Escorpio y Sagitario) y que contestaran si creían en los horóscopos (estas dos variables tienen dos categorías: creen o no creen). Posteriormente a todos los sujetos se les envió exactamente el mismo horóscopo sobre cómo sería el siguiente mes y al finalizar el mes se les preguntó si su horóscopo se cumplió o no. Buscamos realizar un análisis loglineal para ver si existe una relación entre el signo zodiacal de la persona, si cree en los horóscopos y si el horóscopo se hizo realidad. Comenzamos leyendo los datos: horoscopos &lt;- read_csv(&quot;datos/horoscopos.csv&quot;) #&gt; Parsed with column specification: #&gt; cols( #&gt; Star_Sign = col_character(), #&gt; Believe = col_character(), #&gt; True = col_character(), #&gt; Frequency = col_integer() #&gt; ) horoscopos %&gt;% head() %&gt;% knitr::kable() Star_Sign Believe True Frequency Capricorn Unbeliever Horoscope Didn’t Come True 56 Capricorn Unbeliever Horoscope Came True 46 Capricorn Believer Horoscope Didn’t Come True 50 Capricorn Believer Horoscope Came True 60 Aquarius Unbeliever Horoscope Didn’t Come True 26 Aquarius Unbeliever Horoscope Came True 20 Hacemos la tabla de contingencia con la función xtabs() y tabla_horoscopos &lt;- xtabs(Frequency ~ Star_Sign + Believe + True, data = horoscopos) tabla_horoscopos #&gt; , , True = Horoscope Came True #&gt; #&gt; Believe #&gt; Star_Sign Believer Unbeliever #&gt; Aquarius 29 20 #&gt; Aries 54 36 #&gt; Cancer 83 76 #&gt; Capricorn 60 46 #&gt; Gemini 48 53 #&gt; Leo 20 23 #&gt; Libra 36 26 #&gt; Pisces 70 51 #&gt; Sagittarius 50 41 #&gt; Scorpio 32 20 #&gt; Taurus 50 42 #&gt; Virgo 66 55 #&gt; #&gt; , , True = Horoscope Didn&#39;t Come True #&gt; #&gt; Believe #&gt; Star_Sign Believer Unbeliever #&gt; Aquarius 22 26 #&gt; Aries 70 42 #&gt; Cancer 96 84 #&gt; Capricorn 50 56 #&gt; Gemini 40 65 #&gt; Leo 12 14 #&gt; Libra 22 27 #&gt; Pisces 64 55 #&gt; Sagittarius 42 56 #&gt; Scorpio 24 32 #&gt; Taurus 41 56 #&gt; Virgo 49 69 Comenzamos el análisis con el modelo saturado: horoscopo_saturado &lt;- loglm(Frequency ~ Star_Sign*Believe*True, data = tabla_horoscopos) horoscopo_saturado #&gt; Call: #&gt; loglm(formula = Frequency ~ Star_Sign * Believe * True, data = tabla_horoscopos) #&gt; #&gt; Statistics: #&gt; X^2 df P(&gt; X^2) #&gt; Likelihood Ratio 0 0 1 #&gt; Pearson 0 0 1 Podemos ver que el número de grados de libertad es cero, esto es, el número de parámetros es igual al número de observaciones. Quitamos la interacción de los 3 factores y vemos la diferencia entre ambos modelos utilizando la función anova(): horoscopo_homogeneo &lt;- update(horoscopo_saturado, .~. -Star_Sign:Believe:True) anova(horoscopo_saturado, horoscopo_homogeneo) #&gt; LR tests for hierarchical log-linear models #&gt; #&gt; Model 1: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True + Believe:True #&gt; Model 2: #&gt; Frequency ~ Star_Sign * Believe * True #&gt; #&gt; Deviance df Delta(Dev) Delta(df) P(&gt; Delta(Dev) #&gt; Model 1 8.84 11 #&gt; Model 2 0.00 0 8.84 11 0.637 #&gt; Saturated 0.00 0 0.00 0 1.000 Ahora podemos quitar las interacciones una a la vez: BelieveTrue &lt;- update(horoscopo_homogeneo, .~. -Believe:True) Star_SignTrue &lt;- update(horoscopo_homogeneo, .~. -Star_Sign:True) Star_SignBelieve &lt;- update(horoscopo_homogeneo, .~. -Star_Sign:Believe) Podemos ver nuevamente las diferencias de cada uno con respecto al modelo de asociación homogénea: anova(horoscopo_homogeneo, Star_SignTrue) #&gt; LR tests for hierarchical log-linear models #&gt; #&gt; Model 1: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Believe:True #&gt; Model 2: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True + Believe:True #&gt; #&gt; Deviance df Delta(Dev) Delta(df) P(&gt; Delta(Dev) #&gt; Model 1 19.58 22 #&gt; Model 2 8.84 11 10.74 11 0.465 #&gt; Saturated 0.00 0 8.84 11 0.637 anova(horoscopo_homogeneo, BelieveTrue) #&gt; LR tests for hierarchical log-linear models #&gt; #&gt; Model 1: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True #&gt; Model 2: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True + Believe:True #&gt; #&gt; Deviance df Delta(Dev) Delta(df) P(&gt; Delta(Dev) #&gt; Model 1 21.38 12 #&gt; Model 2 8.84 11 12.54 1 0.0004 #&gt; Saturated 0.00 0 8.84 11 0.6365 anova(horoscopo_homogeneo, Star_SignBelieve) #&gt; LR tests for hierarchical log-linear models #&gt; #&gt; Model 1: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:True + Believe:True #&gt; Model 2: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True + Believe:True #&gt; #&gt; Deviance df Delta(Dev) Delta(df) P(&gt; Delta(Dev) #&gt; Model 1 29.51 22 #&gt; Model 2 8.84 11 20.67 11 0.037 #&gt; Saturated 0.00 0 8.84 11 0.637 El modelo que consideraríamos más apropiado sería el que no incluye la interacción de Star_Sign y True. Comparamos con todos los modelos: anova(horoscopo_homogeneo, BelieveTrue, Star_SignTrue, Star_SignBelieve) #&gt; LR tests for hierarchical log-linear models #&gt; #&gt; Model 1: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Believe:True #&gt; Model 2: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:True + Believe:True #&gt; Model 3: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True #&gt; Model 4: #&gt; Frequency ~ Star_Sign + Believe + True + Star_Sign:Believe + Star_Sign:True + Believe:True #&gt; #&gt; Deviance df Delta(Dev) Delta(df) P(&gt; Delta(Dev) #&gt; Model 1 19.58 22 #&gt; Model 2 29.51 22 -9.93 0 1.0000 #&gt; Model 3 21.38 12 8.12 10 0.6166 #&gt; Model 4 8.84 11 12.54 1 0.0004 #&gt; Saturated 0.00 0 8.84 11 0.6365 Elegimos el modelo 1 (Star_Sign:True) porque tiene menor devianza para un número de parámetros aceptable (el número de grados de libertad es mayor). Esto implica que no hay asociación entre “si es verdad el horóscopo” y signo zodiacal, sin embargo sí existe una relación entre el signo zodiacal y si creen que el horóscopo es verdad. Por ejemplo, los Aries tienden a creer mucho en su horóscopo, pero los Géminis no. Star_SignTrue$param$Star_Sign.Believe #&gt; Believe #&gt; Star_Sign Believer Unbeliever #&gt; Aquarius 0.0302 -0.0302 #&gt; Aries 0.2104 -0.2104 #&gt; Cancer 0.0348 -0.0348 #&gt; Capricorn 0.0164 -0.0164 #&gt; Gemini -0.1680 0.1680 #&gt; Leo -0.0939 0.0939 #&gt; Libra 0.0237 -0.0237 #&gt; Pisces 0.0959 -0.0959 #&gt; Sagittarius -0.0478 0.0478 #&gt; Scorpio 0.0157 -0.0157 #&gt; Taurus -0.0584 0.0584 #&gt; Virgo -0.0590 0.0590 5.13 Tarea (opcional) Demuestra que si \\((n_1,n_2,\\ldots,n_c)\\) sigue una distribución multinomial, entonces \\(\\mbox{Cov}(n_i,n_j)=-n\\pi_i \\pi_j\\) para toda \\(i\\neq j\\). Para esto, define \\(Y_{ij}\\) como \\[ Y_{ij} = \\left\\{ \\begin{array}{cl} 1 &amp; \\text{si la }\\; i\\text{-esima observacion es la categoria }j,\\\\ 0 &amp; \\text{en otro caso.} \\end{array}\\right. \\] Sea \\(Y_i=(Y_{i1},\\ldots,Y_{ic})\\) el vector aleatorio correspondiente a la observación \\(i\\), tal que cada \\(Y_i\\) tiene parámetros \\[ \\pi = E(Y_i), \\qquad \\Sigma=\\mbox{Cov}(Y_i),\\quad i=1,\\ldots,n. \\] \\(Y_1,Y_2,\\ldots,Y_n\\) son independientes e idénticamente distribuidos. Calcula \\(\\sigma_{jk}\\) para \\(j\\neq k\\) y \\(\\sigma_{jj}\\). Escribe \\(\\mbox{Cov}(Y_i) = \\sigma\\) en forma matricial. Define \\(p=(n_1,\\ldots,n_c)\\) en términos de \\((Y_1, \\ldots, Y_n)\\). Calcula \\(\\mbox{Cov}(p)\\) y concluye que \\(\\mbox{Cov}(n_i,n_j)=-n\\pi_i\\pi_j\\) si \\(i\\neq j\\). Para probar \\(H_0:\\pi_j = \\pi_{j0}\\), \\(j=1,\\ldots,c\\) con proporciones multinomiales muestrales \\(\\{\\hat{\\pi}_j\\}\\) el estadístico del cociente de verosimilitud es \\[ G^2 = -2n \\sum_j{\\hat{\\pi}_j}\\,\\mbox{log}\\left(\\pi_{j0}/\\hat{\\pi}_j\\right). \\] Demuestra que \\(G^2 \\neq 0\\) y que la igualdad se da si y sólo si \\(\\hat{\\pi}_j=\\pi_{j0}\\) para toda \\(j\\). Para demostrar esto aplica la desigualdad de Jensen a \\(E(-2n\\,\\mbox{log}(X))\\), donde \\(X\\) es igual a \\(\\pi_{j0}/\\hat{\\pi_j}\\) con probabilidad \\(\\hat{\\pi}_j\\). Muestra que \\(X^2 \\leq n \\,\\cdot\\,\\mbox{min}(I-1,J-1)\\). Por lo cual, \\[ V^2=\\dfrac{X^2}{n \\,\\cdot\\,\\mbox{min}(I-1,J-1)} \\] está entre \\(0\\) y \\(1\\). A \\(V^2\\) se le llama la V de Cramér. Con los datos de la encuesta GSS realiza un análisis para responder las siguientes preguntas. ¿Las personas que creen en la vida después de la muerte son más felices? ¿Está asociada la creencia en la existencia de Dios con la afiliación política? Para esto combina las categorías de PARTYID de la siguiente forma: las categorías \\(0,1\\) para Demócratas, \\(2,3,4\\) para Independientes, y \\(5,6\\) para Republicanos. "],
["regresion-logistica.html", "Clase 6 Regresión logística 6.1 Regresión logística con un solo predictor 6.2 El modelo de regresión logística 6.3 Tarea", " Clase 6 Regresión logística .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } La regresión logística es la forma estándar de modelar los resultados binarios (es decir, los datos \\(y_i\\) que toman los valores \\(0\\) o \\(1\\)). 6.1 Regresión logística con un solo predictor library(arm) Los científicos políticos han estado interesados en la identificación de partidos y sus cambios a lo largo del tiempo. Ilustramos aquí con una serie de regresiones transversales que modelan la identificación del partido dada la ideología política y las variables demográficas. Usamos una encuesta llamada National Election Study. brdata &lt;- read_csv(&quot;datos/brdata.csv&quot;) Contamos con los siguientes predictores: identificación con un partido en una escala de 1-7 (1 = demócrata fuerte, 2 = demócrata, 3 = demócrata débil, 4 = independiente, …, 7 = republicano fuerte), que tratamos como una variable continua. ideología política (1 = fuerte liberal, 2 = liberal,., 7 = fuerte conservador), etnia (0 = blanco, 1 = negro, 0.5 = otro), edad (como categorías: 18- 29, 30-44, 45-64 y más de 65 años, con la categoría de edad más baja como referencia), educación (1 = sin escuela secundaria, 2 = graduado de la escuela secundaria, 3 = algunos estudios universitarios, 4 = graduado de la universidad), sexo (0 = hombre, 1 = mujer), ingreso (1 = percentil 0-16, 2 = percentil 17-33, 3 = percentil 34-67, 4 = percentil 68-95, 5 = percentil 96-100). Los partidos conservadores generalmente reciben más apoyo entre los votantes con mayores ingresos. Veamos cómo usar la regresión logística clásica con un análisis simple de este patrón de las elecciones de Estados Unidos en 1992. datos &lt;- brdata %&gt;% filter(!is.na(black) &amp; !is.na(female) &amp; !is.na(educ1) &amp; !is.na(age) &amp; !is.na(income) &amp; !is.na(state)) %&gt;% filter(!is.na(year)) %&gt;% filter(year %in% 1952:2000) %&gt;% mutate(year.new = match(year, unique(year)), income.new = income - 3, age.new = (age - mean(age))/10, y = rep_pres_intent, age.discrete = as.numeric(cut(age, c(0,29.5, 44.5, 64.5, 200))), race.adj = ifelse(race &gt;= 3, 1.5, race)) Para cada encuestado ponemos \\(y_i=1\\) si el encuestado prefería a George Bush (el candidato Republicano a presidente) o \\(y_i=0\\) si prefería a Bill Clinton (el candidato Demócrata). Por ahora excluímos a los encuestados que preferían a Ross Perot u otros candidatos, o que no tenían opinión. datos_2 &lt;- datos %&gt;% filter(year == 1992 &amp; presvote &lt; 3) %&gt;% mutate(vote = presvote - 1) %&gt;% dplyr::select(year, age, gender, race, black, female, vote, income) datos_2 %&gt;% sample_n(10) %&gt;% knitr::kable() year age gender race black female vote income 1992 46 2 2 1 1 0 4 1992 40 2 1 0 1 0 3 1992 61 1 1 0 0 1 4 1992 45 2 2 1 1 0 3 1992 20 1 3 0 0 0 1 1992 79 2 2 1 1 0 1 1992 77 2 1 0 1 0 3 1992 63 2 1 0 1 1 2 1992 53 2 1 0 1 1 2 1992 25 2 1 0 1 0 3 Dado que nuestra variable de ingreso es categórica y la preferencia de voto que analizamos es binaria podríamos comenzar haciendo un análisis de datos categóricos: tab &lt;- round(prop.table(table(datos_2$income, datos_2$vote), 1)*100,2) %&gt;% as_tibble() %&gt;% spread(Var2, n) %&gt;% dplyr::select(Income=Var1, Clinton=`0`, Bush=`1`) tab %&gt;% knitr::kable() Income Clinton Bush 1 76.6 23.4 2 66.7 33.3 3 60.7 39.3 4 51.5 48.5 5 48.6 51.4 En una gráfica de mosaico vemos los siguiente: aux &lt;- datos_2 %&gt;% dplyr::select(c(&quot;vote&quot;,&quot;income&quot;)) %&gt;% mutate(vote1 = ordered(vote), income1 = ordered(income)) ggplot(aux, aes(x=income1, fill=vote1)) + geom_bar(position=&#39;fill&#39;) + coord_flip() + theme(aspect.ratio = 1,legend.position=&quot;bottom&quot;, axis.text.y=element_text(color=&#39;black&#39;,size=10), axis.text.x=element_text(color=&#39;black&#39;,size=10), axis.title.x=element_text(size=12), axis.title.y=element_text(size=12), legend.text=element_text(size=11)) + scale_fill_discrete(&quot;&quot;) + ylab(&#39;Proporción&#39;) Para podríamos introducir perfiles de variables de ingreso para obtener una mejor intuición. Utilizando el método de regresión logística obtendríamos lo siguiente: # Estimacion fit.1 &lt;- glm(vote ~ income, data = datos_2, family=binomial(link=&quot;logit&quot;)) display(fit.1) #&gt; glm(formula = vote ~ income, family = binomial(link = &quot;logit&quot;), #&gt; data = datos_2) #&gt; coef.est coef.se #&gt; (Intercept) -1.40 0.19 #&gt; income 0.33 0.06 #&gt; --- #&gt; n = 1179, k = 2 #&gt; residual deviance = 1556.9, null deviance = 1591.2 (difference = 34.3) Con este modelo buscamos predecir las preferencias dado el nivel de ingresos del encuestado, que se caracteriza por una escala de cinco puntos. El modelo ajustado es \\[ P(y_i=1) = \\mbox{logit}^{-1}(−1.40 + 0.33\\,\\cdot\\,\\mbox{income}) \\] Definimos así una función que llamamos logit inversa y de la cuál hablaremos más adelante: invlogit &lt;- function(x){ exp(x)/(1+exp(x)) } En la siguiente gráfica podemos ver los valores de la variable categórica de ingreso con un jitter y la función ajustada por el modelo: ggplot(datos_2, aes(x = income, y = vote)) + geom_jitter(width = 0.3, height = 0.08, size = 0.1) + stat_function(fun = function(x){invlogit(fit.1$coef[1] + fit.1$coef[2]*x)}, xlim = c(1,5), size=2) + stat_function(fun = function(x){invlogit(fit.1$coef[1] + fit.1$coef[2]*x)}, xlim = c(-3,10)) + scale_x_continuous(limits = c(-3, 10), breaks = 1:5) + scale_y_continuous(breaks = c(0,1), labels=c(&quot;Clinton&quot;,&quot;Bush&quot;)) En este ejemplo, estos puntos revelan muy poca información, pero queremos enfatizar que los datos y el modelo ajustado se pueden poner en una escala común. Definiremos matemáticamente este modelo y luego regresaremos para analizar su interpretación. 6.2 El modelo de regresión logística No tendría sentido ajustar el modelo de regresión lineal continuo, \\(X\\beta + \\mbox{error}\\), a los datos de \\(y\\), que toman los valores de \\(0\\) y \\(1\\). Notemos que intentar estimar las probabilidades de clase \\(p_1(x)\\) de forma lineal con \\[p_1(x)=\\beta_0+\\beta_1 x_1\\] tiene el defecto de que el lado derecho puede producir valores fuera de \\([0,1]\\). La idea es entonces aplicar una función \\(h\\) simple que transforme la recta real al intervalo \\([0,1]:\\) \\[p_1(x) = h(\\beta_0+\\beta_1 x_1),\\] donde \\(h\\) es una función que toma valores en \\([0,1]\\). ¿Cúal es la función más simple que hace esto? 6.2.1 Función logística Comenzamos con el caso más simple, poniendo \\(\\beta_0=0\\) y \\(\\beta_1=1\\), de modo que \\[p_1(x)=h(x).\\] ¿Cómo debe ser \\(h\\) para garantizar que \\(h(x)\\) está entre 0 y 1 para toda \\(x\\)? No van a funcionar polinomios, por ejemplo, porque para un polinomio cuando \\(x\\) tiende a infinito, el polinomio tiende a \\(\\infty\\) o a \\(-\\infty\\). Hay varias posibilidades, pero una de las más simples es la función logística. La función logística está dada por \\[h(x)=\\frac{e^x}{1+e^x}\\] h &lt;- function(x){exp(x)/(1+exp(x)) } curve(h, from=-6, to =6) Esta función comprime adecuadamente (para nuestros propósitos) el rango de todos los reales dentro del intervalo \\([0,1]\\). El modelo de regresión logística simple está dado por \\[p_1(x)=p_1(x;\\beta)= h(\\beta_0+\\beta_1x_1)= \\frac{e^{\\beta_0+\\beta_1x_1}}{1+ e^{\\beta_0+\\beta_1x_1}},\\] y \\[p_0(x)=p_0(x;\\beta)=1-p_1(x;\\beta),\\] donde \\(\\beta=(\\beta_0,\\beta_1)\\). Este es un modelo paramétrico con 2 parámetros. Ejemplo (Impago de tarjetas de crédito) Supongamos que \\(X=\\) porcentaje del crédito máximo usado, y \\(G\\in\\{1, 2\\}\\), donde \\(1\\) corresponde al corriente y \\(2\\) representa impago. Las probabilidades condicionales de clase para la clase al corriente podrían ser, por ejemplo: \\(p_1(x) = P(G=1|X = x) =0.95\\) si \\(x &lt; 15\\%\\) \\(p_1(x) = P(G=1|X = x) = 0.95 - 0.007(x-15)\\) si \\(x&gt;=15\\%\\) Estas son probabilidades, pues hay otras variables que influyen en que un cliente permanezca al corriente o no en sus pagos más allá de información contenida en el porcentaje de crédito usado. Nótese que estas probabilidades son diferentes a las no condicionadas, por ejempo, podríamos tener que a total \\(P(G=1)=0.83\\). p_1 &lt;- function(x){ ifelse(x &lt; 15, 0.95, 0.95 - 0.007 * (x - 15)) } curve(p_1, 0,100, xlab = &#39;Porcentaje de crédito máximo&#39;, ylab = &#39;p_1(x)&#39;, ylim = c(0,1)) Vamos a generar unos datos con un modelo simple: set.seed(1933) x &lt;- pmin(rexp(500,1/30),100) probs &lt;- p_1(x) g &lt;- ifelse(rbinom(length(x), 1, probs)==1 ,1, 2) dat_ent &lt;- data_frame(x = x, p_1 = probs, g = factor(g)) dat_ent %&gt;% dplyr::select(x, g) #&gt; # A tibble: 500 x 2 #&gt; x g #&gt; &lt;dbl&gt; &lt;fct&gt; #&gt; 1 0.532 1 #&gt; 2 25.4 1 #&gt; 3 37.5 1 #&gt; 4 20.9 1 #&gt; 5 70.9 2 #&gt; 6 14.8 1 #&gt; # ... with 494 more rows Como este problema es de dos clases, podemos graficar como sigue: graf_1 &lt;- ggplot(dat_ent, aes(x = x)) + geom_jitter(aes(colour = g, y = as.numeric(g==&#39;1&#39;)), width=0, height=0.1) graf_1 Ahora intentaremos ajustar a mano (intenta cambiar las betas para p_mod_1 y p_mod_2 en el ejemplo de abajo) algunos modelos logísticos para las probabilidades de clase: graf_data &lt;- data_frame(x = seq(0,100, 1)) h &lt;- function(z) exp(z)/(1+exp(z)) p_logistico &lt;- function(beta_0, beta_1){ p &lt;- function(x){ z &lt;- beta_0 + beta_1*x h(z) } } p_mod_1 &lt;- p_logistico(-20, 1) p_mod_2 &lt;- p_logistico(3.2, -0.05) graf_data &lt;- graf_data %&gt;% mutate(p_mod_1 = p_mod_1(x), p_mod_2 = p_mod_2(x)) graf_verdadero &lt;- data_frame(x = 0:100, p_1 = p_1(x)) graf_1 + geom_line(data = graf_data, aes(y = p_mod_2), colour = &#39;red&#39;, size=1.2) + geom_line(data = graf_data, aes(y = p_mod_1), colour = &#39;orange&#39;, size=1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) Podemos usar también la función glm de R para ajustar los coeficientes: mod_1 &lt;- glm(g==1 ~ x, data = dat_ent, family = &#39;binomial&#39;) coef(mod_1) #&gt; (Intercept) x #&gt; 3.2447 -0.0435 p_mod_final &lt;- p_logistico(coef(mod_1)[1], coef(mod_1)[2]) graf_data &lt;- graf_data %&gt;% mutate(p_mod_f = p_mod_final(x)) graf_1 + geom_line(data = graf_data, aes(y = p_mod_f), colour = &#39;red&#39;, size=1.2) + geom_line(data = graf_data, aes(y = p_mod_1), colour = &#39;orange&#39;, size=1.2) + geom_line(data = graf_verdadero, aes(y = p_1)) + ylab(&#39;Probabilidad al corriente&#39;) + xlab(&#39;% crédito usado&#39;) Por lo tanto, modelamos la probabilidad de que \\(y = 1\\), como \\[ P(y_i=1)=\\mbox{logit}^{-1}(X_i\\beta), \\] bajo el supuesto de que las respuestas \\(y_i\\) son independientes dadas estas probabilidades. Nos referimos a \\(X\\beta\\) como el predictor lineal. La función logística definida anteriormente \\(h(x)=\\dfrac{e^x}{1+e^x}\\) es \\(\\mbox{logit}^{-1}\\), la función inversa de logit. 6.3 Tarea Demostrar que, si \\(p_1(x)\\) está dado como \\[ p_1(x)=p_1(x;\\beta)= h(\\beta_0+\\beta_1x_1)= \\frac{e^{\\beta_0+\\beta_1x_1}}{1+ e^{\\beta_0+\\beta_1x_1}} \\] entonces también podemos escribir: \\[p_0(x)=\\frac{1}{1+e^{\\beta_0+\\beta_1x_1}}.\\] Graficar la función \\(p_1(x;\\beta)\\) para distintos valores de \\(\\beta_0\\) y \\(\\beta_1\\). "],
["referencias.html", "Referencias", " Referencias "]
]
