[
["index.html", "Estadística Aplicada III Temario y referencias", " Estadística Aplicada III Andreu Boada de Atela 2018-01-25 Temario y referencias Todas las notas y material del curso estarán en este repositorio. Análisis exploratorio de datos Análisis de datos categórica Análisis de conglomerados: clustering jerárquico, k-medias Componentes principales Análisis de factores Análisis canónico Análisis discriminante Regresión logística Regularización y selección de modelos Introducción a la estadística espacial Evaluación Tareas semanales (20%) Examen parcial (30% práctico, 20% teórico) Un examen final (30% práctico) Software: R y Rstudio R Sitio de R (CRAN) Rstudio Interfaz gráfica para trabajar en R. Recursos para aprender R Referencia principal Johnson, R., y Wichern, D. Applied multivariate statistical analysis. Upper Saddle River, N. J.: Pearson Prentice Hall, 2007. Otras referencias Pattern Recognition and Machine Learning The Elements of Statistical Learning, Hastie, Tibshirani y Friedman Agresti, Alan. Categorical data analysis. 3rd ed. Hoboken, N. J.: John Wiley &amp; Sons, 2013. Greenacre, Michael J., ed. Multiple correspondence analysis and related methods. Boca Raton, Fla.: Chapman &amp; Hall/CRC, 2006 Thompson, Bruce. Canonical correlation analysis : uses and interpretation. Thousand Oaks, Calif.: Sage Publications, 1984 Jackson, J. Edward. A user’s guide to principal components. New York: John Wiley &amp; Sons, 1991. Harrell, Frank E. Regression modeling strategies : with applications to linear models, logistic regression, and survival analysis. New York: Springer, c2001. McLachlan, Geoffrey J. Discriminant analysis and statistical pattern recognition. New York: John Wiley &amp; Sons, 1992. Tareas Enviar tareas por correo electrónico a: andreuboada@gmail.com con el asunto “EAPLICADA3-Tarea-[XX]-[clave única 1]-[clave única 2]” donde [XX] es el número de la tarea, [clave única 1] y [clave única 2] son tu clave y la de tu compañero con quien vas a trabajar durante el semestre. "],
["intro.html", "Clase 1 Introducción 1.1 ¿Por qué un análisis multivariado? 1.2 La paradoja de Simpson 1.3 Modelos log-lineales 1.4 Interpretación de parámetros 1.5 Otros ejemplos 1.6 Tarea", " Clase 1 Introducción .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } La investigación científica es un proceso de aprendizaje iterativo. Para explicar un fenómeno físico o social primero se deben especificar los objetivos de una investigación y luego probar los objetivos a través de la recopilación y el análisis de datos pertinentes. A su vez, el análisis de los datos recopilados (experimentalmente o mediante observación) generalmente sugerirá una explicación modificada del fenómeno. A lo largo de este proceso iterativo, generalmente se añaden o se excluyen variables del análisis. Por lo tanto, la complejidad de la mayoría de los fenómenos requieren que el investigador recolecte muchas variables de las observaciones. En este curso veremos una introducción a los modelos estadísticos que son multivariados, es decir, modelos en los cuales los datos corresponden a mediciones en muchas variables. 1.1 ¿Por qué un análisis multivariado? Las razones por las cuales se utilizan modelos multivariados son generalmente (Johnson, Wichern, and others 2014): Factores de “confusión”. Un factor de confusión (o confound variable) es una variable que puede correlacionarse con otra variable de interés. Las correlaciones espurias son un posible tipo de confusión, donde el factor de confusión hace que una variable sin importancia real parezca ser importante. Pero las confusiones pueden ocultar variables reales importantes tan fácilmente como pueden producir falsas. Un ejemplo de esto, conocido como la “paradoja” de Simpson, consiste de datos en los cuales la dirección de una aparente asociación entre un predictor y la variable respuesta se puede revertir al considerar un factor de confusión. 1.2 La paradoja de Simpson La paradoja de Simpson, también conocida como el efecto Yule-Simpson, ocurre cuando existe una asociación entre dos variables en varios grupos pero la dirección de esta asociación se invierte cuando los datos se combinan para formar un solo grupo. En un análisis de los scores de SAT (examen de posicionamiento para la universidad) en Estados Unidos en 1997 se encontró que había una relación negativa entre el salario promedio anual de los maestros y el score total promedio de los alumnos que presentaron el SAT: library(tidyverse) sat &lt;- read_csv(&quot;datos/sat.csv&quot;) ggplot(sat, aes(x = teacher_salary, y = total_score)) + geom_point() + geom_smooth(method = &quot;lm&quot;, se = F) + xlab(&quot;Salario anual promedio (en miles) de maestros&quot;) + ylab(&quot;Score total promedio de SAT&quot;) Podemos revisar el resultado de la regresión lineal (haciendo uso del paquete stargazer): library(stargazer) out1 &lt;- lm(formula = total_score ~ teacher_salary, data = sat) stargazer(out1, type = &#39;html&#39;, style = &quot;all&quot;, single.row = T, title = &quot;Regresión lineal del promedio de sueldo de maestros vs SAT promedio&quot;) Regresión lineal del promedio de sueldo de maestros vs SAT promedio Dependent variable: total_score teacher_salary -5.540*** (1.632) t = -3.394 p = 0.002 Constant 1,158.859*** (57.659) t = 20.098 p = 0.000 Observations 50 R2 0.193 Adjusted R2 0.177 Residual Std. Error 67.889 (df = 48) F Statistic 11.516*** (df = 1; 48) (p = 0.002) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Podemos observar que el coeficiente de la variable salario es \\(-5.54\\) y es significartivo según la prueba de hipótesis correspondiente. Desafortunadamente, la asociación entre salario y score de SAT parece ser negativa: a medida que aumenta el salario, se predice que el score SAT promedio disminuye. Afortunadamente para los maestros, una vez que se cuenta la variable de la fracción de alumnos que presentan el SAT, vemos una relación positiva estadísticamente significativa: out2 &lt;- lm(formula = total_score ~ teacher_salary + perc_take_sat, data = sat) stargazer(out2, type = &#39;html&#39;, style = &quot;all&quot;, single.row = T, title = &quot;Incluyendo el factor de confusión&quot;) Incluyendo el factor de confusión Dependent variable: total_score teacher_salary 2.180** (1.029) t = 2.119 p = 0.040 perc_take_sat -2.779*** (0.228) t = -12.163 p = 0.000 Constant 987.900*** (31.877) t = 30.991 p = 0.000 Observations 50 R2 0.806 Adjusted R2 0.797 Residual Std. Error 33.688 (df = 47) F Statistic 97.355*** (df = 2; 47) (p = 0.000) Note: p&lt;0.1; p&lt;0.05; p&lt;0.01 Podemos ver que el coeficiente de la regresión lineal correspondiente al salario de los maestros se invierte. Gráficamente podemos visualizar este efecto: Vemos que dentro de cada grupo, la pendiente es positiva (o al menos no negativa). También podríamos agregar etiquetas: Otro ejemplo de este fenómeno es cuando la Universidad de California, Berkeley fue demandada por discrimanción hacia mujeres que habían solicitado admisión a un posgrado en 1973. De acuerdo con las estadísticas de admisión, los hombres que presentaron la solicitud tenían mayor probabilidad de ser admitidos que las mujeres, y la diferencia era tan sustancial que uno podría concluir que efectivamente había existido dicha discriminación. Sin embargo, al examinar los datos individualmente por departamento, parecía que no había una diferencia significativa en contra de las mujeres. ucb &lt;- UCBAdmissions %&gt;% as.tibble() ucb %&gt;% head(10) %&gt;% knitr::kable() Admit Gender Dept n Admitted Male A 512 Rejected Male A 313 Admitted Female A 89 Rejected Female A 19 Admitted Male B 353 Rejected Male B 207 Admitted Female B 17 Rejected Female B 8 Admitted Male C 120 Rejected Male C 205 Los datos contienen el número de solicitudes y admisiones por género a seis escuelas de postgrado diferentes. Analicemos una tabla de contingencia entre la variable género y la variable admitido: tab &lt;- ucb %&gt;% group_by(Gender, Admit) %&gt;% summarise(p = sum(n)) %&gt;% spread(Admit, p) tab %&gt;% knitr::kable() Gender Admitted Rejected Female 557 1278 Male 1198 1493 Los solicitantes masculinos tenían una tasa de aceptación del 44.52%, en comparación con solo el 30.35% de las mujeres, condicionando en la variable de género: tab %&gt;% gather(Admit, n, -Gender) %&gt;% mutate(prop = round(prop.table(n) * 100,2)) %&gt;% select(-n) %&gt;% spread(Admit, prop) %&gt;% knitr::kable() Gender Admitted Rejected Female 30.35 69.65 Male 44.52 55.48 Incluso podemos proporcionar una prueba estadística para apoyar la afirmación de que hubo sesgo en las admisiones. En R, se puede realizar una prueba de proporciones a través de la función prop.test(): prop.test(tab %&gt;% ungroup() %&gt;% select(-Gender) %&gt;% as.matrix()) ## ## 2-sample test for equality of proportions with continuity ## correction ## ## data: tab %&gt;% ungroup() %&gt;% select(-Gender) %&gt;% as.matrix() ## X-squared = 91.61, df = 1, p-value &lt; 2.2e-16 ## alternative hypothesis: two.sided ## 95 percent confidence interval: ## -0.1703022 -0.1129887 ## sample estimates: ## prop 1 prop 2 ## 0.3035422 0.4451877 A partir de la prueba de hipótesis realizada anteriormente, se puede concluir que hay una diferencias significativa entre la proporción de hombres admitidos y la proporción de mujeres admitidas en los programas de posgrado. Sin embargo, si hacemos el mismo análisis por departamento, veremos que las diferencias ya no son tan significativas: ucb %&gt;% spread(Admit, n) %&gt;% mutate(total = Admitted + Rejected, porc = round(Admitted/total*100,2)) %&gt;% select(Gender,Dept,porc) %&gt;% spread(Gender, porc) %&gt;% knitr::kable() Dept Female Male A 82.41 62.06 B 68.00 63.04 C 34.06 36.92 D 34.93 33.09 E 23.92 27.75 F 7.04 5.90 Condicionando por departamento ahora vemos que las mujeres realmente tienen mayores tasas de admisión en cuatro de los seis departamentos (A, B, D, F). ¿Cómo puede ser esto? En realidad las diferencias tienen que ver con el porcentaje de solicitantes (hombres y mujeres) que son admitidos por departamentos, es decir, hay departamentos más competitivos que otros. Consideremos un modelo log-lineal. Sea \\(p_{ijk}\\) la proporción de la población en la celda \\((i,j,k)\\). Por ejemplo, \\(p_{112}\\) es la proporción de solicitantes que son admitidos, son hombres y se postulan para el Departamento B. tab &lt;- xtabs(n ~ ., ucb) llout &lt;- loglin(tab, list(1:2,c(1,3),2:3),param=TRUE) ## 9 iterations: deviation 0.04920393 Los efectos globales de la variable de admitidos son: llout$param$Admit %&gt;% knitr::kable() x Admitted -0.3212111 Rejected 0.3212111 Los efectos globales de la variable Departamento, por ejemplo, nos dicen qué departamentos tienden a tener más solicitantes (el A, el C y el D), aunque en realidad esto no sea tan relevante: llout$param$Dept %&gt;% knitr::kable() x A 0.1537626 B -0.7651684 C 0.5397205 D 0.4302153 E -0.0288135 F -0.3297165 Los efectos globales de la variable género también nos dicen que el número de solicitantes hombres es mayor que el número de solicitantes que son mujeres: llout$param$Gender %&gt;% knitr::kable() x Female -0.3287569 Male 0.3287569 Analicemos ahora los términos de interacciones entre variables. Como la variable que nos interesa es la de admisión, veamos la interacción de Admit-Gender y Admit-Department: llout$param$Admit.Gender %&gt;% knitr::kable() Female Male Admitted 0.024937 -0.024937 Rejected -0.024937 0.024937 llout$param$Admit.Dept %&gt;% knitr::kable() A B C D E F Admitted 0.6371804 0.6154772 0.0059146 -0.0101 -0.2324371 -1.016035 Rejected -0.6371804 -0.6154772 -0.0059146 0.0101 0.2324371 1.016035 En términos de asociación con la variable de admisión, la relación con la variable de departamento es mucho más fuerte que con la de género, lo que significa que la mayoría de los parámetros estimados son mucho más grandes en el primer caso. En otras palabras, el departamento es la variable más importante, no el género. Más aún, los resultados anteriores también muestran que existe una interacción Admit-Female positiva, es decir, que a las mujeres les va un poco mejor que a los hombres en cuanto a la admisión. 1.3 Modelos log-lineales Denotemos los 3 factores por \\(X^{(s)}\\), \\(s=1,2,3\\). En este caso particular, \\(X^{(1)}\\) es la variable de admisión Admit, y toma valores de \\(1\\) y \\(2\\), admitido y no admitido respectivamente. \\(X^{(2)}\\) la variable género tomaría valores \\(1\\) y \\(2\\) para hombre y mujer respectivamente, mientras que \\(X^{(3)}\\), la variable de departamento, toma valores del \\(1\\) al \\(6\\) para representar los departamentos A al F. En esta notación no estamos usando variables indicadoras. Estamos trabajando con variables estrictamente categóricas, cuyos valores son meramente etiquetas. Sea \\(X_r^{(s)}\\) el valor de \\(X^{(s)}\\) para el \\(i\\)-ésimo solicitante en la muestra, para \\(r=1,2,\\ldots,n\\). Aquí el número de observaciones es el número de solicitantes $n=$4526. Nuestros datos son los conteos en todas las categorías: \\[ N_{ijk} = \\mbox{nú}\\;\\mbox{mero de solicitantes }r\\mbox{ tales que }X_r^{(1)}=i, X_r^{(2)}=j,\\mbox{ y } X_r^{(3)}=k. \\] A esto le llamamos una tabla de contigencias en tres variables. Cada valor \\(N_{ijk}\\) es una celda de la tabla. Sea \\(p_{ijk}\\) la proporción poblacional de un solicitante elegido al azar en la celda \\((i,j,k)\\), es decir, \\[ p_{ijk} = P(X^{(1)}=i \\mbox{ y } X^{(2)}=j \\mbox{ y } X^{(3)}=k) = E(N_{ijk})/n. \\] Como se mencionó, nos interesan las relaciones entre las factores, en forma de independencia, tanto plena como parcial. De hecho, es común que un analista ajuste sucesivamente modelos más refinados a los datos, asumiendo cada uno una estructura de dependencia más compleja que la anterior. Esto se desarrollará en detalle a continuación. Considere primero el modelo que asume la independencia total: \\[ \\begin{eqnarray*} p_{ijk} &amp; = &amp; P(X^{(1)}=i \\mbox{ y } X^{(2)}=j \\mbox{ y } X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i) \\cdot P(X^{(2)}=j) \\cdot P(X^{(3)}=k). \\end{eqnarray*} \\] Tomando logaritmo de ambos lados, vemos que la independencia de los tres factores es equivalente a escribir una ecuación de la forma \\[ \\mbox{log}(p_{ijk}) = a_i + b_j + c_k, \\] donde \\(a_i,b_j,c_k\\) son cantidades estimadas. Por ejemplo, \\[ b_j = \\mbox{log}\\left(P(X^{(2)}=j)\\right). \\] El punto es que el modelo es similar a un modelo de regresión lineal sin interacciones. El análogo de que no haya interacción entre las variables aquí está representado por el supuesto de independencia. Por ejemplo, si suponemos que Departamento es independiente de Admisión y Género, pero que Admisión y Género no son independientes entre sí, el modelo incluiría un término de interacción \\(i-j\\): \\[ p_{ijk} = P(X^{(1)}=i, X^{(2)}=j)\\cdot P(X^{(3)} = k), \\] por lo que el modelo sería \\[ \\mbox{log}(p_{ijk}) = a_{ij} + b_k. \\] La mayoría de los modelos formales reescriben esto como \\[ a_{ij} = u + v_i + w_j + r_{ij}, \\] de tal forma que el término de interacción \\(P(X^{(1)}=i \\mbox{ y } X^{(2)}=j)\\) es una suma de un “efecto global” \\(u\\), “efectos principales” \\(v_i\\) y \\(w_j\\) y “efectos de interacción” \\(r_{ij}\\), nuevamente de forma análoga a la regresión lineal. Sin embargo, tenga en cuenta que esto en realidad nos da demasiados parámetros. Para el término de interacción \\(a_{ij}\\) del modelo, tenemos \\(2 \\times 3 = 6\\) probabilidades reales, pero \\(1 + 2 + 2 + 2\\times 2 = 9\\) parámetros (1 para \\(u\\), 2 para \\(v_i\\) y así sucesivamente). Por esta razón, generalmente los modelos tienen restricciones de la forma \\[ \\displaystyle{\\sum_i{v_i}}=0. \\] Es posible enumerar todas las restricciones, aunque en la mayoría de los modelos aún con restricciones el número de parámetros puede ser muy grande. ¿Qué modelo es más apropiado en el ejemplo anterior? \\(p_{ijk} = P(X^{(1)}=i) \\cdot P(X^{(2)}=j, X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i, X^{(2)}=j, X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i)\\cdot P(X^{(2)}=j)\\cdot P(X^{(3)}=k)\\) \\(p_{ijk} = P(X^{(1)}=i, X^{(3)}=k) \\cdot P(X^{(2)}=j)\\) Otro posible modelo tendría Admitido y Género condicionalmente independientes, dado Departamento, lo que significa que en cualquier género, la proporción de admitidos y su género, no están relacionados. Escribimos el modelo de esta manera \\[ \\begin{eqnarray*} p_{ijk} &amp;=&amp; P(X^{(1)}=i, X^{(2)}=j, X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i, X^{(2)}=j|X^{(3)}=k) \\cdot P(X^{(3)}=k) \\\\ &amp;=&amp; P(X^{(1)}=i|X^{(3)}=k) \\cdot P(X^{(2)}=j|X^{(3)}=k) \\cdot P(X^{(3)}=k), \\end{eqnarray*} \\] y el modelo sería de la forma \\[ \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + c_k. \\] ¿Cuántos parámetros tendría este modelo? 30 35 40 45 1.4 Interpretación de parámetros Consideremos los modelos: \\[ \\begin{eqnarray*} \\mbox{(1)} &amp; \\qquad &amp; \\mbox{log}(p_{ijk}) = a_{ij} + b_k, \\\\ \\mbox{(2)} &amp; \\qquad &amp; \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + c_k. \\end{eqnarray*} \\] La independencia que representa el modelo (1) tiene una interpretación muy diferente a las independencias representadas por el modelo (2). 1.4.1 Ejemplo: dos monedas Supongamos que tenemos una gran caja con monedas de dos tipos. Las monedas de tipo 1 tienen probabilidad \\(p\\) de salir águila, y las monedas tipo 2 tienen probabilidad \\(q\\) de salir águila. Una proporción \\(r\\) de las monedas es del tipo 1. Seleccionamos una moneda al azar de la caja, lanzamos esa moneda \\(M\\) veces, y observamos \\(N\\) águilas. ¿Cuál es la distribución de \\(N\\)? \\[ p_N(k) = r \\dbinom{M}{k}p^k (1-p)^{M-k} + (1-r) \\dbinom{M}{k}q^k (1-q)^{M-k}, \\] donde \\(k=0,1,\\ldots,M\\). Es fácil ver por qué a esta distribución se le conoce como modelo de mezcla. Esta función de distribución de probabilidad es una mezcla de dos funciones de distribución de probabilidad binomiales, con proporciones de mezcla \\(r\\) y \\(1-r\\). Si \\(M\\) es una variable aleatoria con soporte (o rango) \\(R\\) y \\(\\left\\{g_t\\right\\}_{t\\in R}\\) es una colección de funciones de densidad, entonces se dice que \\(h\\) es una función de densidad de mezcla si \\[ h = \\displaystyle{\\sum_{k\\in R}p_M(k)g_k}, \\] cuando \\(M\\) es una variable aleatoria discreta, o si \\[ h = \\displaystyle{\\int_{t\\in R}f_M(t)g_t(u)\\;\\;dt}, \\] cuando \\(M\\) es una variable aleatoria continua. En el ejemplo de la moneda: \\(Y = N\\) \\(S = \\{1,2\\}\\) \\(p_M(1) = r, \\quad p_M(2) = 1-r\\) \\(g_1\\) es la fn de densidad de una va \\(\\mbox{Binomial}(M,p)\\) \\(g_2\\) es la fn de densidad de una va \\(\\mbox{Binomial}(M,q)\\) Dada la elección de moneda, el resultado de la moneda 1 es independiente del resultado de la oneda 2. Sin embargo, los resultados de las monedas no son independientes si no se sabe qué moneda fue seleccionada. Este ejemplo es como el del modelo (2) mencionado arriba. Por otro lado, se sabe que la estatura y el peso están asociadas linealmente, pero ambas son independientes de la preferenvia por algún sabor de helado, una situación similar a la del modelo (1). Es importante considerar las interacciones que están consideradas en el modelo, por ejemplo: en el modelo (1) hay una interacción entre los factores \\(i,j\\) pero no hay interacción con el factor \\(k\\), por lo que \\(i\\) y \\(j\\) se modelan como completamente independientes de \\(k\\) y no entre sí, mientras que en el modelo (2) \\(i\\) y \\(j\\) tienen una interacción con \\(k\\) y no entre sí, por lo que \\(i\\) y \\(j\\) no son independientes entre sí, pero sí los son dado \\(k\\). Consideremos ahora el modelo \\[ \\mbox{log}(p_{ijk}) = u + a_i + f_{ik} + b_j + h_{jk} + l_{ij} + c_k, \\] ¿cuál de las siguientes afirmaciones es cierta? \\(i\\) y \\(j\\) son dependientes dado \\(k\\). \\(i\\) y \\(j\\) son independientes dado \\(k\\). \\(i\\) y \\(k\\) son dependientes dado \\(j\\). \\(i\\) y \\(k\\) son independientes dado \\(j\\). Si hubiéramos incluido un término \\(m_{ijk}\\), que ahora haría que el modelo estuviera lleno (o saturado), entonces sería posible que los factores \\(i\\) y \\(j\\) estuvieran altamente relacionados para algunos valores de \\(k\\), y menos relacionados para otros. Claramente, cuantas más variables tengamos, y cuanto mayor sea el orden de las interacciones que incluimos, más difícil será interpretar el modelo. 1.5 Otros ejemplos 1.5.1 Discriminación de residentes hispanos con discapacidades La mayoría de los estados en los Estados Unidos proporcionan servicios y apoyo a personas con discapacidades (por ejemplo, discapacidad intelectual, parálisis cerebral, autismo, etc.) y sus familias. La agencia a través de la cual el estado de California sirve al desarrollo de la población discapacitada es el Departamento de Servicios de Desarrollo de California (DDS). Una de las responsabilidades de DDS es asignar fondos que respalden a más de 250,000 residentes con discapacidades de desarrollo (denominados “consumidores”). Hace algunos años, se hizo una alegación de discriminación presentando un análisis univariado que examinaba los gastos anuales promedio de los consumidores por etnia. El análisis reveló que el gasto anual promedio en consumidores hispanos (Hispanic) era aproximadamente un tercera parte (1/3) del gasto promedio en consumidores blancos no hispanos (White non-Hispanic). Este hallazgo fue el catalizador para una mayor investigación; posteriormente, los legisladores estatales y los gerentes de departamento buscaron servicios de consultoría de un estadístico. El conjunto de datos utilizado en el análisis contiene seis variables: ID: identificador único por consumidor, Categoría de edad: es una variable importante porque, aunque la edad suele ser causa de discriminación legal, en este caso, para la población específica de Hispanos no americanos la edad no se consideraría relacionada con los casos de discriminación. El propósito de estas ayudas es que los que viven con alguna discapacidad puedan vivir igual que los que no tienen ninguna discapacidad. Es lógico, por lo tanto, que mientras las personas tienen mayor edad requieran de mayor ayuda económica. Los seis grupos de edad utilizados en este ámbito son: 0 a 5 años de edad, 6 a 12, 13 a 17, 18 a 21, 22 a 50, y más de 51. Edad: edad del consumidor, Género: se incluye en los datos como una variable a considerar porque el género es otro factor sujeto a discriminación, Gastos: el gasto anual que el gobierno le dedica a un consumidor para apoyar a estos individuos y sus familias. El gasto se dedica a: ayuda a la familia, servicios psicológicos, gastos médicos, transporte y costos relacionados a la vivienda como la renta. Origen étnico: es la variable más importante ya que con respecto a esta variable se presentaron las supuestas alegaciones por discriminación. Los primeros 10 renglones de la tabla se muestran a continuación: dds &lt;- read_csv(&quot;datos/californiaDDSData.csv&quot;) dds %&gt;% head(10) %&gt;% knitr::kable() Id Age Cohort Age Gender Expenditures Ethnicity 10210 13-17 17 Female 2113 White not Hispanic 10409 22-50 37 Male 41924 White not Hispanic 10486 0-5 3 Male 1454 Hispanic 10538 18-21 19 Female 6400 Hispanic 10568 13-17 13 Male 4412 White not Hispanic 10690 13-17 15 Female 4566 Hispanic 10711 13-17 13 Female 3915 White not Hispanic 10778 13-17 17 Male 3873 Black 10820 13-17 14 Female 5021 White not Hispanic 10823 13-17 13 Male 2887 Hispanic Se puede ver que la columna “Age Cohort” tiene la categoría de edad a la cual correponde la observación. También podemos utilizar la función glimpse() del paquete tibble: glimpse(dds) ## Observations: 1,000 ## Variables: 6 ## $ Id &lt;int&gt; 10210, 10409, 10486, 10538, 10568, 10690, 10711, ... ## $ `Age Cohort` &lt;chr&gt; &quot;13-17&quot;, &quot;22-50&quot;, &quot;0-5&quot;, &quot;18-21&quot;, &quot;13-17&quot;, &quot;13-17... ## $ Age &lt;int&gt; 17, 37, 3, 19, 13, 15, 13, 17, 14, 13, 13, 14, 15... ## $ Gender &lt;chr&gt; &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Fema... ## $ Expenditures &lt;int&gt; 2113, 41924, 1454, 6400, 4412, 4566, 3915, 3873, ... ## $ Ethnicity &lt;chr&gt; &quot;White not Hispanic&quot;, &quot;White not Hispanic&quot;, &quot;Hisp... Podemos ver que el conjunto de datos contiene una muestra de exactamente 1000 observaciones que fueron seleccionadas aleatoriamente. Veamos una tabla del gasto promedio por etnicidad: dds %&gt;% group_by(Ethnicity) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Ethnicity Gasto_promedio American Indian 36438 Asian 18392 Black 20885 Hispanic 11066 Multi Race 4457 Native Hawaiian 42782 Other 3316 White not Hispanic 24698 Podemos comparar también con el promedio de todos los consumidores: mean(dds$Expenditures) ## [1] 18065.79 Es común hacer gráficas de barras para representar medias, aunque en realidad, esto no es lo más recomendable: media_por_etnia &lt;- dds %&gt;% group_by(Ethnicity) %&gt;% summarise(Media_etnia = mean(Expenditures)) media_por_etnia$Etnia &lt;- reorder(media_por_etnia$Ethnicity, -media_por_etnia$Media_etnia, FUN = median) ggplot(media_por_etnia, aes(x = Etnia, y = Media_etnia)) + geom_bar(stat = &#39;identity&#39;) + theme(axis.text.x = element_text(angle=25)) ¿Se puede concluir que existe evidencia de discriminación contra los Hispanos en comparación con los blancos no hispanos? Sí No Con respecto a discriminación de género, usualmente concluiríamos que no hay evidencia de discriminación: dds %&gt;% group_by(Gender) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Gender Gasto_promedio Female 18130 Male 18001 Las necesidades de los consumidores aumentan conforme envejecen, lo que resulta en mayores gastos para personas de mayor edad: dds$Age_Cohort &lt;- ordered(dds$`Age Cohort`, levels=c(&quot;0-5&quot;,&quot;6-12&quot;,&quot;13-17&quot;,&quot;18-21&quot;,&quot;22-50&quot;,&quot;51+&quot;)) dds %&gt;% group_by(Age_Cohort) %&gt;% summarise(Gasto_promedio = round(mean(Expenditures),0)) %&gt;% knitr::kable() Age_Cohort Gasto_promedio 0-5 1415 6-12 2227 13-17 3923 18-21 9889 22-50 40209 51+ 53522 El problema de que haya discrimnación o no se puede analizar más a fondo viendo, por ejemplo, qué porcentaje de consumidores pertenecen a cada etnia, tal como sucedió en el ejemplo de la controversia de Berkeley: dds %&gt;% group_by(Ethnicity) %&gt;% summarise(num_cons = n(), porc_cons = paste0(num_cons/10,&#39;%&#39;)) %&gt;% knitr::kable() Ethnicity num_cons porc_cons American Indian 4 0.4% Asian 129 12.9% Black 59 5.9% Hispanic 376 37.6% Multi Race 26 2.6% Native Hawaiian 3 0.3% Other 2 0.2% White not Hispanic 401 40.1% Podemos observar que los dos grandes grupos pertenecen a las 2 etnias del problema de discriminación que estamos analizando de blancos no hispanos vs hispanos. Examinemos de nuevo las medias y el porcentaje de consumidores de estos dos grupos: dds_blancos_hispanos &lt;- dds %&gt;% filter(Ethnicity %in% c(&quot;Hispanic&quot;,&quot;White not Hispanic&quot;)) dds_blancos_hispanos %&gt;% group_by(Ethnicity) %&gt;% summarise(media_gasto = mean(Expenditures), porc_consum = n()/10) %&gt;% knitr::kable() Ethnicity media_gasto porc_consum Hispanic 11065.57 37.6 White not Hispanic 24697.55 40.1 Tiende a haber un consenso general de que hay una diferencia significativa en la cantidad promedio de gastos entre el grupo de blancos no hispanos y el de hispanos. ¿Por qué podría haber diferencias en los promedios? ¿Se puede determinar si realmente existe discriminación? Algunas razones que sugieren normalmente son: Los hispanos tienen más apoyo familiar, y por lo tanto, es menos probable que busquen asistencia financiada por el gobierno, Los hispanos están menos informados sobre cómo buscar ayuda. Ambas razones son difíciles de modelar y podrían apoyar alegaciones de discriminación, en vez de negarlas. Analicemos ahora diferencias para cada grupo de edad entre hispanos y blancos: dds_blancos_hispanos %&gt;% group_by(Ethnicity, Age_Cohort) %&gt;% summarise(media_gasto = mean(Expenditures)) %&gt;% spread(Ethnicity, media_gasto) ## # A tibble: 6 x 3 ## Age_Cohort Hispanic `White not Hispanic` ## * &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0-5 1393 1367 ## 2 6-12 2312 2052 ## 3 13-17 3955 3904 ## 4 18-21 9960 10133 ## 5 22-50 40924 40188 ## 6 51+ 55585 52670 ¿Se puede concluir que el típico hispano recibe menos fondos (es decir, gastos) que el típico blanco? Dado que la cantidad típica de gastos para los hispanos (en todos excepto un grupo de edad) es más alta que la cantidad típica de gastos para los blancos que no son hispanos en cada grupo de edad (excepto en uno), la hipótesis de discriminación sería refutada. Si un consumidor hispano fuera a reclamar discriminación porque es hispano (frente a blancos no hispanos), podría hacerlo con base en el promedio general de gastos para todos los consumidores de su grupo. Podemos entender mejor por qué esta aparente asociación desaparece cuando consideramos la variable de grupo de edad si analizamos el porcentaje de consumidores en cada categoría de edad para los grupos de hispanos y blancos: dds_blancos_hispanos %&gt;% group_by(Ethnicity) %&gt;% mutate(num_etnia = n()) %&gt;% ungroup() %&gt;% group_by(Ethnicity, Age_Cohort) %&gt;% summarise(porc_grupo_edad = round(n()/first(num_etnia)*100,2)) %&gt;% spread(Ethnicity, porc_grupo_edad) ## # A tibble: 6 x 3 ## Age_Cohort Hispanic `White not Hispanic` ## * &lt;ord&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0-5 11.7 4.99 ## 2 6-12 24.2 11.5 ## 3 13-17 27.4 16.7 ## 4 18-21 20.7 17.2 ## 5 22-50 11.4 33.2 ## 6 51+ 4.52 16.5 Veamos estas medias como un promedio ponderado por grupo de edad: \\[ \\bar{X}_k = \\displaystyle{\\sum_{i=1}^{m}w_{ki}\\bar{X}_{ki}}, \\] donde \\(\\bar{X}_k\\) es la media del \\(k\\)-ésimo grupo étnico, \\(w_{ki}\\) es el porcentaje del \\(k\\)-ésimo grupo étnico en el \\(i\\)-ésimo grupo de edad, y \\(\\bar{X}_{ki}\\) es la media de gasto del \\(k\\)-ésimo grupo étnico en el \\(i\\)-ésimo grupo de edad. Los pesos \\(w_{ki}\\) para la población hispana son más altos para los 4 grupos de edad más jóvenes y más bajas para los 2 grupos de edad más viejos, en comparación con la población blanca no hispana. En otras palabras, la población total de consumidores hispanos es relativamente más joven en comparación con la población de consumidores blancos no hispanos. Dado que los gastos para los consumidores más jóvenes son más bajos, el promedio general de los gastos para los hispanos (frente a los blancos no hispanos) es menor. Factores de causa común. Incluso cuando no hay factores de confusión, un fenómeno puede realmente surgir de múltiples causas. Puede ocurrir que exista una correlación entre dos variables, sin embargo, es posible que esto no te diga nada cuando estos dos factores tienen como causa común a un tercer factor. Además, cuando la causalidad es múltiple, una causa puede ocultar a otra. 1.5.2 Consumo de chocolate y premios Nobel En un artículo reciente se publicó un resultado que demuestra una correlación estadísticamente significativa entre el consumo de chocolate per capita y el número de premios Nobel del país por 10 millones de habitantes. El artículo se puede consultar aquí: Messerli, 2012. En el artículo está publicada esta gráfica: Los datos de consumo de chocolate per cápita provienen de fuentes de datos distintas: confectionerynews.com, theobroma-cacao.de, y caobisco. Por otro lado, los datos del número de premios Nobel por cada 10 millones de habitantes están publicados en Wikipedia. Mientras que Messerli advierte en su artículo que la existencia de una correlación no implica causalidad, esto no impidió que los medios populares publicaran historias con estos titulares: “Eating Chocolate May Help You Win Nobel Prize” - CBS News There’s A Shocking Connection Between Eating More Chocolate And Winning The Nobel Prize - Business Insider “Why Chocolate Makes You Smart (or Peaceful)” - Psychology Today “Study links eating chocolate to winning Nobels” - USA Today Como describimos anteriormente, se tienen datos para varios años del consumo per capita de chocolate (en kg). chocolate_nobel &lt;- read_csv(&quot;datos/chocolate_nobel.csv&quot;) chocolate_nobel %&gt;% sample_n(10) %&gt;% knitr::kable() Country Year Cons_per_capita Nobel_Laureates Population_2017 Laureates_per_10_million Finland 2008 6.97 3 5523231 5.432 Czech Republic 2009 2.08 3 10618303 2.825 France 2009 6.41 37 64979548 5.694 Germany 2010 11.56 91 82114524 11.082 Japan 2006 2.23 22 127484450 1.758 Japan 2011 2.16 22 127484450 1.758 Denmark 2012 7.50 9 5773551 15.588 Japan 2008 2.15 22 127484450 1.758 US 2007 5.18 335 324459463 10.325 Brazil 2008 2.57 1 209288278 0.048 Podemos ver una gráfica del consumo de chocolate vs el número de premios nobel: ggplot(chocolate_nobel, aes(x=Cons_per_capita, y = Laureates_per_10_million)) + geom_point() + geom_smooth(method = &#39;lm&#39;, se = F) El artículo original era más una nota sarcástica, que un artículo de investigación. Muchos artículos, blogs y medios mostraron que esta aparente correlación no tiene sentido. Estas críticas muestran que el número de Nobel para 10 millones de habitantes también está “correlacionado” con el PIB per cápita, el índice de desarrollo humano, el consumo de todo tipo de bienes de lujo, etc. Factores de interacción. Incluso cuando las variables no están correlacionadas por completo, la importancia de cada una puede depender de la otra. Por ejemplo, las plantas se benefician tanto de la luz como del agua. Pero en ausencia de cualquiera, el otro no es en absoluto beneficioso. Tales interacciones ocurren en una gran cantidad de sistemas. Por lo tanto, la inferencia efectiva sobre una variable generalmente dependerá de la consideración de otras variables. Inferencia causal. A pesar de su importancia central, todavía no existe un enfoque unificado para hacer inferencia causal en las ciencias o en estadística. Incluso hay personas que argumentan que la causa realmente no existe, que es una ilusión psíquica. Por ejemplo, en sistemas dinámicos complejos todo parece causar todo lo demás, por lo que el término “causa” pierde valor intuitivo. Sin embargo, existe un acuerdo general: la inferencia causal siempre depende de supuestos no verificables. Otra forma de decir esto es que siempre nos será posible imaginar alguna forma en la que la inferencia sobre la causa sea incorrecta, sin importar qué tan cuidadosamente se haya realizado el diseño o el análisis. En este curso nuestros análisis jamás van a pretender hacer alguna inferencia sobre la causa de los fenómenos observados; únicamente se harán afirmaciones sobre las asociaciones, interacciones y relaciones entre las variables en los datos observados. La mayoría de nuestros análisis se van a enfocar en datos que fueron obtenidos sin que activamente se controlara o manipulara cualquiera de las variables en las cuales se hicieron las mediciones. Los diseños estadísticos en los cuales se controla alguna de las variables observadas en los datos se estudian en el curso de Diseño de experimentos. Generalmente vamos a suponer que los factores (o variables) observados son aleatorios. Esto quiere decir que nuestro análisis va a estar basado en el supuesto de que los datos provienen de una muestra aleatoria de la población de interés en un momento determinado del tiempo. En muchas ramas de la estadística, contar con datos temporales es muy importante. Por ejemplo, en el curso de Análisis de supervivencia se estudia el uso de modelos estadísticos en aplicaciones en las cuáles se desea estimar la distribución de un período entre dos eventos, como la duración del empleo (tiempo transcurrido entre el contrato y el abandono de la empresa), del tiempo de vida de un paciente, la diferencia en algún beneficio terapéutico sobre la prolongación de la vida para un nuevo tratamiento con respecto al tratamiento tradicional, o el tiempo de falla en un sistema mecánico. Hoy en día, el uso de herramientas computacionales ha adquirido importancia en la ciencia estadística. Esto resultó en el desarrollo de nuevas técnicas computacionales para fines estadísticos, tales como el uso de muestreo para estimar cantidades estadísticas o parámetros (bootstrap), la simulación de variables aleatorias, la simulación de modelos probabilísticos, la simulación de modelos multivariados, y la inferencia de gráficas estadísticas. Estos temas se ven en el curso de Estadística computacional. La técnica de simulación ha sido esencial en los últimos años. Se ha desarrollado una clase de métodos de simulación para poder calcular la distribución posterior, estos se conocen como cadenas de Markov via Monte Carlo (MCMC por sus siglas en inglés). El desarrollo de los métodos MCMC es lo que ha propiciado el desarrollo de la estadística bayesiana en años recientes. En el curso de Estadística bayesiana se estudia la teoría básica que sirve de fundamento para la estadística bayesiana: la teoría de decisión, la probabilidad subjetiva, la utilidad, la inferencia como problema de decisión, y la inferencia paramétrica bayesiana. El curso de Regresión avanzada está diseñado para estudiar inferencia bayesiana y el uso de modelos estadísticos bayesianos en el análisis de aplicaciones reales actuales. El enfoque es en modelos lineales generalizados, modelos dinámicos y modelos jerárquicos o multinivel. El uso de la estadística computacional con el fin de hacer predicciones, aprovecha la optimización numérica para estudiar métodos que son útiles para reconocer patrones. En el curso de Aprendizaje estadístico se estudian modelos lineales para reconocimiento de patrones, clasificación, y predicción, la regresión múltiple y descenso en gradiente, las redes neuronales (y deep learning), máquinas de soporte vectorial, los árboles y bosques aleatorios. En el curso de Métodos analíticos se ven otras técnicas de minería de datos, tales como el análisis de market basket, local sensitivity hashing (LHS), la minería de flujos de datos, los algoritmos de recomendación y la minería de texto. Finalmente, debido a la importancia antes mencionada del uso de varias variables en los modelos estadísticos actuales, hay nuevas técnicas estadísticas para estudiar fenómenos multivariados desde una perspectiva bayesiana, como las redes bayesianas, los modelos gráficos no dirigidos, las redes markovianas, los modelos para datos faltantes, modelos de variables latentes, como los modelos de rasgos latentes (LTM), los modelos de perfiles latentes (LPM), los modelos de clases latentes (LCM), y los modelos markovianos de estados ocultos (HMM). Todas estas técnicas se ven en el curso de Estadística multivariada. En este curso nuestro enfoque tendrá una persepctiva frecuentista. 1.6 Tarea Recordemos que la devianza la definimos como \\(-2\\) multiplicado por la log-verosimilitud: \\[ D = -2\\, \\mbox{log}{\\left(p(X|\\hat{\\theta})\\right)} \\] donde \\(X\\) son los datos observados y \\(\\hat{\\theta}\\) es el parámetro a estimar. Generalmente nos interesa disminuir la devianza. Con los datos del ejemplo de discriminación a hispanos modela la probabilidad \\(p_{ijk}\\) de cada categoría \\((i,j,k)\\) correspondiente al gasto, raza y categoría de edad, respectivamente. Puedes utilizar la función loglin vista en clase o la función loglm del paquete MASS. Esta última te permite especificar el modelo en forma de función. Puedes ver la ayuda así: library(MASS) ?loglm Llena la siguiente tabla utilizando factores de interacción como lo vimos anteriormente con las variables G (Gasto del gobierno en discapacitados), H (Hispano o Blanco no hispano), y E (Categoría de edad). Para esto deberás crear una variable de categoría de gasto con cuantiles utilizando la función cut2 del paquete Hmisc. Puedes usar el número de grupos que creas que es más adecuado. Por ejemplo, el modelo “G + H + E” representa el modelo de independencias. Para el modelo “GH + GE + HE” hay interacciones entre: GH: gasto en discapacitados y si es hispano, GE: gasto y edad, y HE: hispano y edad. El último modelo tendría parámetros \\(u\\), \\(a_i\\), \\(b_{ij}\\), \\(c_j\\), \\(d_{ik}\\), \\(e_{jk}\\), y \\(f_k\\) tales que \\[ \\mbox{log}(p_{ijk}) = u + a_i + b_{ij} + c_j + d_{ik} + e_{jk} + f_k. \\] Modelo Devianza Grados de libertad Número de parámetros G + H + E GH + E GE + H G + HE GH + GE GH + HP GE + HP GH + HE GH + GE + HE Di qué modelo es mejor, tanto en términos del ajuste de la devianza y su interpretabilidad y explica por qué. ¿Hay algún modelo que no esté en la lista que sea el más apropiado para ajustar los datos? Manda tu tarea por correo electrónico a: andreuboada@gmail.com con el asunto “EAPLICADA3-Tarea-[XX]-[clave única 1]-[clave única 2]” donde [XX] es el número de la tarea (en este caso es la tarea 01), y [clave única 1] y [clave única 2] son tu clave y la de tu compañero con quien vas a trabajar durante el semestre. Referencias "],
["Rintro.html", "Clase 2 Temas selectos de R 2.1 ¿Qué ventajas tiene R? 2.2 Flujo básico de trabajo para el análisis de datos en R. 2.3 Introducción a R como lenguaje de programación, y la plataforma interactiva de RStudio. 2.4 Estructuras de datos 2.5 R Markdown 2.6 Proyectos de RStudio 2.7 Otros aspectos importantes de R", " Clase 2 Temas selectos de R .espacio { margin-bottom: 1cm; } .espacio3 { margin-bottom: 3cm; } El lenguaje de programación R ha surgido como un avance en el desarrollo de software para análisis estadítico. Hace unos años era común el uso de productos de software proprietario, tales como GAUSS, RATS, EVIEWS, SPSS, SAS, Matlab, Minitab, Stata y software que en principio ni siquiera es apropiado para el análisis de datos, como Microsoft Excel. Estos programas generalmente son demasiado costosos y tienen un rendimiento bajo. Si es necesario hacer un análisis más complejo, entonces los archivos se vuelven demasiado grandes y el todo el proceso se vuelve infactible. 2.1 ¿Qué ventajas tiene R? R es la herramienta más sobresaliente para la estadística, el análisis de datos y el aprendizaje estadístico. Es más que un paquete estadístico; es un lenguaje de programación, por lo que puede crear sus propios objetos, funciones y paquetes. Hablando de paquetes, hay más de 12,000 innovadores paquetes aportados por los usuarios, y que están disponibles en CRAN (The Comprehensive R Archive Network), eso sin mencionar Bioconductor. Para tener una idea de qué paquetes hay disponibles, puedes leer posts en R-bloggers y ver el . Muchos paquetes son enviados por miembros prominentes de sus respectivos campos. Al igual que todos los programas, los programas de R documentan explícitamente los pasos de su análisis y esto facilita la reproducibilidad del análisis estadístico. Además, provee de herramientas para probar rápidamente muchas ideas y corregir fácilmente los problemas que puedan surgir. R puedes usarlo fácilmente en cualquier lugar. Es independiente de la plataforma, por lo que puede usarlo en cualquier sistema operativo. Y es gratis, por lo que puede usarlo en cualquier empleador sin tener que persuadir a su jefe para comprar una licencia. 2.1.1 R es gratuito y de código abierto R está disponible bajo una licencia de código abierto, lo que significa que cualquiera puede descargar y modificar el código. Esta libertad a menudo se conoce como la de software libre (“free as in speech”). R también está disponible de manera gratuita (“free as in beer”). En términos prácticos, esto significa que podemos descargar y usar R gratis. Otro beneficio, aunque un poco más indirecto, es que cualquiera puede acceder al código fuente, modificarlo y mejorarlo. Como resultado, muchos programadores excelentes han contribuido con mejoras y correcciones al código de R. Por esta razón, R es muy estable y confiable. Cualquier libertad también tiene asociadas ciertas obligaciones. En el caso de R, estas obligaciones se describen en las condiciones de la licencia bajo la cual se publica: Licencia Pública General de GNU (GPL), Versión 2. Estas obligaciones te pertienen si solamente haces uso de R. Sin embargo, si haces cambios en su código fuente R y lo redistribuyes, entonces estos cambios se deben poner a disposición de todos los usuarios. 2.1.2 R tiene una comunidad comprometida Muchas personas que usan R eventualmente comienzan a ayudar a los nuevos usuarios y proponen el uso de R en sus lugares de trabajo y círculos profesionales. Por ejemplo, si tienes dudas sobre algún aspecto de R, podrás encontrar ayuda en Stack Overflow. R-Ladies CDMX es parte de R-Ladies Global, una organización mundial que busca generar una comunidad fuerte para compartir dudas, habilidades y apoyo sobre #RStats en una comunidad con perspectiva de género. 2.2 Flujo básico de trabajo para el análisis de datos en R. En el análisis de datos nos interesan técnicas cuantitativas cómo: recolectar, organizar, entender, interpretar y extraer información de colecciones de datos predominantemente numéricos. Estas tareas se resumen en el proceso de análisis del siguiente diagrama: Primero debe importar los datos en R. Esto generalmente significa llevar los datos almacenados en un archivo, una base de datos, o uan Web API, a un data frame de R. Limpiar y transformar los datos es necesario, para que la forma en que se almacenan los datos coincida con la semántica de los datos. En términos generales, cada columna debe ser una variable y cada rengón una observación. La visualización es una actividad fundamentalmente humana. Una buena visualización te puede mostrar cosas que no esperabas y puede ayudarte a plantear nuevas preguntas acerca de los datos. Una buena visualización también puede ayudar a determinar si se está haciendo una pregunta equivocada sobre los datos, o si es encesario recolectar más datos, o bien, obtener datos de fuentes distintas. Las visualizaciones pueden sorprenderte, pero requieren de un ser humano para interpretarlas. Por otro lado, los modelos son una herramienta para complementar las visualizaciones. Los modelos los utilizamos como un instrumento matemático y computacional para responder preguntas precisas acerca de los datos. Por último, la comunicación de los resultados es una parte absolutamente crítica para cualquier proyecto de análisis de datos. 2.3 Introducción a R como lenguaje de programación, y la plataforma interactiva de RStudio. Notas basadas en el material de Teresa Ortiz y Sonia Mendizábal y en el libro “R for Data Science” escrito por Hadley Wickham y Garret Grolemund (Wickham and Grolemund 2016). Hay cuatro cosas que necesitan para ejecutar el código en este taller: R, RStudio, una colección de paquetes de R, llamada tidyverse, y otros paquetes que vamos a ir instalando progresivamente. Los paquetes son la unidad fundamental del código reproducible en R. Incluyen funciones que se pueden utilizar en un ámbito general, su documentación que describe cómo usarlas y datos de ejemplo con código de ejemplo como ayuda para los usuarios. 2.3.1 ¿Cómo entender R? Hay una sesión de R corriendo. La consola de R es la interfaz entre R y nosotros. En la sesión hay objetos. Todo en R es un objeto: vectores, tablas, funciones, etc. Operamos aplicando funciones a los objetos y creando nuevos objetos. 2.3.2 ¿Por qué R? R funciona en casi todas las plataformas (Mac, Windows, Linux e incluso en Playstation 3). R promueve la investigación reproducible. R está actualizado gracias a que tiene una activa comunidad. R se puede combinar con otras herramientas. R permite integrar otros lenguajes (C/C++, Java, Julia, Python) y puede interactuar con muchas fuentes de datos: bases de datos compatibles con ODBC y paquetes estadísticos. 2.3.2.1 Descargar R: versión 3.4.3 Sigue las instrucciones del instalador: OSX: http://cran.stat.ucla.edu/bin/macosx/R-3.4.3.pkg Windows: http://cran.stat.ucla.edu/bin/windows/base/R-3.4.3-win.exe 2.3.2.2 Descargar RStudio: versión 1.1.414 OSX: https://download1.rstudio.org/RStudio-1.1.414.dmg Windows: https://download1.rstudio.org/RStudio-1.1.414.exe RStudio es libre y gratis. Es un ambiente de desarrollo integrado para R: incluye una consola, un editor de texto y un conjunto de herramientas para administrar el espacio de trabajo cuando se utiliza R. Algunos shortcuts útiles en RStudio son: En el editor command/ctrl + enter: enviar código a la consola ctrl + 2: mover el cursor a la consola En la consola flecha hacia arriba: recuperar comandos pasados ctrl + flecha hacia arriba: búsqueda en los comandos ctrl + 1: mover el cursor al editor Más alt + shift + k: muestra los shortcuts disponibles. Para que el código sea reproducible es importante que RStudio únicamente guarde lo relevante para hacer los cálculos, es decir, los scripts y no los cálculos en sí. Con tus scripts de R (y los datos), siempre podemos volver a crear las variables de ambiente. Sin embargo, es casi imposible recuperar un script únicamente a partir de tus variables de ambiente. Por lo tanto, se recomienda ampliamente configurar RStudio para que jamás guarde el ambiente en memoria. 2.3.2.3 Paquetes de R Una de las ventajas de R es la gran comunidad que aporta al desarrollo por medio de paquetes que dan funcionalidad adicional. Esta es la mejor manera de usar R para análisis de datos. Existen dos formas de instalar paquetes: Desde RStudio: Desde la consola: install.packages(&#39;tidyverse&#39;) Una vez instalados los paquetes, se cargan a la sesión de R mediante library. Por ejemplo, para cargar el paquete readr que instalamos anteriormente, hacemos: library(&#39;tidyverse&#39;) print(read_csv) ## function (file, col_names = TRUE, col_types = NULL, locale = default_locale(), ## na = c(&quot;&quot;, &quot;NA&quot;), quoted_na = TRUE, quote = &quot;\\&quot;&quot;, comment = &quot;&quot;, ## trim_ws = TRUE, skip = 0, n_max = Inf, guess_max = min(1000, ## n_max), progress = show_progress()) ## { ## tokenizer &lt;- tokenizer_csv(na = na, quoted_na = TRUE, quote = quote, ## comment = comment, trim_ws = trim_ws) ## read_delimited(file, tokenizer, col_names = col_names, col_types = col_types, ## locale = locale, skip = skip, comment = comment, n_max = n_max, ## guess_max = guess_max, progress = progress) ## } ## &lt;environment: namespace:readr&gt; Como el paquete readr está cargado en la sesión podemos llamar a la función read_csv que se usará más adelante. Importante: Los paquetes se instalan una vez únicamente después de descargar una nueva versión de R. Las librerías se cargan en cada sesión de R nueva. 2.3.2.4 Ayuda en R Existen diferentes formas de pedir ayuda en R. help.start(): ayuda en general help(fun) o ?fun: ayuda sobre la función fun apropos(&quot;fun&quot;): lista de funciones que contiene la palabra fun example(fun): muestra un ejemplo de la función fun help(read_csv) ?read_csv2 2.4 Estructuras de datos Todo lo que existe en R es un objeto. En R se puede trabajar con distintas estructuras de datos, algunas son de una sola dimensión y otras permiten más, como indica el siguiente diagrama: 2.4.1 Vectores Los vectores son estructuras de datos de una dimensión. Un vector se define con la función c(), que concatena diferentes elementos del mismo tipo, esto determina el tipo del vector. Nota: En R, la asignación de un nombre al vector, o en general a cualquier objeto, se realiza con el símbolo &lt;-. Se recomienda usar el shortcut alt - genera &lt;-. Los vectores en R pueden ser de diferentes tipos o clases, a continuación se presentan algunos casos. En R, la clase de cada vector se extrae con la función class(). Vectores numéricos: a &lt;- c(1,2.5,3,4.5,5,6.9) a ## [1] 1.0 2.5 3.0 4.5 5.0 6.9 # clase del vector class(a) ## [1] &quot;numeric&quot; Vectores lógicos: bool &lt;- c(T, F, TRUE, FALSE) bool ## [1] TRUE FALSE TRUE FALSE # clase del vector class(bool) ## [1] &quot;logical&quot; Vectores de caracteres: fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;) fruits ## [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; class(fruits) ## [1] &quot;character&quot; Para la manipulación de caracteres es recomendable el paquete stringr que permite realizar operaciones sobre este tipo de elementos. Más adelante se presenta un ejemplo. La selección de elementos de un vector se realiza con [ ] para indicar la posición. A diferencia de otros lenguajes de programación las posiciones en R incian en 1. # elemento en la posición 1 fruits[1] ## [1] &quot;apple&quot; # elemento en la posición 1 y 5 fruits[c(1,5)] ## [1] &quot;apple&quot; &quot;lemon&quot; En R es posible extraer un valor del vector indexándolo con posiciones negativas: # omitir el elemento en la primera posición fruits[-1] ## [1] &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Una característica particular de vectores en R, es que cada elemento puede ser nombrado. Para hacer esto se usa la función names(). Por ejemplo, al vector fruits agregemos el nombre en español de la fruta para como el nombre de cada elemento. names(fruits) &lt;- c(&#39;manzana&#39;, &#39;platano&#39;, &#39;naranja&#39;, &#39;piña&#39;, &#39;limón&#39;, &#39;kiwi&#39;) fruits ## manzana platano naranja piña limón kiwi ## &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; # cada elemento tiene un nombre asignado fruits[5] ## limón ## &quot;lemon&quot; Para eliminar los nombres asignados a cada elemento, se asigna NULL a los nombres del vector: ## NULL ## [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Los tipos que pueden tener los vectores se muestran en la siguiente figura. Veamos que regresan los siguientes comandos: typeof(TRUE) typeof(1L) typeof(1.5) typeof(&quot;a&quot;) Cada vector tiene 3 propiedades: x &lt;- 1:5 Tipo typeof(x) ## [1] &quot;integer&quot; Longitud length(x) ## [1] 5 Atributos attributes(x) ## NULL Existe la función is.vector(x) para determinar si un objeto es un vector: is.vector(1:3) ## [1] TRUE ¿Qué regresa ìs.vector(factor(1:3))? TRUE FALSE NA Ninguna de las anteriores Ejemplo Del vector de seis frutas diferentes llamado fruits, localiza únicamente las frutas que tengan la letra w. # Cargamos la librería library(stringr) fruits &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;) fruits ## [1] &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; Esto es posible con la función str_detect(), que regresa un vector booleano para cada elemento del vector donde encontró el patron w. str_detect(fruits, pattern = &#39;w&#39;) ## [1] FALSE FALSE FALSE FALSE FALSE TRUE Ahora, seleccionamos únicamente los elementos del vector que tienen la letra w: # Selecciona el elemento con valor TRUE: kiwi fruits[str_detect(fruits, pattern = &#39;w&#39;)] ## [1] &quot;kiwi&quot; 2.4.1.1 Operaciones de vectores En R las operaciones de vectores son componente a componente. Sumas, multiplicaciones y potencias: # Suma del vector longitud 6 y un vector longitud 1 a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) b &lt;- 1 a + b ## [1] 2.0 3.5 4.0 5.5 6.0 7.9 # Multiplicaciones componente a componente misma longitud a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) a*a ## [1] 1.00 6.25 9.00 20.25 25.00 47.61 # Multiplicaciones y potencias a &lt;- c(1, 2.5, 3, 4.5, 5, 6.9) c &lt;- (a^2 + 5)*3 c ## [1] 18.00 33.75 42.00 75.75 90.00 157.83 Comparaciones: En este tipo de operación se obtiene un vector lógico dependiendo si la condición se cumple o no. # Comparar el vector dado un valor específico a &gt; 3 ## [1] FALSE FALSE FALSE TRUE TRUE TRUE a[a &gt; 3] # únicamente elementos que cumple la condicion de ser mayores a 3 ## [1] 4.5 5.0 6.9 fruits != &#39;apple&#39; ## [1] FALSE TRUE TRUE TRUE TRUE TRUE fruits[fruits != &#39;apple&#39;] # únicamente elementos que no son apple ## [1] &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; &quot;kiwi&quot; # Comparar el vector dado otro vector de la misma dimensión x &lt;- c(1, 2, 3, 4, 5, 6) a == x ## [1] TRUE FALSE TRUE FALSE TRUE FALSE a[a == x] # unicamente los elementos iguales y en la misma posición entre a y x ## [1] 1 3 5 Funciones predeterminadas: Algunas funciones predeterminadas del paquete básico de R son muy útiles para la manipulación de vectores y el análisis de datos. A continuación se enlistan algunasde las más comúnes: length: número de elementos en el vector class: clase del vector summary: resumen de información del vector unique: valores unicos del vector table: tabla de frecuencias para cada elemento del vector sum: suma de los elementos del vector mean: promedio de elementos del vector sd: desviación estándar de los elementos del vector cumsum: suma acumulada de elemento anterior del vector Aplica las funciones comúnes enlistadas antes en el vector x &lt;- c(1, 2, 3, 4, 5, 6) 2.4.1.2 Otros tipos de vectores: Existen tipos de vectores con características importantes: Secuencias: los vectores de secuencias se pueden crear con la función seq() o con :, de la siguiente forma: # secuecia de 1 al 10 1:10 ## [1] 1 2 3 4 5 6 7 8 9 10 # secuecia de pares de 0 al 10 seq(0, 10, by = 2) ## [1] 0 2 4 6 8 10 Vectores de fechas: se pueden hacer operaciones y algunas funciones definidas de fechas. El paquete lubridate permite manejar fechas con mayor facilidad. Se incia la secuencia el 08 de agosto de 2016 y se asigna la clase de fecha con la función as.Date(). Se generan en total 10 fechas length.out = 10 y con una distancua semanal by=&quot;1 week&quot;, es decir, se tiene la fecha de 10 semanas consecutivas: library(lubridate) tenweeks &lt;- seq( as.Date(&quot;2016-08-08&quot;), length.out = 10, by=&quot;1 week&quot;) tenweeks ## [1] &quot;2016-08-08&quot; &quot;2016-08-15&quot; &quot;2016-08-22&quot; &quot;2016-08-29&quot; &quot;2016-09-05&quot; ## [6] &quot;2016-09-12&quot; &quot;2016-09-19&quot; &quot;2016-09-26&quot; &quot;2016-10-03&quot; &quot;2016-10-10&quot; class(tenweeks) ## [1] &quot;Date&quot; Se pueden hacer algunas operaciones como se ejemplifica en el siguiente código. # Aumenta un día a cada fecha tenweeks + 1 ## [1] &quot;2016-08-09&quot; &quot;2016-08-16&quot; &quot;2016-08-23&quot; &quot;2016-08-30&quot; &quot;2016-09-06&quot; ## [6] &quot;2016-09-13&quot; &quot;2016-09-20&quot; &quot;2016-09-27&quot; &quot;2016-10-04&quot; &quot;2016-10-11&quot; # Aumenta un día a cada fecha tenweeks ## [1] &quot;2016-08-08&quot; &quot;2016-08-15&quot; &quot;2016-08-22&quot; &quot;2016-08-29&quot; &quot;2016-09-05&quot; ## [6] &quot;2016-09-12&quot; &quot;2016-09-19&quot; &quot;2016-09-26&quot; &quot;2016-10-03&quot; &quot;2016-10-10&quot; weekdays(tenweeks) # Día de la semana de cada fecha ## [1] &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; ## [8] &quot;Monday&quot; &quot;Monday&quot; &quot;Monday&quot; Vectores de factores: este tipo de vector es usado comúnmente para variables categóricas. En R existe la clase factor que se asigna con la función homónima factor() o as.factor(). Un vector de factores tiene dos elementos importantes, levels o niveles y labels o etiquetas. Los niveles determinan las categorías únicas del vector y pueden ser etiquetadas, como se muestra en le siguiente código para un vector de frutas. En este ejemplo se tienen valores de frutas repetidos, se asigna un orden de niveles específicos y etiquetas específicas para cada nivel. fruits &lt;- c(&quot;banana&quot;, &quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;, &quot;apple&quot;) # Vector de caracteres a vector de factores fruits.fac &lt;- factor(fruits, levels = c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;kiwi&quot;), labels = c(&#39;manzana&#39;, &#39;platano&#39;, &#39;naranja&#39;, &#39;piña&#39;, &#39;limón&#39;, &#39;kiwi&#39;) ) fruits.fac ## [1] platano manzana platano naranja piña limón kiwi manzana ## Levels: manzana platano naranja piña limón kiwi # Clase class(fruits.fac) ## [1] &quot;factor&quot; # Niveles etiquetados levels(fruits.fac) ## [1] &quot;manzana&quot; &quot;platano&quot; &quot;naranja&quot; &quot;piña&quot; &quot;limón&quot; &quot;kiwi&quot; # Niveles únicos as.numeric(fruits.fac) ## [1] 2 1 2 3 4 5 6 1 # Agregar un nuevo valor fruits.fac[7] &lt;- &#39;melon&#39; ## Warning in `[&lt;-.factor`(`*tmp*`, 7, value = &quot;melon&quot;): invalid factor level, ## NA generated fruits.fac ## [1] platano manzana platano naranja piña limón &lt;NA&gt; manzana ## Levels: manzana platano naranja piña limón kiwi Importante: En R los vectores no pueden combinar diferentes tipos de elementos. El tipo de elementos es lo que define la clase del vector. Es por esto que en el ejemplo, al sustituir la posición 7 por melon se obtiene un NA, melón no está incluído en los niveles definidos del vector. Existen también los factores ordenados. Por ejemplo, consideremos los datos de flores de iris de Fisher: library(forcats) iris %&gt;% sample_n(10) %&gt;% knitr::kable() Sepal.Length Sepal.Width Petal.Length Petal.Width Species 76 6.6 3.0 4.4 1.4 versicolor 24 5.1 3.3 1.7 0.5 setosa 93 5.8 2.6 4.0 1.2 versicolor 17 5.4 3.9 1.3 0.4 setosa 23 4.6 3.6 1.0 0.2 setosa 114 5.7 2.5 5.0 2.0 virginica 94 5.0 2.3 3.3 1.0 versicolor 47 5.1 3.8 1.6 0.2 setosa 100 5.7 2.8 4.1 1.3 versicolor 117 6.5 3.0 5.5 1.8 virginica Este conjunto de datos multivariados fue presentado por el estadístico y biólogo británico Ronald Fisher en su artículo de 1936 “El uso de mediciones múltiples en problemas taxonómicos como un ejemplo de análisis discriminante lineal”. Edgar Anderson recopiló los datos para cuantificar la variación morfológica de las flores de iris de tres especies relacionadas. Los datos fueron recolectadas en la Península de Gaspé. (Fisher 1936) El conjunto de datos consiste de 50 observaciones de cada una de las tres especies de Iris (Iris setosa, Iris virginica e Iris versicolor). Se midieron cuatro características de cada muestra: la longitud y el ancho de los sépalos y pétalos, en centímetros. Con base en la combinación de estas cuatro características, Fisher desarrolló un modelo discriminante lineal para distinguir las especies entre sí. Supongamos que queremos analizar la distribución del ancho del sépalo por especie de flor de iris: Esto ocurre porque los factores están ordenados alfabéticamente: levels(iris$Species) ## [1] &quot;setosa&quot; &quot;versicolor&quot; &quot;virginica&quot; Sería mejor que las especies estuvieran ordenadas por la mediana de la distribución para poder hacer mejores comparaciones. Notemos el uso de la función fct_reorder del paquete forcats. library(forcats) iris$Species_ord &lt;- fct_reorder(iris$Species, iris$Sepal.Width, fun = median) levels(iris$Species_ord) ## [1] &quot;versicolor&quot; &quot;virginica&quot; &quot;setosa&quot; 2.4.2 Data Frames Un data.frame es un conjunto de vectores del mismo tamaño agrupado en una tabla. Son estructuras rectangulares donde cada columna tiene elementos de la misma clase, pero columnas distintas pueden tener diferentes clases. Por ejemplo: tabla &lt;- data.frame( n = 1:6, frutas = fruits[1:6], valor = c(1, 2.5, 3, 4.5, 5, 6.9) ) tabla ## n frutas valor ## 1 1 banana 1.0 ## 2 2 apple 2.5 ## 3 3 banana 3.0 ## 4 4 orange 4.5 ## 5 5 pineapple 5.0 ## 6 6 lemon 6.9 Similar a las funciones de vectores, en data.frames existen funciones predeterminadas que ayudan a su manipulación. head permite ver los primeros 6 elemento del data.frame: head(mtcars) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 ## Valiant 18.1 6 225 105 2.76 3.460 20.22 1 0 3 1 str describe el tipo de variables en el data.frame: str(mtcars) ## &#39;data.frame&#39;: 32 obs. of 11 variables: ## $ mpg : num 21 21 22.8 21.4 18.7 18.1 14.3 24.4 22.8 19.2 ... ## $ cyl : num 6 6 4 6 8 6 8 4 4 6 ... ## $ disp: num 160 160 108 258 360 ... ## $ hp : num 110 110 93 110 175 105 245 62 95 123 ... ## $ drat: num 3.9 3.9 3.85 3.08 3.15 2.76 3.21 3.69 3.92 3.92 ... ## $ wt : num 2.62 2.88 2.32 3.21 3.44 ... ## $ qsec: num 16.5 17 18.6 19.4 17 ... ## $ vs : num 0 0 1 1 0 1 0 1 1 1 ... ## $ am : num 1 1 1 0 0 0 0 0 0 0 ... ## $ gear: num 4 4 4 3 3 3 3 4 4 4 ... ## $ carb: num 4 4 1 1 2 1 4 2 2 4 ... dim muestra la dimensión (renglones, columnas) del data.frame: dim(mtcars) ## [1] 32 11 colnames y names muestran los nombres de las columnas del data.frame: names(mtcars) ## [1] &quot;mpg&quot; &quot;cyl&quot; &quot;disp&quot; &quot;hp&quot; &quot;drat&quot; &quot;wt&quot; &quot;qsec&quot; &quot;vs&quot; &quot;am&quot; &quot;gear&quot; ## [11] &quot;carb&quot; rownames muestra el nombre de los renglones del data.frame: rownames(mtcars) ## [1] &quot;Mazda RX4&quot; &quot;Mazda RX4 Wag&quot; &quot;Datsun 710&quot; ## [4] &quot;Hornet 4 Drive&quot; &quot;Hornet Sportabout&quot; &quot;Valiant&quot; ## [7] &quot;Duster 360&quot; &quot;Merc 240D&quot; &quot;Merc 230&quot; ## [10] &quot;Merc 280&quot; &quot;Merc 280C&quot; &quot;Merc 450SE&quot; ## [13] &quot;Merc 450SL&quot; &quot;Merc 450SLC&quot; &quot;Cadillac Fleetwood&quot; ## [16] &quot;Lincoln Continental&quot; &quot;Chrysler Imperial&quot; &quot;Fiat 128&quot; ## [19] &quot;Honda Civic&quot; &quot;Toyota Corolla&quot; &quot;Toyota Corona&quot; ## [22] &quot;Dodge Challenger&quot; &quot;AMC Javelin&quot; &quot;Camaro Z28&quot; ## [25] &quot;Pontiac Firebird&quot; &quot;Fiat X1-9&quot; &quot;Porsche 914-2&quot; ## [28] &quot;Lotus Europa&quot; &quot;Ford Pantera L&quot; &quot;Ferrari Dino&quot; ## [31] &quot;Maserati Bora&quot; &quot;Volvo 142E&quot; La forma de indexar data.frames es similar a la de un vector [ ], pero en este caso es posible indexar renglones y columnas: # por posiciones de renglones mtcars[1:4, ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Datsun 710 22.8 4 108 93 3.85 2.320 18.61 1 1 4 1 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 # por posiciones de columnas mtcars[1:4, c(1, 4, 6)] ## mpg hp wt ## Mazda RX4 21.0 110 2.620 ## Mazda RX4 Wag 21.0 110 2.875 ## Datsun 710 22.8 93 2.320 ## Hornet 4 Drive 21.4 110 3.215 # por nombre de renglones específico mtcars[c(&#39;Mazda RX4&#39;, &#39;Mazda RX4 Wag&#39;), ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21 6 160 110 3.9 2.875 17.02 0 1 4 4 mtcars[str_detect(rownames(mtcars), &quot;Mazda&quot; ), ] ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21 6 160 110 3.9 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21 6 160 110 3.9 2.875 17.02 0 1 4 4 También se puede seleccionar o filtrar el data.frame dado una condición: mtcars[mtcars$cyl == 6, ] # Selecciona los carros con número de cilindros mayor a 6 ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160.0 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160.0 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258.0 110 3.08 3.215 19.44 1 0 3 1 ## Valiant 18.1 6 225.0 105 2.76 3.460 20.22 1 0 3 1 ## Merc 280 19.2 6 167.6 123 3.92 3.440 18.30 1 0 4 4 ## Merc 280C 17.8 6 167.6 123 3.92 3.440 18.90 1 0 4 4 ## Ferrari Dino 19.7 6 145.0 175 3.62 2.770 15.50 0 1 5 6 rbind permite unir dos data.frames por renglones, si y solo si, tiene el mismo número de columnas: rbind(mtcars[str_detect(rownames(mtcars), &quot;Mazda&quot; ), ], mtcars[str_detect(rownames(mtcars), &quot;Hornet&quot;), ]) ## mpg cyl disp hp drat wt qsec vs am gear carb ## Mazda RX4 21.0 6 160 110 3.90 2.620 16.46 0 1 4 4 ## Mazda RX4 Wag 21.0 6 160 110 3.90 2.875 17.02 0 1 4 4 ## Hornet 4 Drive 21.4 6 258 110 3.08 3.215 19.44 1 0 3 1 ## Hornet Sportabout 18.7 8 360 175 3.15 3.440 17.02 0 0 3 2 cbind permite unir dos data.frames por columna, si y solo si, tiene el mismo número de renglones: tabla &lt;- data.frame( n = 1:6, frutas = c(&quot;apple&quot;, &quot;banana&quot;, &quot;orange&quot;, &quot;pineapple&quot;, &quot;lemon&quot;, &quot;apple&quot;), valor = runif(6) ) tabla ## n frutas valor ## 1 1 apple 0.91105108 ## 2 2 banana 0.66714187 ## 3 3 orange 0.69287339 ## 4 4 pineapple 0.76913217 ## 5 5 lemon 0.05792242 ## 6 6 apple 0.41570551 tabla.color &lt;- data.frame( peso = rnorm(6), color = c(&#39;rojo&#39;, &#39;amarillo&#39;, &#39;naranje&#39;, &#39;amarillo&#39;, &#39;amarillo&#39;, &#39;rojo&#39;) ) tabla.color ## peso color ## 1 1.2376857 rojo ## 2 -0.4146773 amarillo ## 3 -0.2025595 naranje ## 4 -0.5081795 amarillo ## 5 -0.2345212 amarillo ## 6 -1.4100427 rojo cbind(tabla, tabla.color) ## n frutas valor peso color ## 1 1 apple 0.91105108 1.2376857 rojo ## 2 2 banana 0.66714187 -0.4146773 amarillo ## 3 3 orange 0.69287339 -0.2025595 naranje ## 4 4 pineapple 0.76913217 -0.5081795 amarillo ## 5 5 lemon 0.05792242 -0.2345212 amarillo ## 6 6 apple 0.41570551 -1.4100427 rojo Nota: Una forma de seleccionar una columna es con el símbolo $ (pesitos) y el nombre de la columna. Ejercicio: Del data.frame mtcars realiza lo siguiente: Calcula el promedio de cilindros cyl en los datos. Calcula el número de autos con peso wt mayor a 2. Extrae la información de los coches Merc. Calcula el promedio de millas por galón mpg de los autos Merc. 2.4.3 Listas La lista es una estructura de datos de una dimensión que permite distintas clases de elementos en el objeto. La función list() permite crear objetos de esta clase. Por ejemplo: lista &lt;- list( n = 100, x = &#39;hello&#39;, frutas = fruits, tabla = tabla, ejemlista = list(a = 15:20, b = 1:5) ) lista ## $n ## [1] 100 ## ## $x ## [1] &quot;hello&quot; ## ## $frutas ## [1] &quot;banana&quot; &quot;apple&quot; &quot;banana&quot; &quot;orange&quot; &quot;pineapple&quot; &quot;lemon&quot; ## [7] &quot;kiwi&quot; &quot;apple&quot; ## ## $tabla ## n frutas valor ## 1 1 apple 0.91105108 ## 2 2 banana 0.66714187 ## 3 3 orange 0.69287339 ## 4 4 pineapple 0.76913217 ## 5 5 lemon 0.05792242 ## 6 6 apple 0.41570551 ## ## $ejemlista ## $ejemlista$a ## [1] 15 16 17 18 19 20 ## ## $ejemlista$b ## [1] 1 2 3 4 5 La lista anterior contiene numeros, caracteres, vectores, data.frames e incluso otra lista con distintas secuencias. Se puede indexar una lista de varias formas: Usando [ ]: extrae el objeto como una lista, incluyendo el nombre asignado: lista[1] ## $n ## [1] 100 Usando [[ ]]: extrae únicamente el objeto respetando la clase de éste y sin incluir nombres: lista[[1]] ## [1] 100 Usando $ mas el nombre: extrae únicamente el objeto: lista$ejemlista$a ## [1] 15 16 17 18 19 20 Importante: Aunque en este tutorial no se usarán las listas son objetos útiles. 2.5 R Markdown R Markdown es un sistema para crear documentos, en los cuales se combina tu código de R, los resultados y el texto que escribes como comentario en forma de prosa. Algunas ventajas y características de R Markdown son: cualquier R markdown Rmd es totalmente reproducible admite docenas de formatos de salida, como archivos PDF, Word, presentaciones de diapositivas y más. es muy útil para los tomadores de decisiones, quienes quieren enfocarse en las conclusiones, no en el código detrás del análisis. permite colaborar con otras personas de estadística que estén interesadas en tus conclusiones y cómo llegaste a ellas 2.5.1 ¿Qué es R Markdown? R Markdown integra código de R, comandos de TeX y muchas herramientas externas. Cuando construyes el documento, R Markdown envía un archivo con formato .Rmd a otro paquete llamado knitr, http://yihui.name/knitr/, que ejecuta el código de todos los chunks y crea un nuevo archivo de markdown con formato md que ya incluye el código y los resultados. Este archivo de markdown generado por knitr después es procesado por pandoc, http://pandoc.org/, que es el que crea el archivo final. La ventaja de este flujo de trabajo de dos pasos es que te permite crear una amplia gama de formatos de salida. 2.5.2 Estructura básica de R Markdown Éste es un R Markdown, un archivo de texto sin formato que tiene la extensión .Rmd: cat(htmltools::includeText(&quot;rmarkdown/ejemplo.Rmd&quot;)) ## --- ## title: &quot;Ejemplo de R Markdown&quot; ## date: 2018-01-22 ## output: html_document ## --- ## ## Veamos unos datos de diamantes para analizar la distribución ## del quilataje de aquellos diamantes que tiene quilataje ## menor a 2.5: ## ## ```{r setup, include = FALSE} ## library(ggplot2) ## library(dplyr) ## ## smaller &lt;- diamonds %&gt;% ## filter(carat &lt;= 2.5) ## ``` ## ## En el __chunk__ de arriba se hizo el filtro adecuado, ahora ## veamos una muestra de tamaño 10 de los datos: ## ## ```{r, echo = FALSE} ## smaller %&gt;% ## sample_n(10) %&gt;% ## knitr::kable() ## ``` ## ## Los datos corresponde a `r nrow(diamonds)` diamantes. Solamente ## `r nrow(diamonds) - nrow(smaller)` son de más de 2.5 quilates. ## La distribución de los diamantes de menor quilataje se muestra abajo: ## ## ```{r, echo = FALSE} ## smaller %&gt;% ## ggplot(aes(carat)) + ## geom_freqpoly(binwidth = 0.01) ## ``` Contiene tres tipos importantes de contenido: 1 Un encabezado en formato YAML rodeado por ---s.. Chunks de código de R rodeados por ```. Texto mezclado con formato de texto simple como # heading y _italics_. Cuando abres un .Rmd, RStudio muestra una interfaz de tipo notebook en la cual tanto el código como la salida están intercalados. Puedes ejecutars cada chunk de código presionando el botón de “Run” (en la parte superior derecha de la ventana de script), o bien, Cmd/Ctrl + Shift + Enter. RStudio ejecuta el código y muestra los resultados junto con el código. Para generar un informe completo que contenga todo el texto, el código y los resultados, presiona el botón “Knit”, o bien, Cmd/Ctrl + Shift + K. Esto generará un reporte en una nueva ventana y creará un archivo HTML independiente que podrás compartir con los demás. Para comenzar con tu propio archivo .Rmd, selecciona File &gt; New File &gt; R Markdown… en la barra superior. RStudio te mostrará un asistente que puedes usar para crear un archivo de R Markdown con ejemplos básicos. Como R Markdown integara varias herramientas, entonces no es posible que la ayuda esté autocontenida en RStudio. Esto significa que gran parte de la ayuda no la podrás encontrar a través de ?. Hay mucha documentación en línea y un recurso es particularmente útil son los cheatsheets de RStudio, que están disponibles en http://rstudio.com/cheatsheets. 2.6 Proyectos de RStudio Los proyectos de RStudio son útiles para mantener juntos todos los archivos asociados a un análisis (o proyecto) específico: datos de entrada, scripts de R, resultados, gráficas, datos de salida. Ésta es una práctica limpia y ordenada de trabajar y RStudio tiene soporte integrado para esto a través de los proyectos. Hagamos un proyecto. Para esto debes presionar File &gt; New Project, luego: Puedes cerrar el proyecto y después hacer doble click en el archivo .Rproj para volver a abrir el proyecto. Observa que regresas a donde estabas, en el mismo directorio de trabajo, con el mismo historial de comandos, y todos los archivos en los que estaba trabajando siguen abiertos. En resumen, los proyectos de RStudio te brindan un flujo de trabajo sólido que te servirá en el futuro: Creas un proyecto de RStudio para cada proyecto de análisis de datos. Mantienes los archivos de datos ahí mismo para después cargarlos en un script. Mantienes tus scripts organizados en el mismo directorio, y los puedes encontrar fácilmente para editarlos y ejecutarlos. Puedes guardar ahí mismo las salidas del código, como gráficas y datos limpios. Solamente utilizas rutas relativas, no absolutas. Todo lo que necesitas está en un solo lugar y separado de los demás proyectos en los que estés trabajando. 2.7 Otros aspectos importantes de R 2.7.1 Valores faltantes En R los datos faltantes se expresan como NA. La función is.na() regresa un vector lógico sobre los valores que son o no NA. is.na(c(4, 2, NA)) ## [1] FALSE FALSE TRUE El default de R es propagar los valores faltantes, esto es, si se desconoce el valor de una de las componentes de un vector, también se desconoce la suma del mismo, en general, cualquier operación. sum(c(4, 2, NA)) ## [1] NA mean(c(4, 2, NA)) ## [1] NA 3 &gt; NA ## [1] NA (NA == NA) ## [1] NA Sin embargo, muchas funciones tienen un argumento na.rm para removerlos. sum(c(4, 2, NA), na.rm = T) ## [1] 6 mean(c(4, 2, NA), na.rm = T) ## [1] 3 2.7.2 Funciones Todo lo que sucede en R es una función. R es un lenguaje de programación funcional. Es decir, proporciona muchas herramientas para la creación y manipulación de funciones. En R las funciones, al igual que los vectores, se pueden asignar a variables, guardarlas en listas, usarlas como argumentos en otras funciones, crearlas dentro de otras funciones, e incluso regresar como resultado de una función más funciones. Una caja negra Una función puede verse como una caja negra que realiza un proceso o serie de instrucciones condicionadas a un valor de entrada, y cuyo resultado es un valor de salida. En R existen algunas funciones pre cargadas que ya hemos usado, por ejemplo, .la función mean(). input &lt;- c(1:5) output &lt;- mean( input ) output ## [1] 3 Sin embargo, también es posible escribir nuestras propias funciones. Escibir una función En R es posible escribir funciones y es muy recomendable para dar soluciones a problemas simples. Existen ocasiones en las que al programar copias y pegas cierto código varias veces para una meta en especial. En ese momento, es necesario pasar el código a una función. Una función soluciona un problema en particular. La función function() nos permite crear funciones con la siguiente estructura: my_fun &lt;- function( arg1 ){ body return() } En general, esta estructura se respeta en las funciones predeterminadas de R. Creamos una función que sume uno a cualquier número. suma_uno_fun &lt;- function( x ){ y = x + 1 return(y) } Aplicamos la función: suma_uno_fun(5) ## [1] 6 Podemos ver que en nuestra sesión ya existe la función con la función ls(). ls() ## [1] &quot;a&quot; &quot;b&quot; &quot;bool&quot; &quot;c&quot; ## [5] &quot;fruits&quot; &quot;fruits.fac&quot; &quot;input&quot; &quot;iris&quot; ## [9] &quot;lista&quot; &quot;output&quot; &quot;suma_uno_fun&quot; &quot;tabla&quot; ## [13] &quot;tabla.color&quot; &quot;tenweeks&quot; &quot;x&quot; Esta función en lista los objetos existente en la sesión actual. Argumentos de funciones En R los argumentos de las funciones pueden llamarse por posición o nombre. Consideremos la siguiente función en la que se eleva un numero a un exponente determinado. potencia_fun &lt;- function(base, exponente){ base^exponente } Los argumentos pueden indicarse por posición: potencia_fun(2, 3) ## [1] 8 O bien por nombre: potencia_fun(exponente = 2, base = 3) ## [1] 9 Argumentos predeterminados En una función es posible asignar valores predeterminados a los argumentos. Por ejemplo, modificamos la función para asignar un valor predeterminado del exponente. potencia_default_fun &lt;- function(base, exponente = 2){ base^exponente } Al llamar la función, no es necesario definir un valor para el exponente y en automático tomará el valor exponente = 2. potencia_default_fun(2) ## [1] 4 Argumentos nulos Una función puede no tener argumentos y simplemente correr un proceso. En este caso, usaremos la función sample() que elige una muestra aleatoria de tamaño 1 de un vector de 1 a 6 imitando un dado dentro la la función lanza_dado(). lanza_dado &lt;- function() { numero &lt;- sample(1:6, size = 1) numero } Ahora tiraremos dos veces los dados. Primer lanzamiento: lanza_dado() ## [1] 5 Segundo lanzamiento: lanza_dado() ## [1] 5 Alcance de la función Es importante mencionar que las variables que son definidas dentro de la función no son accesibles fuera de la función. Es decir, las funciones en R tienen un ambiente local. Por ejemplo, al correr la siguiente función e intentar imprimir el objeto x regresa un error. xs_fun &lt;- function(a){ x &lt;- 2 a*x } xs_fun(2) ## [1] 4 # print(x) La función crea un ambiente nuevo dentro de la misma, en caso de no encontrar el valor de la variable en el ambiente local, sube un nivel. Este nuevo nivel puede ser el ambiente global. Por ejemplo: y &lt;- 10 ys_fun &lt;- function(a){ a*y } ys_fun(2) ## [1] 20 Si la función está contenida en otra función, primero buscará en el ambiente local, después en el ambiente local de la función superior y luego en el ambiente global. Por ejemplo: y &lt;- 10 mas_uno_fun &lt;- function(a){ c &lt;- 1 y &lt;- 1 ys_add_fun &lt;- function(a){ a*y + c } ys_add_fun(a) } Si llamamos la función con un valor a = 2 al igual que en el ejemplo anterior, ¿por qué da el siguiente resultado y no 21 o 20? mas_uno_fun(a = 2) ## [1] 3 Funciones para funciones O bien funciones para entender las partes de la función. body() body(suma_uno_fun) ## { ## y = x + 1 ## return(y) ## } args() args(mean.default) ## function (x, trim = 0, na.rm = FALSE, ...) ## NULL if() Una función que se usa al programar funciones es if() que permite agregar una condición. divide_fun &lt;- function(num, den){ if(den == 0){ return(&quot;Denominador es cero&quot;) }else{ return(num/den) } } Al ejecutar la función y tener cero en el denominador imprime el string. divide_fun(10, 0) ## [1] &quot;Denominador es cero&quot; Al no tener cero en el denominador la operación se ejecuta. divide_fun(10, 2) ## [1] 5 Todas las operaciones en R son producto de la llamada a una función, esto incluye operaciones como +, operadores que controlan flujo como for, if y while, e incluso operadores para obtener subconjuntos como [ ] y $. x &lt;- 3 y &lt;- 4 `+`(x, y) ## [1] 7 for (i in 1:2) print(i) ## [1] 1 ## [1] 2 `for`(i, 1:2, print(i)) ## [1] 1 ## [1] 2 Cuando llamamos a una función podemos especificar los argumentos con base en la posición, el nombre completo o el nombre parcial: f &lt;- function(abcdef, bcde1, bcde2) { list(a = abcdef, b1 = bcde1, b2 = bcde2) } str(f(1, 2, 3)) ## List of 3 ## $ a : num 1 ## $ b1: num 2 ## $ b2: num 3 str(f(2, 3, abcdef = 1)) ## List of 3 ## $ a : num 1 ## $ b1: num 2 ## $ b2: num 3 Podemos abreviar el nombre de los argumentos: str(f(2, 3, a = 1)) ## List of 3 ## $ a : num 1 ## $ b1: num 2 ## $ b2: num 3 Siempre y cuando la abreviación no sea ambigua: #f(1, 3, b = 1) Los argumentos de las funciones en R se evaluan conforme se necesitan: f &lt;- function(a, b){ a ^ 2 } f(2) ## [1] 4 La función anterior nunca utiliza el argumento b, de tal manera que f(2) no produce ningún error. 2.7.3 Funcionales La familia de funciones apply pertenece a la librería base en R y facilitan la manipulación de datos de forma repetitiva. Las funciones de esta familia son: apply(), lapply(), sapply(), vapply(), mapply(), rapply(), y tapply(). La estructura de los datos de entrada y el formato del resultado o salida determinarán cual función usar. En este taller solo se verán las primeras tres funciones. apply() Esta es la función que manipula arreglos homogéneos, en particular, se revisa el caso de matrices que son arreglos de dos dimensiones. La función tiene los siguientes argumentos: apply(X, MARGIN, FUN, ...) X representa el arreglo de dos dimensiones. MARGIN representa la dimensión sobre la que se va a resumir la información. Donde 1 = renglon o primera dimensión y 2 = columna o segunda dimensión. FUN representa la función que resume la información. Tomemos la siguiente matriz de simulaciones: set.seed(1) mat_norm &lt;- matrix(rnorm(24, mean = 0, sd = 1), nrow = 4, ncol = 6) mat_norm ## [,1] [,2] [,3] [,4] [,5] [,6] ## [1,] -0.6264538 0.3295078 0.5757814 -0.62124058 -0.01619026 0.91897737 ## [2,] 0.1836433 -0.8204684 -0.3053884 -2.21469989 0.94383621 0.78213630 ## [3,] -0.8356286 0.4874291 1.5117812 1.12493092 0.82122120 0.07456498 ## [4,] 1.5952808 0.7383247 0.3898432 -0.04493361 0.59390132 -1.98935170 Deseamos obtener la suma de cada columna de la matriz. El primer método, quizá el mas intuitivo en este momento, es obtener cada elemento o columna, aplicar la función a cada elemento y concatenar: prom_col_m1 &lt;- c(sum(mat_norm[, 1]), sum(mat_norm[, 2]), sum(mat_norm[, 3]), sum(mat_norm[, 4]), sum(mat_norm[, 5]), sum(mat_norm[, 6])) prom_col_m1 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Segundo método: prom_col_m2 &lt;- vector( length = ncol(mat_norm)) for(j in 1:ncol(mat_norm)){ prom_col_m2[j] &lt;- sum(mat_norm[, j]) } prom_col_m2 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Tercer método: prom_col_m3 &lt;- apply(X = mat_norm, MARGIN = 2, FUN = sum) prom_col_m3 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Cuarto método: prom_col_m4 &lt;- colSums(mat_norm) prom_col_m4 ## [1] 0.3168417 0.7347931 2.1720174 -1.7559432 2.3427685 -0.2136730 Ahora, para obtener la suma por renglón usando el tercer método de la función apply(), únicamente es necesario cambiar la dimensión sobre la que voy a resumir con el argumento MARGIN = 1. prom_row_m3 &lt;- apply(mat_norm, 1, sum) prom_row_m3 ## [1] 0.5603818 -1.4309408 3.1842987 1.2830648 Esto es equivalente al primer método que usamos: prom_row_m1 &lt;- c(sum(mat_norm[1, ]), sum(mat_norm[2, ]), sum(mat_norm[3, ]), sum(mat_norm[4, ])) prom_row_m1 ## [1] 0.5603818 -1.4309408 3.1842987 1.2830648 La ventaja de usar la función apply() es que se puede usar cualquier función. Por ejemplo, obtener la desviación estándar. apply(mat_norm, 1, sd) ## [1] 0.6341809 1.1718660 0.8338847 1.2066403 O bien, una crear una función propia (definida por el usuario) con la función function(): cv_vec_m3 &lt;- apply(mat_norm, 1, function(reng){ cv &lt;- mean(reng)/sd(reng) return(cv) }) cv_vec_m3 ## [1] 0.1472718 -0.2035131 0.6364386 0.1772228 Funciones Anónimas: A este tipo de funciones se les llama funciones anónimas porque no se nombran ni guardan en el ambiente de R y únicamente funcionan dentro del comando que las llama. lapply() La función lapply() aplica una función sobre una lista o un vector y regresa el resultado en otra lista. Vector de ciudades: ciudades_vec &lt;- c(&quot;Aguascalientes&quot;, &quot;Monterrey&quot;, &quot;Guadalajara&quot;, &quot;México&quot;) ciudades_vec ## [1] &quot;Aguascalientes&quot; &quot;Monterrey&quot; &quot;Guadalajara&quot; &quot;México&quot; res_nchar_l &lt;- lapply(ciudades_vec, nchar) res_nchar_l ## [[1]] ## [1] 14 ## ## [[2]] ## [1] 9 ## ## [[3]] ## [1] 11 ## ## [[4]] ## [1] 6 Esta función permite implementar funciones que regresen objetos de diferentes tipos, porque la listas permiten almacenar contenido heterogéneo. La función lapply() permite incluir argumentos de las funciones que implementa. Estos argumentos se incluyen dentro de lapply() después de la función a implementar. Por ejemplo, usamos la función potencia que se creó antes. potencia_fun &lt;- function(base, exponente){ base^exponente } El objetivo es aplicar a cada elemento de la siguiente lista la función potencia y elevarlo al cubo. nums_lista &lt;- list(1, 3, 4) nums_lista ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 3 ## ## [[3]] ## [1] 4 En la función lapply() se agrega el argumento exponente = 3 como último argumento. potencia_lista &lt;- lapply(nums_lista, potencia_fun, exponente = 3) potencia_lista ## [[1]] ## [1] 1 ## ## [[2]] ## [1] 27 ## ## [[3]] ## [1] 64 Una forma de reducir la lista obtenida a un vector es con la función unlist() que vimos antes. unlist(potencia_lista) ## [1] 1 27 64 sapply() La función sapply() es muy similar a lapply(). La única diferencia es la s que surge de simplified apply. Al igual que lapply() aplica una función sobre una lista o un vector pero simplifica el resultado en un arreglo. res_nchar_s &lt;- sapply(ciudades_vec, nchar) res_nchar_s ## Aguascalientes Monterrey Guadalajara México ## 14 9 11 6 Esta función es peligrosa ya que únicamente simplifica la estructura del resultado cuando es posible, de lo contrario, regresará una lista igual que lapply(). Considerando la lista siguiente, cdmx_list &lt;- list( pop = 8918653, delegaciones = c(&quot;Alvaro Obregón&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juárez&quot; , &quot;Coyoacán&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtémoc&quot; , &quot;Gustavo A. Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tláhuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;), capital = TRUE ) obtén la clase de cada elemento con la función lapply(). lapply( , class) La siguiente función extrae la letra de menor posición y mayor posición en orden alfabético. min_max_fun &lt;- function(nombre){ nombre_sinespacios &lt;- gsub(&quot; &quot;, &quot;&quot;, nombre) letras &lt;- strsplit(nombre_sinespacios, split = &quot;&quot;)[[1]] c(minimo = min(letras), maximo = max(letras)) } Es decir, si incluimos las letras abcz la letra mínima es a y la máxima es z. min_max_fun(&quot;abcz&quot;) ## minimo maximo ## &quot;a&quot; &quot;z&quot; El siguiente vector incluye el nombre de las 16 delegaciones de la Ciudad de México. delegaciones &lt;- c(&quot;Alvaro Obregon&quot;, &quot;Azcapotzalco&quot; ,&quot;Benito Juarez&quot; , &quot;Coyoacan&quot; ,&quot;Cuajimalpa de Morelos&quot; ,&quot;Cuauhtemoc&quot; , &quot;Gustavo Madero&quot; , &quot;Iztacalco&quot; ,&quot;Iztapalapa&quot; , &quot;Magdalena Contreras&quot; ,&quot;Miguel Hidalgo&quot; ,&quot;Milpa Alta&quot; , &quot;Tlahuac&quot; ,&quot;Tlalpan&quot; , &quot;Venustiano Carranza&quot; ,&quot;Xochimilco&quot;) Aplica la función sapply() para obtener un arreglo con la letra máxima y mínima de cada nombre. sapply(, ) El siguiente vector incluye el precio de la gasolina en diferentes estados del país en julio de 2017. gas_cdmx &lt;- c(15.82, 15.77, 15.83, 15.23, 14.95, 15.42, 15.55) gas_cdmx ## [1] 15.82 15.77 15.83 15.23 14.95 15.42 15.55 Crea una función que convierta el precio a dolares suponiendo que un dolar equivale a 17.76 pesos. conv_fun &lt;- function(precio){ /17.76 return() } Usando la función lapply() convierte el precio de la gasolina a dolares. gas_cdmx_usd_lista &lt;- lapply(, conv_fun) Usa la función unlist() para convertir la lista a un vector. gas_cdmx_usd &lt;- unlist() print(gas_cdmx_usd) Estadísticos importantes estadisticos &lt;- c(&quot;GAUSS:1777&quot;, &quot;BAYES:1702&quot;, &quot;FISHER:1890&quot;, &quot;PEARSON:1857&quot;) split_estadisticos &lt;- strsplit(estadisticos, split = &quot;:&quot;) split_estadisticos ## [[1]] ## [1] &quot;GAUSS&quot; &quot;1777&quot; ## ## [[2]] ## [1] &quot;BAYES&quot; &quot;1702&quot; ## ## [[3]] ## [1] &quot;FISHER&quot; &quot;1890&quot; ## ## [[4]] ## [1] &quot;PEARSON&quot; &quot;1857&quot; Utiliza la función predefinida tolower() y lapply() para convertir a minúsculas cada letra de la lista split_estadisticos. split_lower &lt;- lapply( , ) print(split_lower) Usando el vector split_estadísticos del ejercicio anterior. str(split_estadisticos) ## List of 4 ## $ : chr [1:2] &quot;GAUSS&quot; &quot;1777&quot; ## $ : chr [1:2] &quot;BAYES&quot; &quot;1702&quot; ## $ : chr [1:2] &quot;FISHER&quot; &quot;1890&quot; ## $ : chr [1:2] &quot;PEARSON&quot; &quot;1857&quot; Crea una función que regrese la primera posición. primera_pos_fun &lt;- function(lista){ } Crea una función que regrese la segunda posición. segunda_pos_fun &lt;- function(lista){ } Usando lapply() crea una lista con los nombres de los estadísticos y otra con la fecha de nacimiento. nombres &lt;- lapply() fechas &lt;- lapply() Usando una función anónima y el vector split_estadísticos en un solo lapply() o sapply() obtén un vector compuesto de la primera posición, es decir el nombre, en minúsculas. Tip: si usas lapply() recuerda usar la función unlist(). nombre_estadisticos &lt;- (split_estadisticos, function(elemento){ tolower() }) nombre_estadisticos En la siguiente lista se presenta el registro de temperatura de tres ciudades a las 07:00 am, 10:00 am, 01:00 pm, 04:00 pm y 07:00 pm. temp_lista &lt;- list( cdmx = c(13, 15, 19, 22, 20), guadalajara = c(18, 18, 22, 26, 27), tuxtla_gtz = c(22, 24, 29, 32, 28) ) str(temp_lista) ## List of 3 ## $ cdmx : num [1:5] 13 15 19 22 20 ## $ guadalajara: num [1:5] 18 18 22 26 27 ## $ tuxtla_gtz : num [1:5] 22 24 29 32 28 Completa la siguiente función que obtiene el promedio entre el valor mínimo y máximo registrados. promedio_extremos_fun &lt;- function(x) { ( min() + max() ) / 2 } Aplica la función a la lista y obtén la temperatura promedio de extremos para cada ciudad usando lapply() y sapply(). lapply(,) sapply(,) Crea una función en la que mientras la velocidad sea mayor a 50 km/hr se reduzca de la siguiente forma: Si es mayor a 80 km/hr se reducen 20 km/hr e imprime ¡Demasido rápido!. Si es menor o igual a 80km/hr se reducen únicamente 5 km/hr. velocidad_act &lt;- 140 while(velocidad_act &gt; ){ if(velocidad_act &gt; ){ print() velocidad_act &lt;- } if(velocidad_act &lt; ){ velocidad_act &lt;- } velocidad_act } 2.7.3.1 2.7.4 Rendimiento en R “We should forget about small efficiencies, say about 97% of the time: premature optimization is the root of all evil. Yet we should not pass up our opportunities in that critical 3%. A good programmer will not be lulled into complacency by such reasoning, he will be wise to look carefully at the critical code; but only after that code has been identified.” -Donald Knuth Diseña primero, luego optimiza. La optimización del código es un proceso iterativo: Encuentra el cuello de botella (más importante). Intenta eliminarlo (no siempre se puede). Repite hasta que tu código sea lo suficientemente rápido. Diagnosticar Una vez que tienes código que se puede leer y funciona, el perfilamiento (profiling) del código es un método sistemático que nos permite conocer cuanto tiempo se esta usando en diferentes partes del programa. Comenzaremos con la función system.time (no es perfilamiento aún), esta calcula el timepo en segundos que toma ejecutar una expresión (si hay un error, regresa el tiempo hasta que ocurre el error): library(Lahman) Batting %&gt;% sample_n(10) %&gt;% knitr::kable() playerID yearID stint teamID lgID G AB R H X2B X3B HR RBI SB CS BB SO IBB HBP SH SF GIDP 75294 vaughgr01 1996 2 SDN NL 43 141 20 29 3 1 10 22 4 1 24 31 2 2 0 0 1 71224 jorgete01 1993 1 MIN AL 59 152 15 34 7 0 1 12 1 0 10 21 0 0 0 1 7 49106 alyeabr01 1971 1 MIN AL 79 158 13 28 4 0 2 15 1 1 24 38 3 1 0 5 7 88544 thormsc01 2006 1 ATL NL 55 128 13 30 11 0 5 14 1 0 5 21 0 0 0 0 0 45042 brandja01 1966 1 PHI NL 82 164 16 41 6 1 1 15 0 2 17 36 2 0 4 2 4 25168 garmsde01 1933 1 SLA AL 78 189 35 60 10 2 4 24 2 5 30 21 NA 2 2 NA NA 7267 clarkbo02 1898 1 BLN NL 82 285 26 69 5 2 0 27 2 NA 4 NA NA 15 4 NA NA 10227 camerja01 1906 1 BSN NL 18 61 3 11 0 0 0 4 0 NA 2 NA NA 0 0 NA NA 32516 olsenve01 1946 1 CHN NL 5 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 53320 peterfr01 1975 1 CLE AL 25 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 system.time(lm(R ~ AB + teamID, Batting)) ## user system elapsed ## 2.935 0.088 3.022 user time: Tiempo usado por el CPU(s) para evaluar esta expresión, tiempo que experimenta la computadora. elapsed time: tiempo en el reloj, tiempo que experimenta la persona. El tiempo de usuario (user) usualmente es menor que el tiempo transcurrido: system.time(readLines(&quot;http://www.jhsph.edu&quot;)) ## user system elapsed ## 0.021 0.004 1.217 library(parallel) system.time(mclapply(2000:2006, function(x){ sub &lt;- subset(Batting, yearID == x) lm(R ~ AB, sub) }, mc.cores = 5)) ## user system elapsed ## 0.058 0.060 0.097 Comparemos la velocidad de dplyr con funciones que se encuentran en R estándar y plyr. # dplyr dplyr_st &lt;- system.time({ Batting %&gt;% group_by(playerID) %&gt;% summarise(total = sum(R, na.rm = TRUE), n = n()) %&gt;% dplyr::arrange(desc(total)) }) # plyr plyr_st &lt;- system.time({ Batting %&gt;% plyr::ddply(&quot;playerID&quot;, plyr::summarise, total = sum(R, na.rm = TRUE), n = length(R)) %&gt;% dplyr::arrange(-total) }) # estándar lento est_l_st &lt;- system.time({ players &lt;- unique(Batting$playerID) n_players &lt;- length(players) total &lt;- rep(NA, n_players) n &lt;- rep(NA, n_players) for(i in 1:n_players){ sub_batting &lt;- Batting[Batting$playerID == players[i], ] total[i] &lt;- sum(sub_batting$R, na.rm = TRUE) n[i] &lt;- nrow(sub_batting) } batting_2 &lt;- data.frame(playerID = players, total = total, n = n) batting_2[order(batting_2$total, decreasing = TRUE), ] }) # estándar rápido est_r_st &lt;- system.time({ batting_2 &lt;- aggregate(. ~ playerID, data = Batting[, c(&quot;playerID&quot;, &quot;R&quot;)], sum) batting_ord &lt;- batting_2[order(batting_2$R, decreasing = TRUE), ] }) dplyr_st ## user system elapsed ## 0.148 0.004 0.152 plyr_st ## user system elapsed ## 7.390 0.040 7.432 est_l_st ## user system elapsed ## 67.315 0.136 67.462 est_r_st ## user system elapsed ## 0.615 0.000 0.616 La función system.time supone que sabes donde buscar, es decir, que expresiones debes evaluar, una función que puede ser más útil cuando uno desconoce cuál es la función que alenta un programa es Rprof(). Rprof es un perfilador de muestreo que registra cambios en la pila de funciones, funciona tomando muestras a intervalos regulares y tabula cuánto tiempo se lleva en cada función. Rprof(&quot;out/lm_rprof.out&quot;, interval = 0.015, line.profiling = TRUE) mod &lt;- lm(R ~ AB + teamID, Batting) Rprof(NULL) Usamos la función `summaryRprof para tabular las salidas de Rprof y calcular cuánto tiempo se toma en cada función. summaryRprof(&quot;out/lm_rprof.out&quot;) ## $by.self ## self.time self.pct total.time total.pct ## &quot;lm.fit&quot; 2.84 90.43 2.84 90.43 ## &quot;.External2&quot; 0.22 7.18 0.24 7.66 ## &quot;as.character&quot; 0.04 1.44 0.04 1.44 ## &quot;anyDuplicated.default&quot; 0.02 0.48 0.02 0.48 ## &quot;sys.call&quot; 0.02 0.48 0.02 0.48 ## ## $by.total ## total.time total.pct self.time self.pct ## &quot;&lt;Anonymous&gt;&quot; 3.13 100.00 0.00 0.00 ## &quot;block_exec&quot; 3.13 100.00 0.00 0.00 ## &quot;call_block&quot; 3.13 100.00 0.00 0.00 ## &quot;do.call&quot; 3.13 100.00 0.00 0.00 ## &quot;eval.parent&quot; 3.13 100.00 0.00 0.00 ## &quot;eval&quot; 3.13 100.00 0.00 0.00 ## &quot;evaluate_call&quot; 3.13 100.00 0.00 0.00 ## &quot;evaluate::evaluate&quot; 3.13 100.00 0.00 0.00 ## &quot;evaluate&quot; 3.13 100.00 0.00 0.00 ## &quot;handle&quot; 3.13 100.00 0.00 0.00 ## &quot;in_dir&quot; 3.13 100.00 0.00 0.00 ## &quot;knitr::knit&quot; 3.13 100.00 0.00 0.00 ## &quot;lm&quot; 3.13 100.00 0.00 0.00 ## &quot;local&quot; 3.13 100.00 0.00 0.00 ## &quot;process_file&quot; 3.13 100.00 0.00 0.00 ## &quot;process_group.block&quot; 3.13 100.00 0.00 0.00 ## &quot;process_group&quot; 3.13 100.00 0.00 0.00 ## &quot;timing_fn&quot; 3.13 100.00 0.00 0.00 ## &quot;withCallingHandlers&quot; 3.13 100.00 0.00 0.00 ## &quot;withVisible&quot; 3.13 100.00 0.00 0.00 ## &quot;lm.fit&quot; 2.84 90.43 2.84 90.43 ## &quot;.External2&quot; 0.24 7.66 0.22 7.18 ## &quot;model.matrix.default&quot; 0.22 7.18 0.00 0.00 ## &quot;model.matrix&quot; 0.22 7.18 0.00 0.00 ## &quot;as.character&quot; 0.04 1.44 0.04 1.44 ## &quot;model.response&quot; 0.04 1.44 0.00 0.00 ## &quot;anyDuplicated.default&quot; 0.02 0.48 0.02 0.48 ## &quot;sys.call&quot; 0.02 0.48 0.02 0.48 ## &quot;[.data.frame&quot; 0.02 0.48 0.00 0.00 ## &quot;[&quot; 0.02 0.48 0.00 0.00 ## &quot;[[.data.frame&quot; 0.02 0.48 0.00 0.00 ## &quot;[[&quot; 0.02 0.48 0.00 0.00 ## &quot;%in%&quot; 0.02 0.48 0.00 0.00 ## &quot;$.data.frame&quot; 0.02 0.48 0.00 0.00 ## &quot;$&quot; 0.02 0.48 0.00 0.00 ## &quot;anyDuplicated&quot; 0.02 0.48 0.00 0.00 ## &quot;as.vector&quot; 0.02 0.48 0.00 0.00 ## &quot;model.frame.default&quot; 0.02 0.48 0.00 0.00 ## &quot;model.weights&quot; 0.02 0.48 0.00 0.00 ## &quot;na.omit.data.frame&quot; 0.02 0.48 0.00 0.00 ## &quot;na.omit&quot; 0.02 0.48 0.00 0.00 ## &quot;stats::model.frame&quot; 0.02 0.48 0.00 0.00 ## ## $sample.interval ## [1] 0.015 ## ## $sampling.time ## [1] 3.135 Hay dos métodos para normalizar los datos de Rprof: by.total divide el tiempo que se toma en cada función entre el tiempo total en correr. by.self similar a by.total pero primero resta el tiempo que se toman las funciones en la cima de la pila. Rprof(&quot;out/plyr_rprof.out&quot;) Batting %&gt;% plyr::ddply(&quot;playerID&quot;, plyr::summarise, total = sum(R, na.rm = TRUE), n = length(R)) %&gt;% plyr::arrange(-total) %&gt;% head() ## playerID total n ## 1 henderi01 2295 29 ## 2 cobbty01 2246 24 ## 3 bondsba01 2227 22 ## 4 aaronha01 2174 23 ## 5 ruthba01 2174 22 ## 6 rosepe01 2165 25 Rprof(NULL) summaryRprof(&quot;out/plyr_rprof.out&quot;)$by.self[1:10, ] ## self.time self.pct total.time total.pct ## &quot;FUN&quot; 1.22 13.20 1.98 21.43 ## &quot;lapply&quot; 1.18 12.77 3.18 34.42 ## &quot;as.list&quot; 0.70 7.58 0.84 9.09 ## &quot;.fun&quot; 0.40 4.33 3.36 36.36 ## &quot;eval&quot; 0.36 3.90 9.24 100.00 ## &quot;stopifnot&quot; 0.34 3.68 0.68 7.36 ## &quot;extract_rows&quot; 0.32 3.46 3.74 40.48 ## &quot;[[&quot; 0.26 2.81 4.48 48.48 ## &quot;[[.data.frame&quot; 0.24 2.60 0.50 5.41 ## &quot;unique&quot; 0.22 2.38 0.70 7.58 # Rprof(&quot;out/slow_rprof.out&quot;) # players &lt;- unique(batting$playerID) # n_players &lt;- length(players) # total &lt;- rep(NA, n_players) # n &lt;- rep(NA, n_players) # for(i in 1:n_players){ # sub_batting &lt;- batting[batting$playerID == players[i], ] # total[i] &lt;- sum(sub_batting$R) # n[i] &lt;- nrow(sub_batting) # } # batting_2 &lt;- data.frame(playerID = players, total = total, n = n) # batting_2[order(batting_2$total, decreasing = TRUE), ] # Rprof(NULL) summaryRprof(&quot;out/slow_rprof.out&quot;)$by.self[1:10, ] ## self.time self.pct total.time total.pct ## &quot;[.data.frame&quot; 45.50 54.74 82.74 99.54 ## &quot;==&quot; 24.78 29.81 24.78 29.81 ## &quot;attr&quot; 6.70 8.06 6.70 8.06 ## &quot;NextMethod&quot; 3.42 4.11 3.44 4.14 ## &quot;[[&quot; 1.32 1.59 2.12 2.55 ## &quot;[[.data.frame&quot; 0.22 0.26 0.80 0.96 ## &quot;&lt;Anonymous&gt;&quot; 0.20 0.24 0.46 0.55 ## &quot;all&quot; 0.10 0.12 0.10 0.12 ## &quot;sys.call&quot; 0.10 0.12 0.10 0.12 ## &quot;%in%&quot; 0.08 0.10 0.22 0.26 Estrategias para mejorar desempeño Utilizar apropiadamente funciones de R, o funciones de paquetes que muchas veces están mejor escritas de lo que nosotros podríamos hacer. Hacer lo menos posible. Usar funciones vectorizadas en R (casi siempre). No hacer crecer objetos (es preferible definir su tamaño antes de operar en ellos). Paralelizar. La más simple y muchas veces la más barata: conseguie una máquina más grande (por ejemplo Amazon Web Services). 1 Utilizar apropiadamente funciones de R Si el cuello de botella es la función de un paquete vale la pena buscar alternativas, CRAN task views es un buen lugar para buscar. 2 Hacer lo menos posible Utiliza funciones más específicas, por ejemplo: rowSums(), colSums(), rowMeans() y colMeans() son más rápidas que las invocaciones equivalentes de apply(). Si quieres checar si un vector contiene un valor any(x == 10) es más veloz que 10 %in% x, esto es porque examinar igualdad es más sencillo que examinar inclusión en un conjunto. Este conocimiento requiere que conozcas alternativas, para ello debes construir tu vocabulario, puedes comenzar por lo básico e ir incrementando conforme lees código. Otro caso es cuando las funciones son más rápidas cunado les das más información del problema, por ejemplo: read.csv(), especificar las clases de las columnas con colClasses. factor() especifica los niveles con el argumento levels. 3.1 Usar funciones vectorizadas en R Es común escuchar que en R vectorizar es conveniente, el enfoque vectorizado va más allá que evitar ciclos for: Pensar en objetos, en lugar de enfocarse en las compoentes de un vector, se piensa únicamente en el vector completo. Los ciclos en las funciones vectorizadas de R están escritos en C, lo que los hace más veloces. Las funciones vectorizadas programadas en R pueden mejorar la interfaz de una función pero no necesariamente mejorar el desempeño. Usar vectorización para desempeño implica encontrar funciones de R implementadas en C. Al igual que en el punto anterior, vectorizar requiere encontrar las funciones apropiadas, algunos ejemplos incluyen: _rowSums(), colSums(), rowMeans() y colMeans(). 3.2 Evitar copias Otro aspecto importante es que generalmente conviene asignar objetos en lugar de hacerlos crecer (es más eficiente asignar toda la memoria necesaria antes del cálculo que asignarla sucesivamente). Esto es porque cuando se usan instrucciones para crear un objeto más grande (e.g. append(), cbind(), c(), rbind()) R debe primero asignar espacio a un nuevo objeto y luego copiar al nuevo lugar. Para leer más sobre esto The R Inferno es una buena referencia. Veamos unos ejemplos de vectorización y de asignar objetos. aciertos &lt;- FALSE system.time( for (i in 1:1e+05) { if (runif(1) &lt; 0.3) aciertos[i] &lt;- TRUE }) ## user system elapsed ## 0.411 0.076 0.487 aciertos &lt;- rep(FALSE, 1e+06) system.time( for (i in 1:1e+05) { if (runif(1) &lt; 0.3) aciertos[i] &lt;- TRUE }) ## user system elapsed ## 0.255 0.028 0.282 Usando rbind: crecer_rbind &lt;- function(){ mi.df &lt;- data.frame(a = character(0), b = numeric(0)) for(i in 1:1e3) { mi.df &lt;- rbind(mi.df, data.frame(a = sample(letters, 1), b = runif(1))) } mi.df } system.time(mi.df.1 &lt;- crecer_rbind()) ## user system elapsed ## 0.813 0.004 0.816 Si definimos el tamaño del data.frame obtenemos mejoras: crecer_rbind_2 &lt;- function() { mi.df &lt;- data.frame(a = rep(NA, 1000), b = rep(NA, 1000)) for (i in 1:1000) { mi.df$a[i] &lt;- sample(letters, 1) mi.df$b[i] &lt;- runif(1) } mi.df } system.time(mi.df.1 &lt;- crecer_rbind_2()) ## user system elapsed ## 0.080 0.000 0.079 Finalmente, veamos un enfoque totalmente vectorizado porcolumna_df &lt;- function(){ a &lt;- sample(letters, 1000, replace = TRUE) b &lt;- runif(1000) mi.df &lt;- data.frame(a = a, b = b) mi.df } system.time(mi.df.2 &lt;- porcolumna_df()) ## user system elapsed ## 0.001 0.000 0.000 A pesar de que aumentamos la velocidad conforme aumentamos el nivel de vectorización, este incremento conlleva un costo en memoria. Si comparamos la versión mas lenta con la más rápida, en la última debemos asignar a, b y mi.df. Entonces, no siempre es mejor vectorizar, pues si consumimos la memoria, entonces la versión vectorizada puede enfrentarse al problema de uso de memoria en disco, que tiene aun más grandes penalizaciones en el desempeño que los ciclos que hemos visto. 4 Paralelizar Paralelizar usa varios cores para trabajar de manera simultánea en varias secciones de un problema, no reduce el tiempo computacional pero incrementa el tiempo del usuario pues aprovecha los recursos. Como referencia está Parallel Computing for Data Science de Norm Matloff. Referencias "],
["referencias.html", "Referencias", " Referencias "]
]
